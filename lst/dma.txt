; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\dma.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\dma.d --cpu=Cortex-M0+ --fpmode=fast --apcs=interwork -O1 -I.\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Freescale\Kinetis -D__RTX -D__MICROLIB -DMKL25Z128xxx4 --omf_browse=.\obj\dma.crf src\DMA.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  DMA_Init PROC
;;;12     
;;;13     void DMA_Init(void) {
000000  482d              LDR      r0,|L1.184|
;;;14     	SIM->SCGC7 |= SIM_SCGC7_DMA_MASK;
000002  6801              LDR      r1,[r0,#0]
000004  1582              ASRS     r2,r0,#22
000006  4311              ORRS     r1,r1,r2
000008  6001              STR      r1,[r0,#0]
;;;15     	SIM->SCGC6 |= SIM_SCGC6_DMAMUX_MASK;
00000a  482b              LDR      r0,|L1.184|
00000c  3840              SUBS     r0,r0,#0x40
00000e  6bc1              LDR      r1,[r0,#0x3c]
000010  2202              MOVS     r2,#2
000012  4311              ORRS     r1,r1,r2
000014  63c1              STR      r1,[r0,#0x3c]
;;;16     }
000016  4770              BX       lr
;;;17     
                          ENDP

                  Configure_DMA_For_Playback PROC
;;;18     void Configure_DMA_For_Playback(uint16_t * source, uint32_t count, uint32_t num_playbacks) {
000018  b510              PUSH     {r4,lr}
;;;19     
;;;20     /*
;;;21     	SIM->SCGC7 |= SIM_SCGC7_DMA_MASK;
;;;22     	SIM->SCGC6 |= SIM_SCGC6_DMAMUX_MASK;
;;;23     */
;;;24     	
;;;25     	// Disable DMA channel, allows changes
;;;26     	DMAMUX0->CHCFG[0] = 0;
00001a  4c28              LDR      r4,|L1.188|
00001c  2300              MOVS     r3,#0
00001e  7023              STRB     r3,[r4,#0]
;;;27     
;;;28     	Reload_DMA_Source = source;
000020  4b27              LDR      r3,|L1.192|
000022  6018              STR      r0,[r3,#0]  ; Reload_DMA_Source
;;;29     	Reload_DMA_Byte_Count = count*2;
000024  0048              LSLS     r0,r1,#1
000026  6058              STR      r0,[r3,#4]  ; Reload_DMA_Byte_Count
;;;30     	DMA_Playback_Count = num_playbacks;
000028  609a              STR      r2,[r3,#8]  ; DMA_Playback_Count
;;;31     	
;;;32     	// Generate DMA interrupt when done
;;;33     	// Increment source, transfer words (16 bits)
;;;34     	// Enable peripheral request
;;;35     	DMA0->DMA[0].DCR = DMA_DCR_EINT_MASK | DMA_DCR_SINC_MASK | 
00002a  4927              LDR      r1,|L1.200|
00002c  4825              LDR      r0,|L1.196|
00002e  60c8              STR      r0,[r1,#0xc]
000030  4826              LDR      r0,|L1.204|
000032  6801              LDR      r1,[r0,#0]
000034  0a09              LSRS     r1,r1,#8
000036  0209              LSLS     r1,r1,#8
000038  6001              STR      r1,[r0,#0]
00003a  4925              LDR      r1,|L1.208|
00003c  2001              MOVS     r0,#1
00003e  6008              STR      r0,[r1,#0]
000040  4924              LDR      r1,|L1.212|
000042  6008              STR      r0,[r1,#0]
;;;36     											DMA_DCR_SSIZE(2) | DMA_DCR_DSIZE(2) |
;;;37     											DMA_DCR_ERQ_MASK | DMA_DCR_CS_MASK;
;;;38     
;;;39     	
;;;40     	// Configure NVIC for DMA ISR
;;;41     	NVIC_SetPriority(DMA0_IRQn, 128); // 0, 64, 128 or 192
;;;42     	NVIC_ClearPendingIRQ(DMA0_IRQn); 
;;;43     	NVIC_EnableIRQ(DMA0_IRQn);	
;;;44     
;;;45     	// Enable DMA MUX channel without periodic triggering
;;;46     	// select TPM0 overflow as trigger
;;;47     	DMAMUX0->CHCFG[0] = DMAMUX_CHCFG_SOURCE(54);   
000044  2036              MOVS     r0,#0x36
000046  7020              STRB     r0,[r4,#0]
;;;48     }
000048  bd10              POP      {r4,pc}
;;;49     
                          ENDP

                  Start_DMA_Playback PROC
;;;50     void Start_DMA_Playback() {
00004a  b510              PUSH     {r4,lr}
;;;51     	
;;;52     #if 0 // old demo code
;;;53     	if (DMA_Playback_Count == 0)
;;;54     		return;
;;;55     #endif
;;;56     	
;;;57     	DMAMUX0->CHCFG[0] = DMAMUX_CHCFG_SOURCE(54);   
00004c  491b              LDR      r1,|L1.188|
00004e  2036              MOVS     r0,#0x36
000050  7008              STRB     r0,[r1,#0]
;;;58     
;;;59     	// initialize source and destination pointers
;;;60     	DMA0->DMA[0].SAR = DMA_SAR_SAR((uint32_t) Reload_DMA_Source);
000052  4a1b              LDR      r2,|L1.192|
000054  481c              LDR      r0,|L1.200|
000056  6813              LDR      r3,[r2,#0]  ; Reload_DMA_Source
000058  6003              STR      r3,[r0,#0]
;;;61     	DMA0->DMA[0].DAR = DMA_DAR_DAR((uint32_t) (&(DAC0->DAT[0])));
00005a  4b1f              LDR      r3,|L1.216|
00005c  6043              STR      r3,[r0,#4]
;;;62     	
;;;63     	// byte count
;;;64     	DMA0->DMA[0].DSR_BCR = DMA_DSR_BCR_BCR(Reload_DMA_Byte_Count);
00005e  6852              LDR      r2,[r2,#4]  ; Reload_DMA_Byte_Count
000060  0212              LSLS     r2,r2,#8
000062  0a12              LSRS     r2,r2,#8
000064  6082              STR      r2,[r0,#8]
;;;65     	
;;;66     	// verify done flag is cleared
;;;67     	DMA0->DMA[0].DSR_BCR &= ~DMA_DSR_BCR_DONE_MASK; 
000066  6882              LDR      r2,[r0,#8]
000068  2301              MOVS     r3,#1
00006a  061b              LSLS     r3,r3,#24
00006c  439a              BICS     r2,r2,r3
00006e  6082              STR      r2,[r0,#8]
;;;68     	
;;;69     	DMAMUX0->CHCFG[0] |= DMAMUX_CHCFG_ENBL_MASK;
000070  7808              LDRB     r0,[r1,#0]
000072  2280              MOVS     r2,#0x80
000074  4310              ORRS     r0,r0,r2
000076  7008              STRB     r0,[r1,#0]
;;;70     
;;;71     	// start the timer running
;;;72     	TPM0_Start();
000078  f7fffffe          BL       TPM0_Start
;;;73     }
00007c  bd10              POP      {r4,pc}
;;;74     
                          ENDP

                  DMA0_IRQHandler PROC
;;;75     void DMA0_IRQHandler(void) {
00007e  b510              PUSH     {r4,lr}
;;;76     	// Light green LED in DMA IRQ handler
;;;77     	Control_RGB_LEDs(0,1,0);
000080  2200              MOVS     r2,#0
000082  2101              MOVS     r1,#1
000084  4610              MOV      r0,r2
000086  f7fffffe          BL       Control_RGB_LEDs
00008a  4911              LDR      r1,|L1.208|
00008c  2001              MOVS     r0,#1
00008e  6008              STR      r0,[r1,#0]
;;;78     	NVIC_ClearPendingIRQ(DMA0_IRQn);
;;;79     	// Clear done flag 
;;;80     	DMA0->DMA[0].DSR_BCR |= DMA_DSR_BCR_DONE_MASK; 
000090  480d              LDR      r0,|L1.200|
000092  6881              LDR      r1,[r0,#8]
000094  2201              MOVS     r2,#1
000096  0612              LSLS     r2,r2,#24
000098  4311              ORRS     r1,r1,r2
00009a  6081              STR      r1,[r0,#8]
;;;81     
;;;82     #if 1 // under development for continuous playback
;;;83     	// Signal event requesting source buffer refill
;;;84     	isr_evt_set(EV_REFILL_SOUND, t_Refill_Sound_Buffer);
00009c  480f              LDR      r0,|L1.220|
00009e  6801              LDR      r1,[r0,#0]  ; t_Refill_Sound_Buffer
0000a0  2001              MOVS     r0,#1
0000a2  f7fffffe          BL       isr_evt_set
;;;85     	// Start playback again
;;;86     	Start_DMA_Playback();
0000a6  f7fffffe          BL       Start_DMA_Playback
;;;87     #else
;;;88     	// Disable DMA
;;;89     	DMAMUX0->CHCFG[0] &= ~DMAMUX_CHCFG_ENBL_MASK;
;;;90     #endif 
;;;91     	
;;;92     	Control_RGB_LEDs(0,0,0);
0000aa  2200              MOVS     r2,#0
0000ac  4611              MOV      r1,r2
0000ae  4610              MOV      r0,r2
0000b0  f7fffffe          BL       Control_RGB_LEDs
;;;93     }
0000b4  bd10              POP      {r4,pc}
;;;94     // *******************************ARM University Program Copyright © ARM Ltd 2013*************************************   
                          ENDP

0000b6  0000              DCW      0x0000
                  |L1.184|
                          DCD      0x40048040
                  |L1.188|
                          DCD      0x40021000
                  |L1.192|
                          DCD      ||.data||
                  |L1.196|
                          DCD      0xe0640000
                  |L1.200|
                          DCD      0x40008100
                  |L1.204|
                          DCD      0xe000e400
                  |L1.208|
                          DCD      0xe000e280
                  |L1.212|
                          DCD      0xe000e100
                  |L1.216|
                          DCD      0x4003f000
                  |L1.220|
                          DCD      t_Refill_Sound_Buffer

                          AREA ||.data||, DATA, ALIGN=2

                  Reload_DMA_Source
                          DCD      0x00000000
                  Reload_DMA_Byte_Count
                          DCD      0x00000000
                  DMA_Playback_Count
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "src\\DMA.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_DMA_c_bbeba4b5____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_DMA_c_bbeba4b5____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_DMA_c_bbeba4b5____REVSH|
#line 144
|__asm___5_DMA_c_bbeba4b5____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
