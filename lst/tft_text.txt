; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\tft_text.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\tft_text.d --cpu=Cortex-M0+ --fpmode=fast --apcs=interwork -O1 -I.\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Freescale\Kinetis -D__RTX -D__MICROLIB -DMKL25Z128xxx4 --omf_browse=.\obj\tft_text.crf src\TFT_text.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  TFT_Text_Set_Colors PROC
;;;15     
;;;16     void TFT_Text_Set_Colors(COLOR_T * foreground, COLOR_T * background) {
000000  4a94              LDR      r2,|L1.596|
;;;17     	fg.R = foreground->R;
000002  7803              LDRB     r3,[r0,#0]
000004  7013              STRB     r3,[r2,#0]
;;;18     	fg.G = foreground->G;
000006  7843              LDRB     r3,[r0,#1]
000008  7053              STRB     r3,[r2,#1]
;;;19     	fg.B = foreground->B;
00000a  7880              LDRB     r0,[r0,#2]
00000c  7090              STRB     r0,[r2,#2]
;;;20     	bg.R = background->R;
00000e  4891              LDR      r0,|L1.596|
000010  780a              LDRB     r2,[r1,#0]
000012  1cc0              ADDS     r0,r0,#3
000014  7002              STRB     r2,[r0,#0]
;;;21     	bg.G = background->G;
000016  784a              LDRB     r2,[r1,#1]
000018  7042              STRB     r2,[r0,#1]
;;;22     	bg.B = background->B;
00001a  7889              LDRB     r1,[r1,#2]
00001c  7081              STRB     r1,[r0,#2]
;;;23     }
00001e  4770              BX       lr
;;;24     
                          ENDP

                  TFT_Erase PROC
;;;25     void TFT_Erase(void) {
000020  b510              PUSH     {r4,lr}
;;;26     	TFT_Fill_Buffer(&bg);
000022  488c              LDR      r0,|L1.596|
000024  1cc0              ADDS     r0,r0,#3
000026  f7fffffe          BL       TFT_Fill_Buffer
;;;27     }
00002a  bd10              POP      {r4,pc}
;;;28     
                          ENDP

                  TFT_Text_Init PROC
;;;29     void TFT_Text_Init(uint8_t font_num) {
00002c  4889              LDR      r0,|L1.596|
;;;30     	
;;;31     #if 0  // Code for multiple fonts not working yet
;;;32     	font = fonts[font_num];
;;;33     	G_TFT_char_width = char_widths[font_num];
;;;34     	G_TFT_char_height = char_heights[font_num];
;;;35     #else // This code is working
;;;36     	font = Lucida_Console12x19;
00002e  498a              LDR      r1,|L1.600|
000030  1e80              SUBS     r0,r0,#2
000032  6081              STR      r1,[r0,#8]  ; font
;;;37     	G_TFT_char_width = 12;
000034  220c              MOVS     r2,#0xc
000036  7002              STRB     r2,[r0,#0]
;;;38     	G_TFT_char_height = 19;
000038  2213              MOVS     r2,#0x13
00003a  7042              STRB     r2,[r0,#1]
;;;39     #endif
;;;40     	
;;;41     	font_header = (FONT_HEADER_T *) font;
00003c  60c1              STR      r1,[r0,#0xc]  ; font_header
;;;42     	glyph_index = (GLYPH_INDEX_T *) (font + sizeof(FONT_HEADER_T));
00003e  3108              ADDS     r1,r1,#8
000040  6101              STR      r1,[r0,#0x10]  ; glyph_index
;;;43     	
;;;44     	// Set default FG and BG colors
;;;45     	fg.R = 255;
000042  4984              LDR      r1,|L1.596|
000044  20ff              MOVS     r0,#0xff
000046  7008              STRB     r0,[r1,#0]
;;;46     	fg.G = 255;
000048  7048              STRB     r0,[r1,#1]
;;;47     	fg.B = 0;
00004a  2000              MOVS     r0,#0
00004c  7088              STRB     r0,[r1,#2]
;;;48     
;;;49     	bg.R = 0;
00004e  1cc9              ADDS     r1,r1,#3
000050  7008              STRB     r0,[r1,#0]
;;;50     	bg.G = 0;
000052  7048              STRB     r0,[r1,#1]
;;;51     	bg.B = 0;
000054  7088              STRB     r0,[r1,#2]
;;;52     }
000056  4770              BX       lr
;;;53     
                          ENDP

                  TFT_Text_PrintChar PROC
;;;54     void TFT_Text_PrintChar(PT_T * pos, char ch) {
000058  b5f0              PUSH     {r4-r7,lr}
00005a  b085              SUB      sp,sp,#0x14
;;;55     	uint8_t glyph_index_entry;
;;;56     	const uint8_t * glyph_data; // start of the data
;;;57     	PT_T end_pos;
;;;58     	COLOR_T * pixel_color;
;;;59     	uint8_t bitmap_byte;
;;;60     	uint8_t glyph_width, x_bm;
;;;61     	uint32_t offset;
;;;62     	uint32_t row, col, num_pixels;
;;;63     	
;;;64     	glyph_index_entry = ch - font_header->FirstChar;
00005c  4c7d              LDR      r4,|L1.596|
00005e  1ea4              SUBS     r4,r4,#2
000060  68e2              LDR      r2,[r4,#0xc]  ; font_header
000062  7892              LDRB     r2,[r2,#2]
000064  1a89              SUBS     r1,r1,r2
000066  b2c9              UXTB     r1,r1
;;;65     	glyph_width = glyph_index[glyph_index_entry].Width;
000068  6922              LDR      r2,[r4,#0x10]  ; glyph_index
00006a  0089              LSLS     r1,r1,#2
00006c  5851              LDR      r1,[r2,r1]
00006e  b2cf              UXTB     r7,r1
;;;66     	offset = glyph_index[glyph_index_entry].Offset;
000070  0a09              LSRS     r1,r1,#8
;;;67     	glyph_data = &(font[offset]);
000072  68a2              LDR      r2,[r4,#8]  ; font
000074  1851              ADDS     r1,r2,r1
000076  9104              STR      r1,[sp,#0x10]
;;;68     	
;;;69     	end_pos.X = pos->X+CHAR_WIDTH-1;
000078  7821              LDRB     r1,[r4,#0]  ; G_TFT_char_width
00007a  6802              LDR      r2,[r0,#0]
00007c  1e49              SUBS     r1,r1,#1
00007e  1851              ADDS     r1,r2,r1
000080  9102              STR      r1,[sp,#8]
;;;70     	end_pos.Y = pos->Y+CHAR_HEIGHT-1;
000082  7861              LDRB     r1,[r4,#1]  ; G_TFT_char_height
000084  6842              LDR      r2,[r0,#4]
000086  1e49              SUBS     r1,r1,#1
000088  1851              ADDS     r1,r2,r1
00008a  9103              STR      r1,[sp,#0xc]
;;;71     	TFT_Start_Rectangle(pos, &end_pos); 
00008c  a902              ADD      r1,sp,#8
00008e  f7fffffe          BL       TFT_Start_Rectangle
;;;72     	
;;;73     	for (row = 0; row < CHAR_HEIGHT; row++) {
000092  2000              MOVS     r0,#0
000094  9001              STR      r0,[sp,#4]
000096  e0ab              B        |L1.496|
                  |L1.152|
;;;74     		x_bm = 0;
000098  2400              MOVS     r4,#0
                  |L1.154|
;;;75     		do {
;;;76     			bitmap_byte = *glyph_data;
00009a  9804              LDR      r0,[sp,#0x10]
00009c  7805              LDRB     r5,[r0,#0]
;;;77     			if (bitmap_byte == 0x00) {
00009e  2d00              CMP      r5,#0
0000a0  d016              BEQ      |L1.208|
;;;78     				num_pixels = MIN(8,glyph_width - x_bm);
;;;79     				TFT_Write_Rectangle_Pixel(&bg, num_pixels);
;;;80     				x_bm += num_pixels;	
;;;81     			} else if (bitmap_byte == 0xff) {
0000a2  2dff              CMP      r5,#0xff
0000a4  d020              BEQ      |L1.232|
;;;82     				num_pixels = MIN(8,glyph_width - x_bm);
;;;83     				TFT_Write_Rectangle_Pixel(&fg, num_pixels);
;;;84     				x_bm += num_pixels;	
;;;85     			} else {
;;;86     				col = 0;
0000a6  2000              MOVS     r0,#0
0000a8  9000              STR      r0,[sp,#0]
;;;87     				num_pixels = 0;
0000aa  2600              MOVS     r6,#0
;;;88     				if ((bitmap_byte & 0x7f) == 0) {
0000ac  0668              LSLS     r0,r5,#25
0000ae  d026              BEQ      |L1.254|
;;;89     					num_pixels = MIN(7,glyph_width - x_bm);
;;;90     					TFT_Write_Rectangle_Pixel(&bg, num_pixels);
;;;91     				} else if ((bitmap_byte & 0x7f) == 0x7f) {
0000b0  43e8              MVNS     r0,r5
0000b2  0641              LSLS     r1,r0,#25
0000b4  d02d              BEQ      |L1.274|
;;;92     					num_pixels = MIN(7,glyph_width - x_bm);
;;;93     					TFT_Write_Rectangle_Pixel(&fg, num_pixels);
;;;94     				} else if ((bitmap_byte & 0x3f) == 0) {
0000b6  06a9              LSLS     r1,r5,#26
0000b8  d034              BEQ      |L1.292|
;;;95     					num_pixels = MIN(6,glyph_width - x_bm);
;;;96     					TFT_Write_Rectangle_Pixel(&bg, num_pixels);
;;;97     				} else if ((bitmap_byte & 0x3f) == 0x3f) {
0000ba  0681              LSLS     r1,r0,#26
0000bc  d03c              BEQ      |L1.312|
;;;98     					num_pixels = MIN(6,glyph_width - x_bm);
;;;99     					TFT_Write_Rectangle_Pixel(&fg, num_pixels);
;;;100    				} else if ((bitmap_byte & 0x1f) == 0) {
0000be  06e9              LSLS     r1,r5,#27
0000c0  d043              BEQ      |L1.330|
;;;101    					num_pixels = MIN(5,glyph_width - x_bm);
;;;102    					TFT_Write_Rectangle_Pixel(&bg, num_pixels);
;;;103    				} else if ((bitmap_byte & 0x1f) == 0x1f) {
0000c2  06c1              LSLS     r1,r0,#27
0000c4  d04b              BEQ      |L1.350|
;;;104    					num_pixels = MIN(5,glyph_width - x_bm);
;;;105    					TFT_Write_Rectangle_Pixel(&fg, num_pixels);
;;;106    				} else if ((bitmap_byte & 0x0f) == 0) {
0000c6  0729              LSLS     r1,r5,#28
0000c8  d052              BEQ      |L1.368|
;;;107    					num_pixels = MIN(4,glyph_width - x_bm);
;;;108    					TFT_Write_Rectangle_Pixel(&bg, num_pixels);
;;;109    				} else if ((bitmap_byte & 0x0f) == 0x0f) {
0000ca  0700              LSLS     r0,r0,#28
0000cc  d05a              BEQ      |L1.388|
0000ce  e061              B        |L1.404|
                  |L1.208|
0000d0  1b3d              SUBS     r5,r7,r4              ;78
0000d2  2d08              CMP      r5,#8                 ;78
0000d4  dd00              BLE      |L1.216|
0000d6  2508              MOVS     r5,#8                 ;78
                  |L1.216|
0000d8  485e              LDR      r0,|L1.596|
0000da  4629              MOV      r1,r5                 ;79
0000dc  1cc0              ADDS     r0,r0,#3              ;79
0000de  f7fffffe          BL       TFT_Write_Rectangle_Pixel
0000e2  1960              ADDS     r0,r4,r5              ;80
0000e4  b2c4              UXTB     r4,r0                 ;80
0000e6  e070              B        |L1.458|
                  |L1.232|
0000e8  1b3d              SUBS     r5,r7,r4              ;82
0000ea  2d08              CMP      r5,#8                 ;82
0000ec  dd00              BLE      |L1.240|
0000ee  2508              MOVS     r5,#8                 ;82
                  |L1.240|
0000f0  4629              MOV      r1,r5                 ;83
0000f2  4858              LDR      r0,|L1.596|
0000f4  f7fffffe          BL       TFT_Write_Rectangle_Pixel
0000f8  1960              ADDS     r0,r4,r5              ;84
0000fa  b2c4              UXTB     r4,r0                 ;84
0000fc  e065              B        |L1.458|
                  |L1.254|
0000fe  1b3e              SUBS     r6,r7,r4              ;89
000100  2e07              CMP      r6,#7                 ;89
000102  dd00              BLE      |L1.262|
000104  2607              MOVS     r6,#7                 ;89
                  |L1.262|
000106  4853              LDR      r0,|L1.596|
000108  4631              MOV      r1,r6                 ;90
00010a  1cc0              ADDS     r0,r0,#3              ;90
00010c  f7fffffe          BL       TFT_Write_Rectangle_Pixel
000110  e040              B        |L1.404|
                  |L1.274|
000112  1b3e              SUBS     r6,r7,r4              ;92
000114  2e07              CMP      r6,#7                 ;92
000116  dd00              BLE      |L1.282|
000118  2607              MOVS     r6,#7                 ;92
                  |L1.282|
00011a  4631              MOV      r1,r6                 ;93
00011c  484d              LDR      r0,|L1.596|
00011e  f7fffffe          BL       TFT_Write_Rectangle_Pixel
000122  e037              B        |L1.404|
                  |L1.292|
000124  1b3e              SUBS     r6,r7,r4              ;95
000126  2e06              CMP      r6,#6                 ;95
000128  dd00              BLE      |L1.300|
00012a  2606              MOVS     r6,#6                 ;95
                  |L1.300|
00012c  4849              LDR      r0,|L1.596|
00012e  4631              MOV      r1,r6                 ;96
000130  1cc0              ADDS     r0,r0,#3              ;96
000132  f7fffffe          BL       TFT_Write_Rectangle_Pixel
000136  e02d              B        |L1.404|
                  |L1.312|
000138  1b3e              SUBS     r6,r7,r4              ;98
00013a  2e06              CMP      r6,#6                 ;98
00013c  dd00              BLE      |L1.320|
00013e  2606              MOVS     r6,#6                 ;98
                  |L1.320|
000140  4631              MOV      r1,r6                 ;99
000142  4844              LDR      r0,|L1.596|
000144  f7fffffe          BL       TFT_Write_Rectangle_Pixel
000148  e024              B        |L1.404|
                  |L1.330|
00014a  1b3e              SUBS     r6,r7,r4              ;101
00014c  2e05              CMP      r6,#5                 ;101
00014e  dd00              BLE      |L1.338|
000150  2605              MOVS     r6,#5                 ;101
                  |L1.338|
000152  4840              LDR      r0,|L1.596|
000154  4631              MOV      r1,r6                 ;102
000156  1cc0              ADDS     r0,r0,#3              ;102
000158  f7fffffe          BL       TFT_Write_Rectangle_Pixel
00015c  e01a              B        |L1.404|
                  |L1.350|
00015e  1b3e              SUBS     r6,r7,r4              ;104
000160  2e05              CMP      r6,#5                 ;104
000162  dd00              BLE      |L1.358|
000164  2605              MOVS     r6,#5                 ;104
                  |L1.358|
000166  4631              MOV      r1,r6                 ;105
000168  483a              LDR      r0,|L1.596|
00016a  f7fffffe          BL       TFT_Write_Rectangle_Pixel
00016e  e011              B        |L1.404|
                  |L1.368|
000170  1b3e              SUBS     r6,r7,r4              ;107
000172  2e04              CMP      r6,#4                 ;107
000174  dd00              BLE      |L1.376|
000176  2604              MOVS     r6,#4                 ;107
                  |L1.376|
000178  4836              LDR      r0,|L1.596|
00017a  4631              MOV      r1,r6                 ;108
00017c  1cc0              ADDS     r0,r0,#3              ;108
00017e  f7fffffe          BL       TFT_Write_Rectangle_Pixel
000182  e007              B        |L1.404|
                  |L1.388|
;;;110    					num_pixels = MIN(4,glyph_width - x_bm);
000184  1b3e              SUBS     r6,r7,r4
000186  2e04              CMP      r6,#4
000188  dd00              BLE      |L1.396|
00018a  2604              MOVS     r6,#4
                  |L1.396|
;;;111    					TFT_Write_Rectangle_Pixel(&fg, num_pixels);
00018c  4631              MOV      r1,r6
00018e  4831              LDR      r0,|L1.596|
000190  f7fffffe          BL       TFT_Write_Rectangle_Pixel
                  |L1.404|
;;;112    				}
;;;113    				if (num_pixels > 0) {
000194  2e00              CMP      r6,#0
000196  d015              BEQ      |L1.452|
;;;114    					x_bm += num_pixels;	
000198  19a0              ADDS     r0,r4,r6
00019a  b2c4              UXTB     r4,r0
;;;115    					col += num_pixels;
00019c  9600              STR      r6,[sp,#0]
;;;116    					bitmap_byte >>= num_pixels;
00019e  40f5              LSRS     r5,r5,r6
0001a0  e010              B        |L1.452|
                  |L1.418|
;;;117    				}
;;;118    				for (; col < 8; col++) {
;;;119    					if (bitmap_byte & 0x01) // if pixel is to be set
0001a2  07e8              LSLS     r0,r5,#31
0001a4  d001              BEQ      |L1.426|
;;;120    						pixel_color = &fg;
0001a6  482b              LDR      r0,|L1.596|
0001a8  e001              B        |L1.430|
                  |L1.426|
;;;121    					else
;;;122    						pixel_color = &bg;
0001aa  482a              LDR      r0,|L1.596|
0001ac  1cc0              ADDS     r0,r0,#3
                  |L1.430|
;;;123    					TFT_Write_Rectangle_Pixel(pixel_color, 1);
0001ae  2101              MOVS     r1,#1
0001b0  f7fffffe          BL       TFT_Write_Rectangle_Pixel
;;;124    					bitmap_byte >>= 1;
0001b4  086d              LSRS     r5,r5,#1
;;;125    					x_bm++;
0001b6  1c64              ADDS     r4,r4,#1
0001b8  b2e4              UXTB     r4,r4
;;;126    					if (x_bm >= glyph_width)
0001ba  42bc              CMP      r4,r7
0001bc  d205              BCS      |L1.458|
0001be  9800              LDR      r0,[sp,#0]            ;118
0001c0  1c40              ADDS     r0,r0,#1              ;118
0001c2  9000              STR      r0,[sp,#0]            ;118
                  |L1.452|
0001c4  9800              LDR      r0,[sp,#0]            ;118
0001c6  2808              CMP      r0,#8                 ;118
0001c8  d3eb              BCC      |L1.418|
                  |L1.458|
;;;127    						break;
;;;128    				}
;;;129    			}
;;;130    			glyph_data++;
0001ca  9804              LDR      r0,[sp,#0x10]
0001cc  1c40              ADDS     r0,r0,#1
0001ce  9004              STR      r0,[sp,#0x10]
;;;131    		} while (x_bm < glyph_width);
0001d0  42bc              CMP      r4,r7
0001d2  d200              BCS      |L1.470|
0001d4  e761              B        |L1.154|
                  |L1.470|
;;;132    		if (x_bm < CHAR_WIDTH) {
0001d6  481f              LDR      r0,|L1.596|
0001d8  1e80              SUBS     r0,r0,#2
0001da  7800              LDRB     r0,[r0,#0]  ; G_TFT_char_width
0001dc  4284              CMP      r4,r0
0001de  d204              BCS      |L1.490|
;;;133    			// fill in rest of cell with background color for narrow glyphs
;;;134    			TFT_Write_Rectangle_Pixel(&bg, CHAR_WIDTH - x_bm);	
0001e0  1b01              SUBS     r1,r0,r4
0001e2  481c              LDR      r0,|L1.596|
0001e4  1cc0              ADDS     r0,r0,#3
0001e6  f7fffffe          BL       TFT_Write_Rectangle_Pixel
                  |L1.490|
0001ea  9801              LDR      r0,[sp,#4]            ;73
0001ec  1c40              ADDS     r0,r0,#1              ;73
0001ee  9001              STR      r0,[sp,#4]            ;73
                  |L1.496|
0001f0  4918              LDR      r1,|L1.596|
0001f2  9801              LDR      r0,[sp,#4]            ;73
0001f4  1e89              SUBS     r1,r1,#2              ;73
0001f6  7849              LDRB     r1,[r1,#1]            ;73  ; G_TFT_char_height
0001f8  4288              CMP      r0,r1                 ;73
0001fa  d200              BCS      |L1.510|
0001fc  e74c              B        |L1.152|
                  |L1.510|
;;;135    		}
;;;136    	}
;;;137    }
0001fe  b005              ADD      sp,sp,#0x14
000200  bdf0              POP      {r4-r7,pc}
;;;138    
                          ENDP

                  TFT_Text_PrintStr PROC
;;;139    void TFT_Text_PrintStr(PT_T * pos, char * str) {
000202  b570              PUSH     {r4-r6,lr}
000204  4605              MOV      r5,r0
000206  460c              MOV      r4,r1
;;;140    	while (*str) {
;;;141    		TFT_Text_PrintChar(pos, *str);
;;;142    		str++;
;;;143    		pos->X += CHAR_WIDTH; // forces monospacing for fonts
000208  4e12              LDR      r6,|L1.596|
00020a  1eb6              SUBS     r6,r6,#2
00020c  e007              B        |L1.542|
                  |L1.526|
00020e  4628              MOV      r0,r5                 ;141
000210  f7fffffe          BL       TFT_Text_PrintChar
000214  1c64              ADDS     r4,r4,#1              ;142
000216  7831              LDRB     r1,[r6,#0]  ; G_TFT_char_width
000218  6828              LDR      r0,[r5,#0]
00021a  1840              ADDS     r0,r0,r1
00021c  6028              STR      r0,[r5,#0]
                  |L1.542|
00021e  7821              LDRB     r1,[r4,#0]            ;140
000220  2900              CMP      r1,#0                 ;140
000222  d1f4              BNE      |L1.526|
;;;144    	}
;;;145    }
000224  bd70              POP      {r4-r6,pc}
;;;146    
                          ENDP

                  TFT_Text_PrintStr_RC PROC
;;;147    void TFT_Text_PrintStr_RC( uint8_t  row, uint8_t  col, char  *str )
000226  b57c              PUSH     {r2-r6,lr}
;;;148    {
000228  4614              MOV      r4,r2
;;;149    	PT_T pos;
;;;150    	pos.X = COL_TO_X( col );
00022a  4d0a              LDR      r5,|L1.596|
00022c  1ead              SUBS     r5,r5,#2
00022e  782a              LDRB     r2,[r5,#0]  ; G_TFT_char_width
000230  4351              MULS     r1,r2,r1
000232  9100              STR      r1,[sp,#0]
;;;151    	pos.Y = ROW_TO_Y( row );
000234  7869              LDRB     r1,[r5,#1]  ; G_TFT_char_height
000236  4348              MULS     r0,r1,r0
000238  9001              STR      r0,[sp,#4]
00023a  e007              B        |L1.588|
                  |L1.572|
;;;152    	while( *str )
;;;153    	{
;;;154    		TFT_Text_PrintChar( &pos, *str );
00023c  4668              MOV      r0,sp
00023e  f7fffffe          BL       TFT_Text_PrintChar
;;;155    		str++;
000242  1c64              ADDS     r4,r4,#1
;;;156    		pos.X += CHAR_WIDTH;       /*     forces monospacing for fonts               */
000244  7829              LDRB     r1,[r5,#0]  ; G_TFT_char_width
000246  9800              LDR      r0,[sp,#0]
000248  1840              ADDS     r0,r0,r1
00024a  9000              STR      r0,[sp,#0]
                  |L1.588|
00024c  7821              LDRB     r1,[r4,#0]            ;152
00024e  2900              CMP      r1,#0                 ;152
000250  d1f4              BNE      |L1.572|
;;;157    	}
;;;158    }
000252  bd7c              POP      {r2-r6,pc}
                          ENDP

                  |L1.596|
                          DCD      ||area_number.7||+0x2
                  |L1.600|
                          DCD      Lucida_Console12x19

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  char_widths
000000  080c14            DCB      0x08,0x0c,0x14

                          AREA ||area_number.5||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.5||, ||.constdata||
                  char_heights
000000  0d131f            DCB      0x0d,0x13,0x1f

                          AREA ||.data||, DATA, ALIGN=2

                  fonts
                          DCD      Lucida_Console8x13
                          DCD      Lucida_Console12x19

                          AREA ||area_number.7||, DATA, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.data||
                  G_TFT_char_width
000000  00                DCB      0x00
                  G_TFT_char_height
000001  00                DCB      0x00
                  ||fg||
000002  0000              DCB      0x00,0x00
000004  00                DCB      0x00
                  ||bg||
000005  000000            DCB      0x00,0x00,0x00
                  font
                          DCD      0x00000000
                  font_header
                          DCD      0x00000000
                  glyph_index
                          DCD      0x00000000
