; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\profile.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\profile.d --cpu=Cortex-M0+ --fpmode=fast --apcs=interwork -O1 -I.\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Freescale\Kinetis -D__RTX -D__MICROLIB -DMKL25Z128xxx4 --omf_browse=.\obj\profile.crf src\profile.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  Init_Profiling PROC
;;;15     
;;;16     void Init_Profiling(void) {
000000  b510              PUSH     {r4,lr}
;;;17     	unsigned i;
;;;18     	
;;;19     	// Clear region counts
;;;20       for (i=0; i<NumProfileRegions; i++) {
000002  2000              MOVS     r0,#0
000004  2100              MOVS     r1,#0
;;;21     	  RegionCount[i]=0;
000006  4a42              LDR      r2,|L1.272|
000008  4b42              LDR      r3,|L1.276|
00000a  e002              B        |L1.18|
                  |L1.12|
00000c  0084              LSLS     r4,r0,#2
00000e  5111              STR      r1,[r2,r4]
000010  1c40              ADDS     r0,r0,#1              ;20
                  |L1.18|
000012  681c              LDR      r4,[r3,#0]            ;20  ; NumProfileRegions
000014  42a0              CMP      r0,r4                 ;20
000016  d3f9              BCC      |L1.12|
;;;22       }
;;;23     	
;;;24     	// Initialize and start timer
;;;25     	PIT_Init(2399); // 24 MHz/(23999+1) = 1000 samples per second
000018  483f              LDR      r0,|L1.280|
00001a  f7fffffe          BL       PIT_Init
;;;26     	PIT_Start();
00001e  f7fffffe          BL       PIT_Start
;;;27     }
000022  bd10              POP      {r4,pc}
;;;28     
                          ENDP

                  Disable_Profiling PROC
;;;29     void Disable_Profiling(void) {
000024  483d              LDR      r0,|L1.284|
;;;30       profiling_enabled--;
000026  7801              LDRB     r1,[r0,#0]  ; profiling_enabled
000028  1e49              SUBS     r1,r1,#1
00002a  7001              STRB     r1,[r0,#0]
;;;31     }
00002c  4770              BX       lr
;;;32     
                          ENDP

                  Enable_Profiling PROC
;;;33     void Enable_Profiling(void) {
00002e  483b              LDR      r0,|L1.284|
;;;34       profiling_enabled++;
000030  7801              LDRB     r1,[r0,#0]  ; profiling_enabled
000032  1c49              ADDS     r1,r1,#1
000034  7001              STRB     r1,[r0,#0]
;;;35     }
000036  4770              BX       lr
;;;36     
                          ENDP

                  Sort_Profile_Regions PROC
;;;37     void Sort_Profile_Regions(void){
000038  b5f0              PUSH     {r4-r7,lr}
;;;38     	unsigned i, j, t, iMax;
;;;39     	
;;;40     	// Initialize indices
;;;41       for (i=0; i<NumProfileRegions; i++) {
00003a  2000              MOVS     r0,#0
;;;42     	  SortedRegions[i]=i;
00003c  4d38              LDR      r5,|L1.288|
00003e  4a35              LDR      r2,|L1.276|
000040  e002              B        |L1.72|
                  |L1.66|
000042  0081              LSLS     r1,r0,#2
000044  5068              STR      r0,[r5,r1]
000046  1c40              ADDS     r0,r0,#1              ;41
                  |L1.72|
000048  6811              LDR      r1,[r2,#0]            ;41  ; NumProfileRegions
00004a  4288              CMP      r0,r1                 ;41
00004c  d3f9              BCC      |L1.66|
;;;43       }
;;;44     	
;;;45     	// Sort indices with selection sort from Wikipedia
;;;46      
;;;47     	/* advance the position through the entire array */
;;;48     	/*   (could do j < n-1 because single element is also max element) */
;;;49     	for (j = 0; j < NumProfileRegions-1; j++) {
00004e  2100              MOVS     r1,#0
000050  4830              LDR      r0,|L1.276|
000052  6800              LDR      r0,[r0,#0]            ;41
000054  1e40              SUBS     r0,r0,#1
000056  4686              MOV      lr,r0
000058  e01e              B        |L1.152|
                  |L1.90|
;;;50         /* find the min element in the unsorted a[j .. n-1] */
;;;51      
;;;52         /* assume the max is the first element */
;;;53         iMax = SortedRegions[j];
00005a  0088              LSLS     r0,r1,#2
00005c  582a              LDR      r2,[r5,r0]
00005e  4684              MOV      r12,r0
000060  4617              MOV      r7,r2
;;;54         /* test against elements after j to find the smallest */
;;;55         for ( i = j+1; i < NumProfileRegions; i++) {
000062  1c48              ADDS     r0,r1,#1
;;;56             /* if this element is more, then it is the new maximum */  
;;;57             if (RegionCount[SortedRegions[i]] > RegionCount[SortedRegions[iMax]]) {
000064  4e2a              LDR      r6,|L1.272|
000066  e00b              B        |L1.128|
                  |L1.104|
000068  0083              LSLS     r3,r0,#2
00006a  58eb              LDR      r3,[r5,r3]
00006c  009b              LSLS     r3,r3,#2
00006e  58f3              LDR      r3,[r6,r3]
000070  0094              LSLS     r4,r2,#2
000072  592c              LDR      r4,[r5,r4]
000074  00a4              LSLS     r4,r4,#2
000076  5934              LDR      r4,[r6,r4]
000078  42a3              CMP      r3,r4
00007a  d900              BLS      |L1.126|
;;;58                 /* found new max; remember its index */
;;;59                 iMax = i;
00007c  4602              MOV      r2,r0
                  |L1.126|
00007e  1c40              ADDS     r0,r0,#1              ;55
                  |L1.128|
000080  4b24              LDR      r3,|L1.276|
000082  681b              LDR      r3,[r3,#0]            ;55  ; NumProfileRegions
000084  4298              CMP      r0,r3                 ;55
000086  d3ef              BCC      |L1.104|
;;;60             }
;;;61         }
;;;62      
;;;63         /* iMax is the index of the maximum element. Swap it with the current position */
;;;64         if ( iMax != j ) {
000088  428a              CMP      r2,r1
00008a  d004              BEQ      |L1.150|
;;;65     				t = SortedRegions[j];
;;;66     				SortedRegions[j] = SortedRegions[iMax]; 
00008c  0090              LSLS     r0,r2,#2
00008e  582a              LDR      r2,[r5,r0]
000090  4663              MOV      r3,r12
000092  50ea              STR      r2,[r5,r3]
;;;67     				SortedRegions[iMax] = t;
000094  502f              STR      r7,[r5,r0]
                  |L1.150|
000096  1c49              ADDS     r1,r1,#1              ;49
                  |L1.152|
000098  4571              CMP      r1,lr                 ;49
00009a  d3de              BCC      |L1.90|
;;;68         }
;;;69     	}
;;;70     }
00009c  bdf0              POP      {r4-r7,pc}
;;;71     
                          ENDP

                  Display_Profile PROC
;;;72     void Display_Profile(void) {
00009e  b5f0              PUSH     {r4-r7,lr}
0000a0  b08b              SUB      sp,sp,#0x2c
;;;73     	PT_T p;
;;;74     	unsigned i, row;
;;;75     	char buffer[32];
;;;76     	
;;;77     	row = 0;
0000a2  2400              MOVS     r4,#0
;;;78     	p.Y = ROW_TO_Y(row);
0000a4  2000              MOVS     r0,#0
0000a6  900a              STR      r0,[sp,#0x28]
;;;79     	for (i=0; i<NumProfileRegions; i++) {
0000a8  2500              MOVS     r5,#0
;;;80     		if (RegionCount[i] > 0) {
0000aa  4f19              LDR      r7,|L1.272|
0000ac  e02a              B        |L1.260|
                  |L1.174|
0000ae  00ae              LSLS     r6,r5,#2
0000b0  59b8              LDR      r0,[r7,r6]
0000b2  2800              CMP      r0,#0
0000b4  d025              BEQ      |L1.258|
;;;81     			p.X = COL_TO_X(0);
0000b6  2000              MOVS     r0,#0
0000b8  9009              STR      r0,[sp,#0x24]
;;;82     			p.Y = ROW_TO_Y(row);
0000ba  481a              LDR      r0,|L1.292|
0000bc  7800              LDRB     r0,[r0,#0]  ; G_TFT_char_height
0000be  4360              MULS     r0,r4,r0
0000c0  900a              STR      r0,[sp,#0x28]
;;;83     			snprintf(buffer, TFT_MAX_COLS, "%4d %s", RegionCount[i], RegionTable[i].Name);
0000c2  4819              LDR      r0,|L1.296|
0000c4  7801              LDRB     r1,[r0,#0]  ; G_TFT_char_width
0000c6  20f0              MOVS     r0,#0xf0
0000c8  f7fffffe          BL       __aeabi_uidivmod
0000cc  4601              MOV      r1,r0
0000ce  4a17              LDR      r2,|L1.300|
0000d0  0168              LSLS     r0,r5,#5
0000d2  1880              ADDS     r0,r0,r2
0000d4  3008              ADDS     r0,r0,#8
0000d6  9000              STR      r0,[sp,#0]
0000d8  59bb              LDR      r3,[r7,r6]
0000da  a215              ADR      r2,|L1.304|
0000dc  a801              ADD      r0,sp,#4
0000de  f7fffffe          BL       __2snprintf
;;;84     			TFT_Text_PrintStr(&p, buffer);
0000e2  a901              ADD      r1,sp,#4
0000e4  a809              ADD      r0,sp,#0x24
0000e6  f7fffffe          BL       TFT_Text_PrintStr
;;;85     			row++;
0000ea  1c64              ADDS     r4,r4,#1
;;;86     			if (row >= TFT_MAX_ROWS) {
0000ec  480d              LDR      r0,|L1.292|
0000ee  7801              LDRB     r1,[r0,#0]  ; G_TFT_char_height
0000f0  20ff              MOVS     r0,#0xff
0000f2  3041              ADDS     r0,r0,#0x41
0000f4  f7fffffe          BL       __aeabi_uidivmod
0000f8  42a0              CMP      r0,r4
0000fa  d802              BHI      |L1.258|
;;;87     				row = 0;
0000fc  2400              MOVS     r4,#0
;;;88     				TFT_Erase();
0000fe  f7fffffe          BL       TFT_Erase
                  |L1.258|
000102  1c6d              ADDS     r5,r5,#1              ;79
                  |L1.260|
000104  4803              LDR      r0,|L1.276|
000106  6800              LDR      r0,[r0,#0]            ;79  ; NumProfileRegions
000108  4285              CMP      r5,r0                 ;79
00010a  d3d0              BCC      |L1.174|
;;;89     			}
;;;90     		}
;;;91     	}
;;;92     }
00010c  b00b              ADD      sp,sp,#0x2c
00010e  bdf0              POP      {r4-r7,pc}
;;;93     
                          ENDP

                  |L1.272|
                          DCD      RegionCount
                  |L1.276|
                          DCD      NumProfileRegions
                  |L1.280|
                          DCD      0x0000095f
                  |L1.284|
                          DCD      ||area_number.7||
                  |L1.288|
                          DCD      SortedRegions
                  |L1.292|
                          DCD      G_TFT_char_height
                  |L1.296|
                          DCD      G_TFT_char_width
                  |L1.300|
                          DCD      RegionTable
                  |L1.304|
000130  25346420          DCB      "%4d %s",0
000134  257300  
000137  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=2

                  adx_lost
                          DCD      0x00000000

                          AREA ||area_number.5||, DATA, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.data||
                  num_lost
                          DCD      0x00000000

                          AREA ||area_number.6||, DATA, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.data||
                  profile_ticks
                          DCD      0x00000000

                          AREA ||area_number.7||, DATA, ALIGN=0

                          EXPORTAS ||area_number.7||, ||.data||
                  profiling_enabled
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "src\\profile.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_profile_c_adx_lost____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_profile_c_adx_lost____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_profile_c_adx_lost____REVSH|
#line 144
|__asm___9_profile_c_adx_lost____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
