L 1 "src\TFT_graphics.c"
N#include "TFT_LCD.h"
L 1 ".\inc\TFT_LCD.h" 1
N#ifndef TFT_LCD_H
N#define TFT_LCD_H
N
N#include <stdint.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision: 185525 $
N * Checkin $Date: 2014-05-29 12:44:48 +0100 (Thu, 29 May 2014) $
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5050106
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX INT64_MAX
N#else
N#define UINTPTR_MAX INT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 5 ".\inc\TFT_LCD.h" 2
N
N#define TFT_WIDTH (240)
N#define TFT_HEIGHT (320)
N
N// TFT LCD Hardware Interface
N// signals -- all on port C
N#define TFT_DB8_POS (3)
N#define TFT_DB15_POS (10)
N#define TFT_D_NC_POS (12)
N#define TFT_NWR_POS (13)
N#define TFT_NRD_POS (16)
N#define TFT_NRST_POS (17)
N#define TFT_DATA_MASK (((unsigned )0x0ff) << TFT_DB8_POS)
N
N// Backlight
N#define TFT_BL_TPM (TPM1)
N#define TFT_BL_TPM_CHANNEL (0)
N#define TFT_BL_TPM_FREQ (200)
N#define TFT_BL_PERIOD ((SystemCoreClock)/(2*(TFT_BL_TPM_FREQ)))
N
N// Touchscreen Hardware Interface
N#define TFT_TS_YD_CHANNEL (0)
N#define TFT_TS_YU_CHANNEL (3)
N#define TFT_TS_XL_CHANNEL (4) 
N#define TFT_TS_XR_CHANNEL (7)
N
N#define TFT_TS_YD_BIT (20)
N#define TFT_TS_XL_BIT (21)
N#define TFT_TS_YU_BIT (22)
N#define TFT_TS_XR_BIT (23)
N
N// Touchscreen Configuration
N#define TS_DELAY (1)
N#define TS_CALIB_SAMPLES (10)
N
N/**************************************************************/
N#define	GPIO_ResetBit(pos)	(FPTC->PCOR = MASK(pos))
N#define	GPIO_SetBit(pos) 		(FPTC->PSOR = MASK(pos))
N#define GPIO_Write(cmd) 		FPTC->PDOR &= ~TFT_DATA_MASK; \
N														FPTC->PDOR |= (cmd & 0xff) << TFT_DB8_POS;
X#define GPIO_Write(cmd) 		FPTC->PDOR &= ~TFT_DATA_MASK; 														FPTC->PDOR |= (cmd & 0xff) << TFT_DB8_POS;
N/**************************************************************/
N
N#define MIN(a,b) ((a)<(b)? a : b)
N#define MAX(a,b) ((a)>(b)? a : b)
N
Ntypedef struct {
N	uint16_t X, Y;
N} PT_T;
N
Ntypedef struct {
N	uint8_t R, G, B; // note: using 5-6-5 color mode for LCD. 
N									 // Values are left aligned here
N} COLOR_T;
N
N
N void TFT_Init(void);
N void TFT_Fill_Buffer(COLOR_T * color);
N void TFT_Fill_Rectangle(PT_T * p1, PT_T * p2, COLOR_T * color);
N uint32_t TFT_Start_Rectangle(PT_T * p1, PT_T * p2);
N void TFT_Write_Rectangle_Pixel(COLOR_T * color, unsigned int count);
N
N
N void TFT_Plot_Pixel(PT_T * pos, COLOR_T * color);
N void TFT_Set_BL(uint8_t on);
N void TFT_Set_Brightness(uint8_t brightness);
N void TFT_Set_Backlight_Brightness(uint16_t brightness_percent);
N void TFT_Set_Colors(COLOR_T * foreground, COLOR_T * background);
N
N void TFT_Erase(void);
N void TFT_Text_Init(uint8_t font_num);
N void TFT_Text_PrintChar(PT_T * pos, char ch);
N void TFT_Text_PrintStr(PT_T * pos, char * str);
N void TFT_Text_PrintStr_RC( uint8_t  row, uint8_t col, char *  str);
N
N void Graphics_Test(void);
N void TFT_Draw_Line(PT_T * p1, PT_T * p2, COLOR_T * color);
N
N
N void TFT_TS_Init(void);
N uint32_t TFT_TS_Read(PT_T * position);
N void TFT_TS_Test(void);
N void TFT_TS_Calibrate(void);
N
N extern uint8_t G_TFT_char_width, G_TFT_char_height;
N
N
N#endif
L 2 "src\TFT_graphics.c" 2
N
N#define STEP 8
N
Nvoid Graphics_Test(void) {
N	int x, y;
N	PT_T p1, p2;
N	COLOR_T c;
N	
N	p1.X = TFT_WIDTH/2;
X	p1.X = (240)/2;
N	p1.Y = TFT_HEIGHT/2;
X	p1.Y = (320)/2;
N
N	c.R = 100;
N	c.G = 100;
N	c.B = 255;
N	p2.Y = 0;
N	for (x=0; x<TFT_WIDTH; x += STEP) {
X	for (x=0; x<(240); x += 8) {
N		p2.X = x;
N		TFT_Draw_Line(&p1, &p2, &c);
N	}
N
N	c.G = 100;
N	c.B = 100;
N	c.R = 255;
N	p2.X = TFT_WIDTH-1;
X	p2.X = (240)-1;
N	for (y=0; y<TFT_HEIGHT; y += STEP) {
X	for (y=0; y<(320); y += 8) {
N		p2.Y = y;
N		TFT_Draw_Line(&p1, &p2, &c);
N	}
N
N	c.R = 100;
N	c.B = 100;
N	c.G = 255;
N	p2.Y = TFT_HEIGHT-1;
X	p2.Y = (320)-1;
N	for (x=0; x<TFT_WIDTH; x += STEP) {
X	for (x=0; x<(240); x += 8) {
N		p2.X = x;
N		TFT_Draw_Line(&p1, &p2, &c);
N	}
N
N	c.R = 200;
N	c.B = 100;
N	c.G = 255;
N	p2.X = 0;
N	for (y=0; y<TFT_HEIGHT; y += STEP) {
X	for (y=0; y<(320); y += 8) {
N		p2.Y = y;
N		TFT_Draw_Line(&p1, &p2, &c);
N	}
N}
N
Nvoid TFT_Draw_Line(PT_T * p1, PT_T * p2, COLOR_T * color)
N{
N	PT_T p;
N  int Temp, AdjUp, AdjDown, ErrorTerm, XAdvance, XDelta, YDelta;	 
N  int WholeStep, InitialPixelCount, FinalPixelCount, i,j, RunLength;
N  int XStart;
N  int YStart;
N  int XEnd;
N  int YEnd;
N
N  XStart = p1->X;
N  YStart = p1->Y;
N  XEnd = p2->X;
N  YEnd = p2->Y;
N
N  /* We'll always draw top to bottom, to reduce the number of cases we have to
N     ** handle, and to make lines between the same endpoints draw the same pixels
N  */
N  if (YStart > YEnd)	
N    {
N      Temp = YStart;
N      YStart = YEnd;
N      YEnd = Temp;
N      Temp = XStart;
N      XStart = XEnd;
N      XEnd = Temp;
N    }
N
N  /* Figure out whethere we're going left or right, and how far we're going
N  ** horizontally  */
N  XDelta = XEnd - XStart;
N  if (XDelta < 0) {
N      XAdvance = -1;
N      XDelta = -XDelta;
N	} else {
N      XAdvance = 1;
N   }
N
N  /* Figure out how far we're going vertically */
N  YDelta = YEnd - YStart;
N
N  /* Special-case horizontal, vertical, and diagonal lines, for speed and
N  ** to avoid nasty boundary conditions and division by 0
N  */
N
N	p.X = XStart;
N	p.Y = YStart;
N	 
N  /* Vertical Line case */
N  if (XDelta == 0) {
N    /* Vertical line */
N    for (i = 0; i <= YDelta; i++) {
N				p.Y++;
N				TFT_Plot_Pixel(&p, color);
N     }
N    return;
N  }
N  
N  /* Horizontal Line Case */
N  if (YDelta == 0) {
N    /* Horizontal line */
N    for (i = 0; i <= XDelta; i++) {
N				TFT_Plot_Pixel(&p, color);
N				p.X += XAdvance;
N    }  
N    return;
N  }
N   
N  /* Diagonal Case */
N  if (XDelta == YDelta) {
N    /* Diagonal line */
N    for (i = 0; i <= XDelta; i++)
N      {
N				TFT_Plot_Pixel(&p, color);
N				p.X += XAdvance;
N				p.Y++;
N      }
N    return;
N  }
N   
N   
N  /* Determine whether the line is X or Y major, and handle accordingly */
N  if (XDelta >= YDelta) {
N    /* X major line */
N    /* Minimum # of pixels in a run in this line */
N    WholeStep = XDelta / YDelta;													/* DIV */
N    
N    /* Error term adjust eacn time Y steps by 1; used to tel when one
N    ** extra pixel should be drawn as part of a run, to account for
N    ** fractional steps along the X axis per 1-pixel steps along Y
N    */
N    AdjUp = (XDelta % YDelta) * 2;													/* DIV */
N    
N    /* Error term adjust when the error term turns over, used to factor
N    ** out the X step made at that time
N    */
N    AdjDown = YDelta * 2;
N    
N    /* Initial error term; reflects an initial step of 0.5 along the Y axis 
N     */
N    ErrorTerm = (XDelta % YDelta) - (YDelta * 2);											/* DIV */
N    
N    /* The initial and last runs are partial, because Y advancse only 0.5
N    ** for these runs, rather than 1.  Divide one full run, plus the
N    ** initial pixel, between the initial and last runs.
N    */
N    InitialPixelCount = (WholeStep / 2) + 1;
N    FinalPixelCount = InitialPixelCount;
N    
N    /* If the basic run length is even and there's no fractional
N    ** advance, we have one pixel that could go to either the initial
N    ** or last partial run, which we'll arbitrarily allocate to the
N    ** last run
N    */
N    if ((AdjUp == 0) && ((WholeStep & 0x01) == 0))
N      InitialPixelCount--;
N    
N    /* If there's an odd number of pixels per run, we have 1 pixel that can't
N       ** be allocated to either the initial run or last partial run, so we'll add 0.5
N       ** to error term so this pixel will be handled by the normal full-run loop
N    */
N    if ((WholeStep & 0x01) != 0)
N      ErrorTerm += YDelta;
N    
N    /* Draw the first, partial run of pixels */
N#ifdef USE_DRAW_LINE_FUNC
S    Line_DrawHorizontalRun(pThis, &XStart, &YStart, XAdvance, 
S			   InitialPixelCount, pThis->PenColor);
N#else
N    for (j = 0; j < InitialPixelCount; j++)
N      {
N				TFT_Plot_Pixel(&p, color);
N				p.X += XAdvance;
N      }
N    p.Y++;
N#endif
N    
N    /* Draw all full runs */
N    for (i = 0; i < (YDelta - 1); i++)
N      {
N				RunLength = WholeStep; /* run is at least this long */
N				/* Advance the error term and add an extra pixel if the error
N				** term so indicates
N				*/
N				if ((ErrorTerm += AdjUp) > 0)
N					{
N						RunLength++;
N						ErrorTerm -= AdjDown; /* reset the error term */
N					}
N	
N				/* Draw this scan line's run */
N#ifdef USE_DRAW_LINE_FUNC
S				Line_DrawHorizontalRun(pThis, &XStart, &YStart, XAdvance, RunLength, 
S			       pThis->PenColor);
N#else
N				for (j = 0; j < RunLength; j++) {
N					TFT_Plot_Pixel(&p, color);
N					p.X += XAdvance;
N				}
N				p.Y++;
N#endif
N				}
N    
N    /* Draw the final run of pixels */
N#ifdef USE_DRAW_LINE_FUNC
S    Line_DrawHorizontalRun(pThis, &XStart, &YStart, XAdvance, 
S			   FinalPixelCount, pThis->PenColor);
N#else
N    for (j = 0; j < FinalPixelCount; j++)
N      {
N				TFT_Plot_Pixel(&p, color);
N				p.X += XAdvance;
N      }
N    p.Y++;
N#endif
N    
N    return;
N  } else {
N    /* Y major line */
N    
N    /* Minimum # of pixels in a run in this line */
N    WholeStep = YDelta / XDelta;										/* DIV */
N    
N    /* Error term adjust each time X steps by 1; used to tell when 1 extra
N    ** pixel should be drawn as part of a run, to account for
N    ** fractional steps along the Y axis per 1-pixel steps along X
N    */
N    AdjUp = (YDelta % XDelta) * 2;										/* DIV */
N    
N    /* Error term adjust when the error term turns over, used to factor
N    ** out the Y step made at that time
N    */
N    AdjDown = XDelta * 2;
N    
N    /* Initial error term; reflects initial step of 0.5 along the X axis */
N    ErrorTerm = (YDelta % XDelta) - (XDelta * 2);								/* DIV */
N    
N    /* The initial and last runs are partial, because X advances only 0.5
N    ** for these runs, rather than 1.  Divide ony full run, plus the
N    ** initial pixel, between the initial and last runs
N    */
N    
N    InitialPixelCount = (WholeStep / 2) + 1;
N    FinalPixelCount = InitialPixelCount;
N    
N    /* If the basic run length is even and there's no fractional
N      ** advance, we have one pixel that could go to either the initial
N      ** or last partial run, which we'll arbitrarily allocate to the
N      ** last run
N      */
N      if ((AdjUp == 0) && ((WholeStep & 0x01) == 0))
N	{
N	  InitialPixelCount--;
N	}
N      
N      /* If there's an odd number of pixels per run, we have 1 pixel that 
N	 can't
N	 ** be allocated to either the initial run or last partial run, so we'll 
N	 add 0.5
N	 ** to error term so this pixel will be handled by the normal full-run 
N	 loop
N      */
N      if ((WholeStep & 0x01) != 0)
N	{
N	  ErrorTerm += XDelta;
N	}
N      
N      /* Draw the first, partial run of pixels */
N#ifdef USE_DRAW_LINE_FUNC
S      Line_DrawVerticalRun(pThis, &XStart, &YStart, XAdvance, 
S			   InitialPixelCount, pThis->PenColor);
N#else
N      for (j = 0; j < InitialPixelCount; j++) {
N				TFT_Plot_Pixel(&p, color);
N				p.Y++;
N			}
N      /* Update x,y position */
N      p.X += XAdvance;
N#endif
N      
N      /* Draw all full runs */
N      for (i = 0; i < (XDelta - 1); i++) {
N				RunLength = WholeStep; /* run is at least this long */
N	  
N				/* Advance the error term and add an extra pixel if the error
N				** term so indicates
N				*/
N	  if ((ErrorTerm += AdjUp) > 0)
N	    {
N	      RunLength++;
N	      ErrorTerm -= AdjDown; /* reset the error term */
N	    }
N	  
N	  /* Draw this scan line's run */
N#ifdef USE_DRAW_LINE_FUNC
S	  Line_DrawVerticalRun(pThis, &XStart, &YStart, XAdvance, RunLength, 
S			       pThis->PenColor);
N#else
N	  for (j = 0; j < RunLength; j++)
N	    {
N				TFT_Plot_Pixel(&p, color);
N	      p.Y++;
N	    }
N	  /* Update x,y position */
N	  p.X += XAdvance;
N#endif
N	  
N	}
N      
N      /* Draw the final run of pixels */
N#ifdef USE_DRAW_LINE_FUNC
S      Line_DrawVerticalRun(pThis, &XStart, &YStart, XAdvance, 
S			   FinalPixelCount, pThis->PenColor);
N#else
N      for (j= 0; j < FinalPixelCount; j++)
N			{
N				TFT_Plot_Pixel(&p, color);
N				p.Y++;
N			}
N      /* Update x,y position */
N      p.X += XAdvance;
N#endif    
N      return;
N    }
N}
