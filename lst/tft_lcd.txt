; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\tft_lcd.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\tft_lcd.d --cpu=Cortex-M0+ --fpmode=fast --apcs=interwork -O1 -I.\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Freescale\Kinetis -D__RTX -D__MICROLIB -DMKL25Z128xxx4 --omf_browse=.\obj\tft_lcd.crf src\TFT_lcd.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  TFT_GPIO_Init PROC
;;;21     /* Initialize GPIO ports for communicating with TFT LCD controller. */
;;;22     void TFT_GPIO_Init(void) {
000000  b5f0              PUSH     {r4-r7,lr}
;;;23     	unsigned i;
;;;24     	
;;;25     	// Enable clock to ports
;;;26     	SIM->SCGC5 |= SIM_SCGC5_PORTC_MASK | SIM_SCGC5_PORTE_MASK;
000002  48f8              LDR      r0,|L1.996|
000004  6b81              LDR      r1,[r0,#0x38]
000006  2205              MOVS     r2,#5
000008  02d2              LSLS     r2,r2,#11
00000a  4311              ORRS     r1,r1,r2
00000c  6381              STR      r1,[r0,#0x38]
;;;27     	
;;;28     	// Make digital pins GPIO
;;;29     	// Data bus pins
;;;30     	for (i=TFT_DB8_POS; i<=TFT_DB15_POS; i++) {
00000e  2003              MOVS     r0,#3
;;;31     		PORTC->PCR[i] &= ~PORT_PCR_MUX_MASK;
000010  4cf5              LDR      r4,|L1.1000|
000012  2507              MOVS     r5,#7
000014  022d              LSLS     r5,r5,#8
;;;32     		PORTC->PCR[i] |= PORT_PCR_MUX(1);
000016  15a6              ASRS     r6,r4,#22
;;;33     		PTC->PDDR |= MASK(i);
000018  4bf4              LDR      r3,|L1.1004|
00001a  2701              MOVS     r7,#1
                  |L1.28|
00001c  0081              LSLS     r1,r0,#2              ;31
00001e  1909              ADDS     r1,r1,r4              ;31
000020  680a              LDR      r2,[r1,#0]            ;31
000022  43aa              BICS     r2,r2,r5              ;31
000024  600a              STR      r2,[r1,#0]            ;31
000026  680a              LDR      r2,[r1,#0]            ;32
000028  4332              ORRS     r2,r2,r6              ;32
00002a  600a              STR      r2,[r1,#0]            ;32
00002c  695a              LDR      r2,[r3,#0x14]
00002e  4639              MOV      r1,r7
000030  4081              LSLS     r1,r1,r0
000032  430a              ORRS     r2,r2,r1
000034  615a              STR      r2,[r3,#0x14]
000036  1c40              ADDS     r0,r0,#1              ;30
000038  280a              CMP      r0,#0xa               ;30
00003a  d9ef              BLS      |L1.28|
;;;34     	}
;;;35     	
;;;36     	// Data/Command
;;;37     	PORTC->PCR[TFT_D_NC_POS] &= ~PORT_PCR_MUX_MASK;
00003c  6b20              LDR      r0,[r4,#0x30]
00003e  43a8              BICS     r0,r0,r5
000040  6320              STR      r0,[r4,#0x30]
;;;38     	PORTC->PCR[TFT_D_NC_POS] |= PORT_PCR_MUX(1);
000042  6b20              LDR      r0,[r4,#0x30]
000044  4330              ORRS     r0,r0,r6
000046  6320              STR      r0,[r4,#0x30]
;;;39     	// /Write
;;;40     	PORTC->PCR[TFT_NWR_POS] &= ~PORT_PCR_MUX_MASK;
000048  6b60              LDR      r0,[r4,#0x34]
00004a  43a8              BICS     r0,r0,r5
00004c  6360              STR      r0,[r4,#0x34]
;;;41     	PORTC->PCR[TFT_NWR_POS] |= PORT_PCR_MUX(1);
00004e  6b60              LDR      r0,[r4,#0x34]
000050  4330              ORRS     r0,r0,r6
000052  6360              STR      r0,[r4,#0x34]
;;;42     	// /Read
;;;43     	PORTC->PCR[TFT_NRD_POS] &= ~PORT_PCR_MUX_MASK;
000054  48e4              LDR      r0,|L1.1000|
000056  3040              ADDS     r0,r0,#0x40
000058  6801              LDR      r1,[r0,#0]
00005a  43a9              BICS     r1,r1,r5
00005c  6001              STR      r1,[r0,#0]
;;;44     	PORTC->PCR[TFT_NRD_POS] |= PORT_PCR_MUX(1);
00005e  6801              LDR      r1,[r0,#0]
000060  4331              ORRS     r1,r1,r6
000062  6001              STR      r1,[r0,#0]
;;;45     	// /Reset
;;;46     	PORTC->PCR[TFT_NRST_POS] &= ~PORT_PCR_MUX_MASK;
000064  6841              LDR      r1,[r0,#4]
000066  43a9              BICS     r1,r1,r5
000068  6041              STR      r1,[r0,#4]
;;;47     	PORTC->PCR[TFT_NRST_POS] |= PORT_PCR_MUX(1);
00006a  6841              LDR      r1,[r0,#4]
00006c  4331              ORRS     r1,r1,r6
00006e  6041              STR      r1,[r0,#4]
;;;48     
;;;49     	// Set port directions to outputs
;;;50     	FPTC->PDDR |= MASK(TFT_D_NC_POS);
000070  48df              LDR      r0,|L1.1008|
000072  6941              LDR      r1,[r0,#0x14]
000074  2301              MOVS     r3,#1
000076  031b              LSLS     r3,r3,#12
000078  4319              ORRS     r1,r1,r3
00007a  6141              STR      r1,[r0,#0x14]
;;;51     	FPTC->PDDR |= MASK(TFT_NWR_POS);
00007c  6941              LDR      r1,[r0,#0x14]
00007e  005c              LSLS     r4,r3,#1
000080  4321              ORRS     r1,r1,r4
000082  6141              STR      r1,[r0,#0x14]
;;;52     	FPTC->PDDR |= MASK(TFT_NRD_POS);
000084  6941              LDR      r1,[r0,#0x14]
000086  011d              LSLS     r5,r3,#4
000088  4329              ORRS     r1,r1,r5
00008a  6141              STR      r1,[r0,#0x14]
;;;53     	FPTC->PDDR |= MASK(TFT_NRST_POS);
00008c  6941              LDR      r1,[r0,#0x14]
00008e  015a              LSLS     r2,r3,#5
000090  4311              ORRS     r1,r1,r2
000092  6141              STR      r1,[r0,#0x14]
;;;54     
;;;55     	// Set initial control line values to inactive (1)
;;;56     	FPTC->PDOR |= MASK(TFT_D_NC_POS);
000094  6801              LDR      r1,[r0,#0]
000096  4319              ORRS     r1,r1,r3
000098  6001              STR      r1,[r0,#0]
;;;57     	FPTC->PDOR |= MASK(TFT_NWR_POS);
00009a  6801              LDR      r1,[r0,#0]
00009c  4321              ORRS     r1,r1,r4
00009e  6001              STR      r1,[r0,#0]
;;;58     	FPTC->PDOR |= MASK(TFT_NRD_POS);
0000a0  6801              LDR      r1,[r0,#0]
0000a2  4329              ORRS     r1,r1,r5
0000a4  6001              STR      r1,[r0,#0]
;;;59     	FPTC->PDOR |= MASK(TFT_NRST_POS);
0000a6  6801              LDR      r1,[r0,#0]
0000a8  4311              ORRS     r1,r1,r2
0000aa  6001              STR      r1,[r0,#0]
;;;60     }
0000ac  bdf0              POP      {r4-r7,pc}
;;;61     
                          ENDP

                  TFT_Init_Backlight PROC
;;;64     /* Initialize hardware for LCD backlight control and set to default value. */
;;;65     void TFT_Init_Backlight(void) {
0000ae  b510              PUSH     {r4,lr}
;;;66     	// Init_PWM(TFT_BL_TPM, TFT_BL_TPM_CHANNEL, 10000 /* TFT_BL_PERIOD*/, 5000 /* TFT_BL_PERIOD/2*/);	
;;;67     	Old_Init_PWM();
0000b0  f7fffffe          BL       Old_Init_PWM
;;;68     	// TFT_Set_Backlight_Brightness(100);
;;;69     }
0000b4  bd10              POP      {r4,pc}
;;;70     
                          ENDP

                  TFT_Set_Backlight_Brightness PROC
;;;71     /* Set backlight brightness for LCD via duty cycle. Function is currently broken. */
;;;72     void TFT_Set_Backlight_Brightness(uint16_t brightness_percent){
0000b6  b510              PUSH     {r4,lr}
0000b8  4604              MOV      r4,r0
;;;73     	PWM_Set_Value(TFT_BL_TPM, TFT_BL_TPM_CHANNEL, (brightness_percent*100)/TFT_BL_PERIOD);
0000ba  48ce              LDR      r0,|L1.1012|
0000bc  21ff              MOVS     r1,#0xff
0000be  3191              ADDS     r1,r1,#0x91
0000c0  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
0000c2  f7fffffe          BL       __aeabi_uidivmod
0000c6  4601              MOV      r1,r0
0000c8  2064              MOVS     r0,#0x64
0000ca  4360              MULS     r0,r4,r0
0000cc  f7fffffe          BL       __aeabi_uidivmod
0000d0  b282              UXTH     r2,r0
0000d2  2100              MOVS     r1,#0
0000d4  48c8              LDR      r0,|L1.1016|
0000d6  f7fffffe          BL       PWM_Set_Value
;;;74     }
0000da  bd10              POP      {r4,pc}
;;;75     
                          ENDP

                  TFT_24S_Write_Command PROC
;;;77     /* Write one byte as a command to the TFT LCD controller. */
;;;78     void TFT_24S_Write_Command(uint8_t command)
0000dc  2201              MOVS     r2,#1
;;;79     {
;;;80     	GPIO_ResetBit(TFT_D_NC_POS);
0000de  49c4              LDR      r1,|L1.1008|
0000e0  0312              LSLS     r2,r2,#12
0000e2  608a              STR      r2,[r1,#8]
;;;81     	GPIO_Write(command);
0000e4  680a              LDR      r2,[r1,#0]
0000e6  23ff              MOVS     r3,#0xff
0000e8  00db              LSLS     r3,r3,#3
0000ea  439a              BICS     r2,r2,r3
0000ec  600a              STR      r2,[r1,#0]
0000ee  680a              LDR      r2,[r1,#0]
0000f0  00c0              LSLS     r0,r0,#3
0000f2  4302              ORRS     r2,r2,r0
0000f4  600a              STR      r2,[r1,#0]
;;;82     	GPIO_ResetBit(TFT_NWR_POS);
0000f6  2001              MOVS     r0,#1
0000f8  0340              LSLS     r0,r0,#13
0000fa  6088              STR      r0,[r1,#8]
;;;83     	GPIO_SetBit(TFT_NWR_POS);
0000fc  6048              STR      r0,[r1,#4]
;;;84     }
0000fe  4770              BX       lr
;;;85     
                          ENDP

                  TFT_24S_Write_Data PROC
;;;86     /* Write one byte as data to the TFT LCD Controller. */
;;;87     void TFT_24S_Write_Data(uint8_t data)
000100  2201              MOVS     r2,#1
;;;88     {
;;;89     	GPIO_SetBit(TFT_D_NC_POS);
000102  49bb              LDR      r1,|L1.1008|
000104  0312              LSLS     r2,r2,#12
000106  604a              STR      r2,[r1,#4]
;;;90     	GPIO_Write(data);
000108  680a              LDR      r2,[r1,#0]
00010a  23ff              MOVS     r3,#0xff
00010c  00db              LSLS     r3,r3,#3
00010e  439a              BICS     r2,r2,r3
000110  600a              STR      r2,[r1,#0]
000112  680a              LDR      r2,[r1,#0]
000114  00c0              LSLS     r0,r0,#3
000116  4302              ORRS     r2,r2,r0
000118  600a              STR      r2,[r1,#0]
;;;91     	GPIO_ResetBit(TFT_NWR_POS);
00011a  2001              MOVS     r0,#1
00011c  0340              LSLS     r0,r0,#13
00011e  6088              STR      r0,[r1,#8]
;;;92     	GPIO_SetBit(TFT_NWR_POS);
000120  6048              STR      r0,[r1,#4]
;;;93     }
000122  4770              BX       lr
;;;94     
                          ENDP

                  Init_ADC PROC
;;;336    
;;;337    void Init_ADC(void) {
000124  48af              LDR      r0,|L1.996|
;;;338    	
;;;339    	SIM->SCGC6 |= SIM_SCGC6_ADC0_MASK; 
000126  6bc1              LDR      r1,[r0,#0x3c]
000128  2201              MOVS     r2,#1
00012a  06d2              LSLS     r2,r2,#27
00012c  4311              ORRS     r1,r1,r2
00012e  63c1              STR      r1,[r0,#0x3c]
;;;340    	ADC0->CFG1 = 0x9C; // 16 bit
000130  48b2              LDR      r0,|L1.1020|
000132  219c              MOVS     r1,#0x9c
000134  6081              STR      r1,[r0,#8]
;;;341    	ADC0->SC2 = 0;
000136  2100              MOVS     r1,#0
000138  6201              STR      r1,[r0,#0x20]
;;;342    }
00013a  4770              BX       lr
;;;343    
                          ENDP

                  TFT_TS_Init PROC
;;;345    /* Initialize touchscreen hardware (ADC). */
;;;346    void TFT_TS_Init(void) {
00013c  e7fe              B        Init_ADC
;;;347    	// Configure ADC
;;;348    	Init_ADC();
;;;349    }
;;;350    
                          ENDP

                  TFT_Init PROC
;;;96     components (TFT LCD controller, touch screen and backlight controller). */ 
;;;97     void TFT_Init()
00013e  b570              PUSH     {r4-r6,lr}
;;;98     {
;;;99     	TFT_GPIO_Init();
000140  f7fffffe          BL       TFT_GPIO_Init
;;;100    	TFT_TS_Init();
000144  f7fffffe          BL       TFT_TS_Init
;;;101    	TFT_Init_Backlight();
000148  f7fffffe          BL       TFT_Init_Backlight
;;;102    	
;;;103    	GPIO_SetBit(TFT_NRD_POS);
00014c  2001              MOVS     r0,#1
00014e  4ca8              LDR      r4,|L1.1008|
000150  0400              LSLS     r0,r0,#16
000152  6060              STR      r0,[r4,#4]
;;;104    	GPIO_ResetBit(TFT_NWR_POS);
000154  10c0              ASRS     r0,r0,#3
000156  60a0              STR      r0,[r4,#8]
;;;105    	GPIO_ResetBit(TFT_NRST_POS);
000158  0105              LSLS     r5,r0,#4
00015a  60a5              STR      r5,[r4,#8]
;;;106    	Delay(100);
00015c  2064              MOVS     r0,#0x64
00015e  f7fffffe          BL       Delay
;;;107    	GPIO_SetBit(TFT_NRST_POS);
000162  6065              STR      r5,[r4,#4]
;;;108    	Delay(200);
000164  20c8              MOVS     r0,#0xc8
000166  f7fffffe          BL       Delay
;;;109    	TFT_24S_Write_Command(0x0028); //display OFF
00016a  2028              MOVS     r0,#0x28
00016c  f7fffffe          BL       TFT_24S_Write_Command
;;;110    	TFT_24S_Write_Command(0x0011); //exit SLEEP mode
000170  2011              MOVS     r0,#0x11
000172  f7fffffe          BL       TFT_24S_Write_Command
;;;111    	TFT_24S_Write_Data(0x0000);
000176  2000              MOVS     r0,#0
000178  f7fffffe          BL       TFT_24S_Write_Data
;;;112    	TFT_24S_Write_Command(0x00CB); //Power Control A
00017c  20cb              MOVS     r0,#0xcb
00017e  f7fffffe          BL       TFT_24S_Write_Command
;;;113    	TFT_24S_Write_Data(0x0039); //always 0x39
000182  2039              MOVS     r0,#0x39
000184  f7fffffe          BL       TFT_24S_Write_Data
;;;114    	TFT_24S_Write_Data(0x002C); //always 0x2C
000188  202c              MOVS     r0,#0x2c
00018a  f7fffffe          BL       TFT_24S_Write_Data
;;;115    	TFT_24S_Write_Data(0x0000); //always 0x00
00018e  2000              MOVS     r0,#0
000190  f7fffffe          BL       TFT_24S_Write_Data
;;;116    	TFT_24S_Write_Data(0x0034); //Vcore = 1.6V
000194  2034              MOVS     r0,#0x34
000196  f7fffffe          BL       TFT_24S_Write_Data
;;;117    	TFT_24S_Write_Data(0x0002); //DDVDH = 5.6V
00019a  2002              MOVS     r0,#2
00019c  f7fffffe          BL       TFT_24S_Write_Data
;;;118    	TFT_24S_Write_Command(0x00CF); //Power Control B
0001a0  20cf              MOVS     r0,#0xcf
0001a2  f7fffffe          BL       TFT_24S_Write_Command
;;;119    	TFT_24S_Write_Data(0x0000); //always 0x00
0001a6  2000              MOVS     r0,#0
0001a8  f7fffffe          BL       TFT_24S_Write_Data
;;;120    	TFT_24S_Write_Data(0x0081); //PCEQ off
0001ac  2081              MOVS     r0,#0x81
0001ae  f7fffffe          BL       TFT_24S_Write_Data
;;;121    	TFT_24S_Write_Data(0x0030); //ESD protection
0001b2  2030              MOVS     r0,#0x30
0001b4  f7fffffe          BL       TFT_24S_Write_Data
;;;122    	TFT_24S_Write_Command(0x00E8); //Driver timing control A
0001b8  20e8              MOVS     r0,#0xe8
0001ba  f7fffffe          BL       TFT_24S_Write_Command
;;;123    	TFT_24S_Write_Data(0x0085); //non-overlap
0001be  2085              MOVS     r0,#0x85
0001c0  f7fffffe          BL       TFT_24S_Write_Data
;;;124    	TFT_24S_Write_Data(0x0001); //EQ timing
0001c4  2001              MOVS     r0,#1
0001c6  f7fffffe          BL       TFT_24S_Write_Data
;;;125    	TFT_24S_Write_Data(0x0079); //Pre-charge timing
0001ca  2079              MOVS     r0,#0x79
0001cc  f7fffffe          BL       TFT_24S_Write_Data
;;;126    	TFT_24S_Write_Command(0x00EA); //Driver timing control B
0001d0  20ea              MOVS     r0,#0xea
0001d2  f7fffffe          BL       TFT_24S_Write_Command
;;;127    	TFT_24S_Write_Data(0x0000); //Gate driver timing
0001d6  2000              MOVS     r0,#0
0001d8  f7fffffe          BL       TFT_24S_Write_Data
;;;128    	TFT_24S_Write_Data(0x0000); //always 0x00
0001dc  2000              MOVS     r0,#0
0001de  f7fffffe          BL       TFT_24S_Write_Data
;;;129    	TFT_24S_Write_Command(0x00ED); //Power-On sequence control
0001e2  20ed              MOVS     r0,#0xed
0001e4  f7fffffe          BL       TFT_24S_Write_Command
;;;130    	TFT_24S_Write_Data(0x0064); //soft start
0001e8  2064              MOVS     r0,#0x64
0001ea  f7fffffe          BL       TFT_24S_Write_Data
;;;131    	TFT_24S_Write_Data(0x0003); //power on sequence
0001ee  2003              MOVS     r0,#3
0001f0  f7fffffe          BL       TFT_24S_Write_Data
;;;132    	TFT_24S_Write_Data(0x0012); //power on sequence
0001f4  2012              MOVS     r0,#0x12
0001f6  f7fffffe          BL       TFT_24S_Write_Data
;;;133    	TFT_24S_Write_Data(0x0081); //DDVDH enhance on
0001fa  2081              MOVS     r0,#0x81
0001fc  f7fffffe          BL       TFT_24S_Write_Data
;;;134    	TFT_24S_Write_Command(0x00F7); //Pump ratio control
000200  20f7              MOVS     r0,#0xf7
000202  f7fffffe          BL       TFT_24S_Write_Command
;;;135    	TFT_24S_Write_Data(0x0020); //DDVDH=2xVCI
000206  2020              MOVS     r0,#0x20
000208  f7fffffe          BL       TFT_24S_Write_Data
;;;136    	TFT_24S_Write_Command(0x00C0); //power control 1
00020c  20c0              MOVS     r0,#0xc0
00020e  f7fffffe          BL       TFT_24S_Write_Command
;;;137    	TFT_24S_Write_Data(0x0026);
000212  2026              MOVS     r0,#0x26
000214  f7fffffe          BL       TFT_24S_Write_Data
;;;138    	TFT_24S_Write_Data(0x0004); //second parameter for ILI9340 (ignored by ILI9341)
000218  2004              MOVS     r0,#4
00021a  f7fffffe          BL       TFT_24S_Write_Data
;;;139    	TFT_24S_Write_Command(0x00C1); //power control 2
00021e  20c1              MOVS     r0,#0xc1
000220  f7fffffe          BL       TFT_24S_Write_Command
;;;140    	TFT_24S_Write_Data(0x0011);
000224  2011              MOVS     r0,#0x11
000226  f7fffffe          BL       TFT_24S_Write_Data
;;;141    	TFT_24S_Write_Command(0x00C5); //VCOM control 1
00022a  20c5              MOVS     r0,#0xc5
00022c  f7fffffe          BL       TFT_24S_Write_Command
;;;142    	TFT_24S_Write_Data(0x0035);
000230  2035              MOVS     r0,#0x35
000232  f7fffffe          BL       TFT_24S_Write_Data
;;;143    	TFT_24S_Write_Data(0x003E);
000236  203e              MOVS     r0,#0x3e
000238  f7fffffe          BL       TFT_24S_Write_Data
;;;144    	TFT_24S_Write_Command(0x00C7); //VCOM control 2
00023c  20c7              MOVS     r0,#0xc7
00023e  f7fffffe          BL       TFT_24S_Write_Command
;;;145    	TFT_24S_Write_Data(0x00BE);
000242  20be              MOVS     r0,#0xbe
000244  f7fffffe          BL       TFT_24S_Write_Data
;;;146    	TFT_24S_Write_Command(0x0036); //memory access control = BGR
000248  2036              MOVS     r0,#0x36
00024a  f7fffffe          BL       TFT_24S_Write_Command
;;;147    #if 1
;;;148    	TFT_24S_Write_Data(0x0008); // Portrait mode
00024e  2008              MOVS     r0,#8
000250  f7fffffe          BL       TFT_24S_Write_Data
;;;149    #else
;;;150    	TFT_24S_Write_Data(0x00A8); // Landscape mode
;;;151    #endif
;;;152    	TFT_24S_Write_Command(0x00B1); //frame rate control
000254  20b1              MOVS     r0,#0xb1
000256  f7fffffe          BL       TFT_24S_Write_Command
;;;153    	TFT_24S_Write_Data(0x0000);
00025a  2000              MOVS     r0,#0
00025c  f7fffffe          BL       TFT_24S_Write_Data
;;;154    	TFT_24S_Write_Data(0x0010);
000260  2010              MOVS     r0,#0x10
000262  f7fffffe          BL       TFT_24S_Write_Data
;;;155    	TFT_24S_Write_Command(0x00B6); //display function control
000266  20b6              MOVS     r0,#0xb6
000268  f7fffffe          BL       TFT_24S_Write_Command
;;;156    	TFT_24S_Write_Data(0x000A);
00026c  200a              MOVS     r0,#0xa
00026e  f7fffffe          BL       TFT_24S_Write_Data
;;;157    	TFT_24S_Write_Data(0x00A2);
000272  20a2              MOVS     r0,#0xa2
000274  f7fffffe          BL       TFT_24S_Write_Data
;;;158    	TFT_24S_Write_Command(0x003A); //pixel format = 16 bit per pixel
000278  203a              MOVS     r0,#0x3a
00027a  f7fffffe          BL       TFT_24S_Write_Command
;;;159    	TFT_24S_Write_Data(0x0055);
00027e  2055              MOVS     r0,#0x55
000280  f7fffffe          BL       TFT_24S_Write_Data
;;;160    	TFT_24S_Write_Command(0x00F2); //3G Gamma control
000284  20f2              MOVS     r0,#0xf2
000286  f7fffffe          BL       TFT_24S_Write_Command
;;;161    	TFT_24S_Write_Data(0x0002); //off
00028a  2002              MOVS     r0,#2
00028c  f7fffffe          BL       TFT_24S_Write_Data
;;;162    	TFT_24S_Write_Command(0x0026); //Gamma curve 3
000290  2026              MOVS     r0,#0x26
000292  f7fffffe          BL       TFT_24S_Write_Command
;;;163    	TFT_24S_Write_Data(0x0001);
000296  2001              MOVS     r0,#1
000298  f7fffffe          BL       TFT_24S_Write_Data
;;;164    	TFT_24S_Write_Command(0x002A); //column address set
00029c  202a              MOVS     r0,#0x2a
00029e  f7fffffe          BL       TFT_24S_Write_Command
;;;165    	TFT_24S_Write_Data(0x0000);
0002a2  2000              MOVS     r0,#0
0002a4  f7fffffe          BL       TFT_24S_Write_Data
;;;166    	TFT_24S_Write_Data(0x0000); //start 0x0000
0002a8  2000              MOVS     r0,#0
0002aa  f7fffffe          BL       TFT_24S_Write_Data
;;;167    	TFT_24S_Write_Data(0x0000);
0002ae  2000              MOVS     r0,#0
0002b0  f7fffffe          BL       TFT_24S_Write_Data
;;;168    	TFT_24S_Write_Data(0x00EF); //end 0x00EF
0002b4  20ef              MOVS     r0,#0xef
0002b6  f7fffffe          BL       TFT_24S_Write_Data
;;;169    	TFT_24S_Write_Command(0x002B); //page address set
0002ba  202b              MOVS     r0,#0x2b
0002bc  f7fffffe          BL       TFT_24S_Write_Command
;;;170    	TFT_24S_Write_Data(0x0000);
0002c0  2000              MOVS     r0,#0
0002c2  f7fffffe          BL       TFT_24S_Write_Data
;;;171    	TFT_24S_Write_Data(0x0000); //start 0x0000
0002c6  2000              MOVS     r0,#0
0002c8  f7fffffe          BL       TFT_24S_Write_Data
;;;172    	TFT_24S_Write_Data(0x0001);
0002cc  2001              MOVS     r0,#1
0002ce  f7fffffe          BL       TFT_24S_Write_Data
;;;173    	TFT_24S_Write_Data(0x003F); //end 0x013F
0002d2  203f              MOVS     r0,#0x3f
0002d4  f7fffffe          BL       TFT_24S_Write_Data
;;;174    	TFT_24S_Write_Command(0x0029); //Display ON
0002d8  2029              MOVS     r0,#0x29
0002da  f7fffffe          BL       TFT_24S_Write_Command
;;;175    }
0002de  bd70              POP      {r4-r6,pc}
;;;176    
                          ENDP

                  TFT_Plot_Pixel PROC
;;;177    /* Set the pixel at pos to the given color. */
;;;178    void TFT_Plot_Pixel(PT_T * pos, COLOR_T * color) {
0002e0  b570              PUSH     {r4-r6,lr}
0002e2  4605              MOV      r5,r0
0002e4  460c              MOV      r4,r1
;;;179    	uint8_t b1, b2;
;;;180    
;;;181    	// Column address set 0x2a
;;;182    	TFT_24S_Write_Command(0x002A); //column address set
0002e6  202a              MOVS     r0,#0x2a
0002e8  f7fffffe          BL       TFT_24S_Write_Command
;;;183    	TFT_24S_Write_Data(0);
0002ec  2000              MOVS     r0,#0
0002ee  f7fffffe          BL       TFT_24S_Write_Data
;;;184    	TFT_24S_Write_Data(pos->X & 0xff); //start 
0002f2  7828              LDRB     r0,[r5,#0]
0002f4  f7fffffe          BL       TFT_24S_Write_Data
;;;185    	TFT_24S_Write_Data(0x0000);
0002f8  2000              MOVS     r0,#0
0002fa  f7fffffe          BL       TFT_24S_Write_Data
;;;186    	TFT_24S_Write_Data(0x00EF); //end 0x00EF
0002fe  20ef              MOVS     r0,#0xef
000300  f7fffffe          BL       TFT_24S_Write_Data
;;;187    	
;;;188    	// Page (row) address set 0x2b
;;;189    	TFT_24S_Write_Command(0x002B); //page address set
000304  202b              MOVS     r0,#0x2b
000306  f7fffffe          BL       TFT_24S_Write_Command
;;;190    	TFT_24S_Write_Data(pos->Y >> 8);
00030a  88a8              LDRH     r0,[r5,#4]
00030c  0400              LSLS     r0,r0,#16
00030e  0e00              LSRS     r0,r0,#24
000310  f7fffffe          BL       TFT_24S_Write_Data
;;;191    	TFT_24S_Write_Data(pos->Y & 0xff); //start 
000314  7928              LDRB     r0,[r5,#4]
000316  f7fffffe          BL       TFT_24S_Write_Data
;;;192    	TFT_24S_Write_Data(0x0001);
00031a  2001              MOVS     r0,#1
00031c  f7fffffe          BL       TFT_24S_Write_Data
;;;193    	TFT_24S_Write_Data(0x003F); //end 0x013F	
000320  203f              MOVS     r0,#0x3f
000322  f7fffffe          BL       TFT_24S_Write_Data
;;;194    	
;;;195    	// Memory Write 0x2c
;;;196    	// 16 bpp, 5-6-5. Assume color channel data is left-aligned
;;;197    	b1 = (color->R&0xf8) | ((color->G&0xe0)>>5);
000326  7820              LDRB     r0,[r4,#0]
000328  7861              LDRB     r1,[r4,#1]
00032a  08c5              LSRS     r5,r0,#3
00032c  00ed              LSLS     r5,r5,#3
00032e  0948              LSRS     r0,r1,#5
000330  4305              ORRS     r5,r5,r0
;;;198    	b2 = ((color->G&0x1c)<<3) | ((color->B&0xf8)>>3);
000332  201c              MOVS     r0,#0x1c
000334  4001              ANDS     r1,r1,r0
000336  78a0              LDRB     r0,[r4,#2]
000338  00ce              LSLS     r6,r1,#3
00033a  08c0              LSRS     r0,r0,#3
00033c  4306              ORRS     r6,r6,r0
;;;199    
;;;200    	TFT_24S_Write_Command(0x002c);
00033e  202c              MOVS     r0,#0x2c
000340  f7fffffe          BL       TFT_24S_Write_Command
;;;201    	TFT_24S_Write_Data(b1);
000344  4628              MOV      r0,r5
000346  f7fffffe          BL       TFT_24S_Write_Data
;;;202    	TFT_24S_Write_Data(b2);
00034a  4630              MOV      r0,r6
00034c  f7fffffe          BL       TFT_24S_Write_Data
;;;203    }
000350  bd70              POP      {r4-r6,pc}
;;;204    
                          ENDP

                  TFT_Fill_Buffer PROC
;;;205    /* Fill the entire display buffer with the given color. */
;;;206    void TFT_Fill_Buffer(COLOR_T * color) {
000352  b5f8              PUSH     {r3-r7,lr}
000354  4604              MOV      r4,r0
;;;207    	uint32_t x, y;
;;;208    	uint8_t b1, b2;
;;;209    	
;;;210    	// Enable access to full screen, reset write pointer to origin
;;;211    	TFT_24S_Write_Command(0x002A); //column address set
000356  202a              MOVS     r0,#0x2a
000358  f7fffffe          BL       TFT_24S_Write_Command
;;;212    	TFT_24S_Write_Data(0x0000);
00035c  2000              MOVS     r0,#0
00035e  f7fffffe          BL       TFT_24S_Write_Data
;;;213    	TFT_24S_Write_Data(0x0000); //start 0x0000
000362  2000              MOVS     r0,#0
000364  f7fffffe          BL       TFT_24S_Write_Data
;;;214    	TFT_24S_Write_Data(0x0000);
000368  2000              MOVS     r0,#0
00036a  f7fffffe          BL       TFT_24S_Write_Data
;;;215    	TFT_24S_Write_Data(0x00EF); //end 0x00EF
00036e  20ef              MOVS     r0,#0xef
000370  f7fffffe          BL       TFT_24S_Write_Data
;;;216    	TFT_24S_Write_Command(0x002B); //page address set
000374  202b              MOVS     r0,#0x2b
000376  f7fffffe          BL       TFT_24S_Write_Command
;;;217    	TFT_24S_Write_Data(0x0000);
00037a  2000              MOVS     r0,#0
00037c  f7fffffe          BL       TFT_24S_Write_Data
;;;218    	TFT_24S_Write_Data(0x0000); //start 0x0000
000380  2000              MOVS     r0,#0
000382  f7fffffe          BL       TFT_24S_Write_Data
;;;219    	TFT_24S_Write_Data(0x0001);
000386  2001              MOVS     r0,#1
000388  f7fffffe          BL       TFT_24S_Write_Data
;;;220    	TFT_24S_Write_Data(0x003F); //end 0x013F
00038c  203f              MOVS     r0,#0x3f
00038e  f7fffffe          BL       TFT_24S_Write_Data
;;;221    	
;;;222    	// Memory Write 0x2c
;;;223    	// 16 bpp, 5-6-5. Assume color channel data is left-aligned
;;;224    	b1 = (color->R&0xf8) | ((color->G&0xe0)>>5);
000392  7820              LDRB     r0,[r4,#0]
000394  08c1              LSRS     r1,r0,#3
000396  7860              LDRB     r0,[r4,#1]
000398  00c9              LSLS     r1,r1,#3
00039a  0942              LSRS     r2,r0,#5
00039c  4311              ORRS     r1,r1,r2
00039e  9100              STR      r1,[sp,#0]
;;;225    	b2 = ((color->G&0x1c)<<3) | ((color->B&0xf8)>>3);
0003a0  211c              MOVS     r1,#0x1c
0003a2  4008              ANDS     r0,r0,r1
0003a4  00c7              LSLS     r7,r0,#3
0003a6  78a0              LDRB     r0,[r4,#2]
0003a8  08c0              LSRS     r0,r0,#3
0003aa  4307              ORRS     r7,r7,r0
;;;226    	
;;;227    	TFT_24S_Write_Command(0x002c);
0003ac  202c              MOVS     r0,#0x2c
0003ae  f7fffffe          BL       TFT_24S_Write_Command
;;;228    	for (y=0; y<320; y++) {
0003b2  2500              MOVS     r5,#0
0003b4  26ff              MOVS     r6,#0xff
0003b6  3641              ADDS     r6,r6,#0x41
                  |L1.952|
;;;229    		for (x=0; x<240; x++) {
0003b8  2400              MOVS     r4,#0
                  |L1.954|
;;;230    			TFT_24S_Write_Data(b1);
0003ba  9800              LDR      r0,[sp,#0]
0003bc  f7fffffe          BL       TFT_24S_Write_Data
;;;231    			TFT_24S_Write_Data(b2);
0003c0  4638              MOV      r0,r7
0003c2  f7fffffe          BL       TFT_24S_Write_Data
0003c6  1c64              ADDS     r4,r4,#1              ;229
0003c8  2cf0              CMP      r4,#0xf0              ;229
0003ca  d3f6              BCC      |L1.954|
0003cc  1c6d              ADDS     r5,r5,#1              ;228
0003ce  42b5              CMP      r5,r6                 ;228
0003d0  d3f2              BCC      |L1.952|
;;;232    		}
;;;233    	}		
;;;234    }
0003d2  bdf8              POP      {r3-r7,pc}
;;;235    /* Draw a rectangle from p1 to p2 filled with specified color. */
                          ENDP

                  TFT_Fill_Rectangle PROC
;;;236    void TFT_Fill_Rectangle(PT_T * p1, PT_T * p2, COLOR_T * color) {
0003d4  b5f7              PUSH     {r0-r2,r4-r7,lr}
0003d6  b082              SUB      sp,sp,#8
;;;237    	uint32_t n;
;;;238    	uint8_t b1, b2;
;;;239    	uint16_t c_min, c_max, r_min, r_max;
;;;240    	
;;;241    	c_min = MIN(p1->X, p2->X);
0003d8  6802              LDR      r2,[r0,#0]
0003da  680b              LDR      r3,[r1,#0]
0003dc  429a              CMP      r2,r3
0003de  d20f              BCS      |L1.1024|
0003e0  4614              MOV      r4,r2
0003e2  e00e              B        |L1.1026|
                  |L1.996|
                          DCD      0x40048000
                  |L1.1000|
                          DCD      0x4004b000
                  |L1.1004|
                          DCD      0x400ff080
                  |L1.1008|
                          DCD      0xf80ff080
                  |L1.1012|
                          DCD      SystemCoreClock
                  |L1.1016|
                          DCD      0x40039000
                  |L1.1020|
                          DCD      0x4003b000
                  |L1.1024|
000400  461c              MOV      r4,r3
                  |L1.1026|
000402  b2a7              UXTH     r7,r4
;;;242    	c_max = MAX(p1->X, p2->X);
000404  429a              CMP      r2,r3
000406  d800              BHI      |L1.1034|
000408  461a              MOV      r2,r3
                  |L1.1034|
00040a  b294              UXTH     r4,r2
;;;243    	c_max = MIN(c_max, TFT_WIDTH-1);
00040c  2cef              CMP      r4,#0xef
00040e  d300              BCC      |L1.1042|
000410  24ef              MOVS     r4,#0xef
                  |L1.1042|
;;;244    	
;;;245    	r_min = MIN(p1->Y, p2->Y);
000412  6840              LDR      r0,[r0,#4]
000414  6849              LDR      r1,[r1,#4]
000416  4288              CMP      r0,r1
000418  d201              BCS      |L1.1054|
00041a  4602              MOV      r2,r0
00041c  e000              B        |L1.1056|
                  |L1.1054|
00041e  460a              MOV      r2,r1
                  |L1.1056|
000420  b296              UXTH     r6,r2
;;;246    	r_max = MAX(p1->Y, p2->Y);
000422  4288              CMP      r0,r1
000424  d800              BHI      |L1.1064|
000426  4608              MOV      r0,r1
                  |L1.1064|
000428  b285              UXTH     r5,r0
;;;247    	r_max = MIN(r_max, TFT_HEIGHT-1);
00042a  20ff              MOVS     r0,#0xff
00042c  3040              ADDS     r0,r0,#0x40
00042e  4285              CMP      r5,r0
000430  d300              BCC      |L1.1076|
000432  4605              MOV      r5,r0
                  |L1.1076|
;;;248    	
;;;249    	// Enable access to full screen, reset write pointer to origin
;;;250    	TFT_24S_Write_Command(0x002A); //column address set
000434  202a              MOVS     r0,#0x2a
000436  f7fffffe          BL       TFT_24S_Write_Command
;;;251    	TFT_24S_Write_Data(c_min >> 8);
00043a  0a38              LSRS     r0,r7,#8
00043c  f7fffffe          BL       TFT_24S_Write_Data
;;;252    	TFT_24S_Write_Data(c_min & 0xff); //start 
000440  b2f8              UXTB     r0,r7
000442  f7fffffe          BL       TFT_24S_Write_Data
;;;253    	TFT_24S_Write_Data(c_max >> 8);
000446  0a20              LSRS     r0,r4,#8
000448  f7fffffe          BL       TFT_24S_Write_Data
;;;254    	TFT_24S_Write_Data(c_max & 0xff); //end 
00044c  b2e0              UXTB     r0,r4
00044e  f7fffffe          BL       TFT_24S_Write_Data
;;;255    	TFT_24S_Write_Command(0x002B); //page address set
000452  202b              MOVS     r0,#0x2b
000454  f7fffffe          BL       TFT_24S_Write_Command
;;;256    	TFT_24S_Write_Data(r_min >> 8);
000458  0a30              LSRS     r0,r6,#8
00045a  f7fffffe          BL       TFT_24S_Write_Data
;;;257    	TFT_24S_Write_Data(r_min & 0xff); //start 
00045e  b2f0              UXTB     r0,r6
000460  f7fffffe          BL       TFT_24S_Write_Data
;;;258    	TFT_24S_Write_Data(r_max >> 8);
000464  0a28              LSRS     r0,r5,#8
000466  f7fffffe          BL       TFT_24S_Write_Data
;;;259    	TFT_24S_Write_Data(r_max & 0xff); //end 
00046a  b2e8              UXTB     r0,r5
00046c  f7fffffe          BL       TFT_24S_Write_Data
;;;260    	
;;;261    	// Memory Write 0x2c
;;;262    	// 16 bpp, 5-6-5. Assume color channel data is left-aligned
;;;263    	b1 = (color->R&0xf8) | ((color->G&0xe0)>>5);
000470  9804              LDR      r0,[sp,#0x10]
000472  7800              LDRB     r0,[r0,#0]
000474  08c1              LSRS     r1,r0,#3
000476  9804              LDR      r0,[sp,#0x10]
000478  00c9              LSLS     r1,r1,#3
00047a  7840              LDRB     r0,[r0,#1]
00047c  0942              LSRS     r2,r0,#5
00047e  4311              ORRS     r1,r1,r2
000480  9101              STR      r1,[sp,#4]
;;;264    	b2 = ((color->G&0x1c)<<3) | ((color->B&0xf8)>>3);
000482  211c              MOVS     r1,#0x1c
000484  4008              ANDS     r0,r0,r1
000486  9904              LDR      r1,[sp,#0x10]
000488  00c0              LSLS     r0,r0,#3
00048a  7889              LDRB     r1,[r1,#2]
00048c  08c9              LSRS     r1,r1,#3
00048e  4308              ORRS     r0,r0,r1
000490  9000              STR      r0,[sp,#0]
;;;265    	
;;;266    	TFT_24S_Write_Command(0x002c);
000492  202c              MOVS     r0,#0x2c
000494  f7fffffe          BL       TFT_24S_Write_Command
;;;267    	
;;;268    	n = (c_max - c_min + 1)*(r_max - r_min + 1);
000498  1be4              SUBS     r4,r4,r7
00049a  1c64              ADDS     r4,r4,#1
00049c  1ba8              SUBS     r0,r5,r6
00049e  1c40              ADDS     r0,r0,#1
0004a0  4344              MULS     r4,r0,r4
;;;269    	while (n-- > 0) {
0004a2  e005              B        |L1.1200|
                  |L1.1188|
;;;270    		TFT_24S_Write_Data(b1);
0004a4  9801              LDR      r0,[sp,#4]
0004a6  f7fffffe          BL       TFT_24S_Write_Data
;;;271    		TFT_24S_Write_Data(b2);
0004aa  9800              LDR      r0,[sp,#0]
0004ac  f7fffffe          BL       TFT_24S_Write_Data
                  |L1.1200|
0004b0  1e64              SUBS     r4,r4,#1              ;269
0004b2  1c60              ADDS     r0,r4,#1              ;269
0004b4  d1f6              BNE      |L1.1188|
;;;272    	}	
;;;273    }
0004b6  b005              ADD      sp,sp,#0x14
0004b8  bdf0              POP      {r4-r7,pc}
;;;274    
                          ENDP

                  TFT_Start_Rectangle PROC
;;;278    */
;;;279    uint32_t TFT_Start_Rectangle(PT_T * p1, PT_T * p2) {
0004ba  b5f0              PUSH     {r4-r7,lr}
;;;280    	uint16_t c_min, c_max, r_min, r_max;
;;;281    	
;;;282    	// Find bounds of rectangle
;;;283    	c_min = MIN(p1->X, p2->X);
0004bc  6802              LDR      r2,[r0,#0]
0004be  680b              LDR      r3,[r1,#0]
0004c0  429a              CMP      r2,r3
0004c2  d201              BCS      |L1.1224|
0004c4  4614              MOV      r4,r2
0004c6  e000              B        |L1.1226|
                  |L1.1224|
0004c8  461c              MOV      r4,r3
                  |L1.1226|
0004ca  b2a6              UXTH     r6,r4
;;;284    	c_max = MAX(p1->X, p2->X);
0004cc  429a              CMP      r2,r3
0004ce  d800              BHI      |L1.1234|
0004d0  461a              MOV      r2,r3
                  |L1.1234|
0004d2  b295              UXTH     r5,r2
;;;285    	
;;;286    	r_min = MIN(p1->Y, p2->Y);
0004d4  6840              LDR      r0,[r0,#4]
0004d6  6849              LDR      r1,[r1,#4]
0004d8  4288              CMP      r0,r1
0004da  d201              BCS      |L1.1248|
0004dc  4602              MOV      r2,r0
0004de  e000              B        |L1.1250|
                  |L1.1248|
0004e0  460a              MOV      r2,r1
                  |L1.1250|
0004e2  b297              UXTH     r7,r2
;;;287    	r_max = MAX(p1->Y, p2->Y);
0004e4  4288              CMP      r0,r1
0004e6  d800              BHI      |L1.1258|
0004e8  4608              MOV      r0,r1
                  |L1.1258|
0004ea  b284              UXTH     r4,r0
;;;288    
;;;289    	// Clip to display size
;;;290    	c_max = MIN(c_max, TFT_WIDTH-1);
0004ec  2def              CMP      r5,#0xef
0004ee  d300              BCC      |L1.1266|
0004f0  25ef              MOVS     r5,#0xef
                  |L1.1266|
;;;291    	r_max = MIN(r_max, TFT_HEIGHT-1);
0004f2  20ff              MOVS     r0,#0xff
0004f4  3040              ADDS     r0,r0,#0x40
0004f6  4284              CMP      r4,r0
0004f8  d300              BCC      |L1.1276|
0004fa  4604              MOV      r4,r0
                  |L1.1276|
;;;292    	
;;;293    	// Enable access to full screen, reset write pointer to origin
;;;294    	TFT_24S_Write_Command(0x002A); //column address set
0004fc  202a              MOVS     r0,#0x2a
0004fe  f7fffffe          BL       TFT_24S_Write_Command
;;;295    	TFT_24S_Write_Data(c_min >> 8);
000502  0a30              LSRS     r0,r6,#8
000504  f7fffffe          BL       TFT_24S_Write_Data
;;;296    	TFT_24S_Write_Data(c_min & 0xff); //start 
000508  b2f0              UXTB     r0,r6
00050a  f7fffffe          BL       TFT_24S_Write_Data
;;;297    	TFT_24S_Write_Data(c_max >> 8);
00050e  0a28              LSRS     r0,r5,#8
000510  f7fffffe          BL       TFT_24S_Write_Data
;;;298    	TFT_24S_Write_Data(c_max & 0xff); //end 
000514  b2e8              UXTB     r0,r5
000516  f7fffffe          BL       TFT_24S_Write_Data
;;;299    	TFT_24S_Write_Command(0x002B); //page address set
00051a  202b              MOVS     r0,#0x2b
00051c  f7fffffe          BL       TFT_24S_Write_Command
;;;300    	TFT_24S_Write_Data(r_min >> 8);
000520  0a38              LSRS     r0,r7,#8
000522  f7fffffe          BL       TFT_24S_Write_Data
;;;301    	TFT_24S_Write_Data(r_min & 0xff); //start 
000526  b2f8              UXTB     r0,r7
000528  f7fffffe          BL       TFT_24S_Write_Data
;;;302    	TFT_24S_Write_Data(r_max >> 8);
00052c  0a20              LSRS     r0,r4,#8
00052e  f7fffffe          BL       TFT_24S_Write_Data
;;;303    	TFT_24S_Write_Data(r_max & 0xff); //end 
000532  b2e0              UXTB     r0,r4
000534  f7fffffe          BL       TFT_24S_Write_Data
;;;304    	
;;;305    	// Memory Write 0x2c
;;;306    	TFT_24S_Write_Command(0x002c);
000538  202c              MOVS     r0,#0x2c
00053a  f7fffffe          BL       TFT_24S_Write_Command
;;;307    	
;;;308    	return (c_max - c_min + 1)*(r_max - r_min + 1);
00053e  1ba8              SUBS     r0,r5,r6
000540  1c40              ADDS     r0,r0,#1
000542  1be1              SUBS     r1,r4,r7
000544  1c49              ADDS     r1,r1,#1
000546  4348              MULS     r0,r1,r0
;;;309    }
000548  bdf0              POP      {r4-r7,pc}
;;;310    
                          ENDP

                  TFT_Write_Rectangle_Pixel PROC
;;;312    have called TFT_Write_Rectangle before calling this function. */
;;;313    void TFT_Write_Rectangle_Pixel(COLOR_T * color, unsigned int count) {
00054a  b570              PUSH     {r4-r6,lr}
00054c  460c              MOV      r4,r1
;;;314    	uint8_t b1, b2;
;;;315    
;;;316    	// 16 bpp, 5-6-5. Assume color channel data is left-aligned
;;;317    	b1 = (color->R&0xf8) | ((color->G&0xe0)>>5);
00054e  7801              LDRB     r1,[r0,#0]
000550  08cd              LSRS     r5,r1,#3
000552  7841              LDRB     r1,[r0,#1]
000554  00ed              LSLS     r5,r5,#3
000556  094a              LSRS     r2,r1,#5
000558  4315              ORRS     r5,r5,r2
;;;318    	b2 = ((color->G&0x1c)<<3) | ((color->B&0xf8)>>3);
00055a  221c              MOVS     r2,#0x1c
00055c  4011              ANDS     r1,r1,r2
00055e  7880              LDRB     r0,[r0,#2]
000560  00ce              LSLS     r6,r1,#3
000562  08c0              LSRS     r0,r0,#3
000564  4306              ORRS     r6,r6,r0
000566  e005              B        |L1.1396|
                  |L1.1384|
;;;319    	while (count--) {
;;;320    		TFT_24S_Write_Data(b1);
000568  4628              MOV      r0,r5
00056a  f7fffffe          BL       TFT_24S_Write_Data
;;;321    		TFT_24S_Write_Data(b2);
00056e  4630              MOV      r0,r6
000570  f7fffffe          BL       TFT_24S_Write_Data
                  |L1.1396|
000574  1e64              SUBS     r4,r4,#1              ;319
000576  1c60              ADDS     r0,r4,#1              ;319
000578  d1f6              BNE      |L1.1384|
;;;322    	}
;;;323    }
00057a  bd70              POP      {r4-r6,pc}
;;;324    
                          ENDP

                  TFT_Set_BL PROC
;;;325    /* Enable (on > 0) or disable LED backlight via LCD controller. */
;;;326    void TFT_Set_BL(uint8_t on) {
00057c  b510              PUSH     {r4,lr}
00057e  4604              MOV      r4,r0
;;;327    	TFT_24S_Write_Command(0x53);
000580  2053              MOVS     r0,#0x53
000582  f7fffffe          BL       TFT_24S_Write_Command
;;;328    	TFT_24S_Write_Data(0x28 | (on? 4 : 0));
000586  2c00              CMP      r4,#0
000588  d001              BEQ      |L1.1422|
00058a  2004              MOVS     r0,#4
00058c  e000              B        |L1.1424|
                  |L1.1422|
00058e  2000              MOVS     r0,#0
                  |L1.1424|
000590  3028              ADDS     r0,r0,#0x28
000592  f7fffffe          BL       TFT_24S_Write_Data
;;;329    }
000596  bd10              POP      {r4,pc}
;;;330    
                          ENDP

                  TFT_Set_Brightness PROC
;;;331    /* Set brightness via LCD controller. */
;;;332    void TFT_Set_Brightness(uint8_t brightness) {
000598  b510              PUSH     {r4,lr}
00059a  4604              MOV      r4,r0
;;;333    	TFT_24S_Write_Command(0x51);
00059c  2051              MOVS     r0,#0x51
00059e  f7fffffe          BL       TFT_24S_Write_Command
;;;334    	TFT_24S_Write_Data(brightness);
0005a2  4620              MOV      r0,r4
0005a4  f7fffffe          BL       TFT_24S_Write_Data
;;;335    }
0005a8  bd10              POP      {r4,pc}
;;;336    
                          ENDP

                  TFT_TS_Read PROC
;;;355    position unchanged. */
;;;356    uint32_t TFT_TS_Read(PT_T * position) {
0005aa  b5f8              PUSH     {r3-r7,lr}
0005ac  4605              MOV      r5,r0
;;;357    	uint32_t x, y;
;;;358    	uint32_t b;
;;;359    
;;;360    	// Determine if screen was pressed.
;;;361    	// Set YU digital output at ground, 
;;;362    	PORTE->PCR[TFT_TS_YU_BIT] &= ~PORT_PCR_MUX_MASK;
0005ae  4cbc              LDR      r4,|L1.2208|
0005b0  69a1              LDR      r1,[r4,#0x18]
0005b2  2007              MOVS     r0,#7
0005b4  0200              LSLS     r0,r0,#8
0005b6  4381              BICS     r1,r1,r0
0005b8  61a1              STR      r1,[r4,#0x18]
;;;363    	PORTE->PCR[TFT_TS_YU_BIT] |= PORT_PCR_MUX(1);
0005ba  69a2              LDR      r2,[r4,#0x18]
0005bc  15a1              ASRS     r1,r4,#22
0005be  430a              ORRS     r2,r2,r1
0005c0  61a2              STR      r2,[r4,#0x18]
;;;364    	PTE->PDDR |= MASK(TFT_TS_YU_BIT);
0005c2  4eb8              LDR      r6,|L1.2212|
0005c4  6973              LDR      r3,[r6,#0x14]
0005c6  038a              LSLS     r2,r1,#14
0005c8  4313              ORRS     r3,r3,r2
0005ca  6173              STR      r3,[r6,#0x14]
;;;365    	PTE->PCOR = MASK(TFT_TS_YU_BIT); // Clear YU to 0
0005cc  60b2              STR      r2,[r6,#8]
;;;366    
;;;367    	// Set YD + XL to open
;;;368    	// Set YD as ADC input
;;;369    	PORTE->PCR[TFT_TS_YD_BIT] &= ~PORT_PCR_MUX_MASK;
0005ce  6922              LDR      r2,[r4,#0x10]
0005d0  4382              BICS     r2,r2,r0
0005d2  6122              STR      r2,[r4,#0x10]
;;;370    	PORTE->PCR[TFT_TS_YD_BIT] |= PORT_PCR_MUX(0);
0005d4  6922              LDR      r2,[r4,#0x10]
0005d6  6122              STR      r2,[r4,#0x10]
;;;371    
;;;372    	// Set XL as digital input
;;;373    	PORTE->PCR[TFT_TS_XL_BIT] &= ~PORT_PCR_MUX_MASK;
0005d8  6962              LDR      r2,[r4,#0x14]
0005da  4382              BICS     r2,r2,r0
0005dc  6162              STR      r2,[r4,#0x14]
;;;374    	PORTE->PCR[TFT_TS_XL_BIT] |= PORT_PCR_MUX(1);
0005de  6962              LDR      r2,[r4,#0x14]
0005e0  430a              ORRS     r2,r2,r1
0005e2  6162              STR      r2,[r4,#0x14]
;;;375    	PTE->PDDR &= ~MASK(TFT_TS_XL_BIT); // Input
0005e4  6972              LDR      r2,[r6,#0x14]
0005e6  034b              LSLS     r3,r1,#13
0005e8  439a              BICS     r2,r2,r3
0005ea  6172              STR      r2,[r6,#0x14]
;;;376    	
;;;377    	// Set XR as digital input with pull-up
;;;378    	PORTE->PCR[TFT_TS_XR_BIT] &= ~PORT_PCR_MUX_MASK;
0005ec  69e2              LDR      r2,[r4,#0x1c]
0005ee  4382              BICS     r2,r2,r0
0005f0  61e2              STR      r2,[r4,#0x1c]
;;;379    	PORTE->PCR[TFT_TS_XR_BIT] |= PORT_PCR_MUX(1);
0005f2  69e0              LDR      r0,[r4,#0x1c]
0005f4  4308              ORRS     r0,r0,r1
0005f6  61e0              STR      r0,[r4,#0x1c]
;;;380    	PORTE->PCR[TFT_TS_XR_BIT] |= PORT_PCR_PE_MASK; // Enable pull-up
0005f8  69e0              LDR      r0,[r4,#0x1c]
0005fa  2102              MOVS     r1,#2
0005fc  4308              ORRS     r0,r0,r1
0005fe  61e0              STR      r0,[r4,#0x1c]
;;;381    	PTE->PDDR &= ~MASK(TFT_TS_XR_BIT); // Input
000600  6970              LDR      r0,[r6,#0x14]
000602  058f              LSLS     r7,r1,#22
000604  43b8              BICS     r0,r0,r7
000606  6170              STR      r0,[r6,#0x14]
;;;382    		
;;;383    	// Wait for the inputs to settle
;;;384    	Delay(TS_DELAY);
000608  2001              MOVS     r0,#1
00060a  f7fffffe          BL       Delay
;;;385    	// Read XR input via digital
;;;386    	// if XR is 0, then screen is pressed
;;;387    	b = (PTE->PDIR) & MASK(TFT_TS_XR_BIT);
00060e  6930              LDR      r0,[r6,#0x10]
000610  4038              ANDS     r0,r0,r7
;;;388    	
;;;389    	if (b>0) {
000612  2800              CMP      r0,#0
000614  d001              BEQ      |L1.1562|
;;;390    		// Screen not pressed
;;;391    		return 0;
000616  2000              MOVS     r0,#0
;;;392    	} else {
;;;393    		// Read X Position
;;;394    		// Configure inputs to ADC
;;;395    		PORTE->PCR[TFT_TS_YU_BIT] &= ~PORT_PCR_MUX_MASK;
;;;396    		PORTE->PCR[TFT_TS_YU_BIT] |= PORT_PCR_MUX(0);
;;;397    		PORTE->PCR[TFT_TS_YD_BIT] &= ~PORT_PCR_MUX_MASK;
;;;398    		PORTE->PCR[TFT_TS_YD_BIT] |= PORT_PCR_MUX(0);
;;;399    
;;;400    		
;;;401    		// Configure outputs to GPIO
;;;402    		PORTE->PCR[TFT_TS_XL_BIT] &= ~PORT_PCR_MUX_MASK;
;;;403    		PORTE->PCR[TFT_TS_XL_BIT] |= PORT_PCR_MUX(1);
;;;404    		PORTE->PCR[TFT_TS_XR_BIT] &= ~PORT_PCR_MUX_MASK;
;;;405    		PORTE->PCR[TFT_TS_XR_BIT] |= PORT_PCR_MUX(1);
;;;406    		PTE->PDDR |= MASK(TFT_TS_XL_BIT) | MASK(TFT_TS_XR_BIT);
;;;407    		PTE->PSOR = MASK(TFT_TS_XR_BIT); // Set XR to 1
;;;408    		PTE->PCOR = MASK(TFT_TS_XL_BIT); // Clear XL to 0
;;;409    		// Wait for inputs to settle
;;;410    		Delay(TS_DELAY);
;;;411    		
;;;412    		// Read inputs
;;;413    		ADC0->SC1[0] = TFT_TS_YU_CHANNEL; // start conversion on channel YU
;;;414    		while (!(ADC0->SC1[0] & ADC_SC1_COCO_MASK))
;;;415    			;
;;;416    		yu = ADC0->R[0];
;;;417    		x = yu;
;;;418    
;;;419    		// Read Y Position
;;;420    		// Configure inputs to ADC
;;;421    		PORTE->PCR[TFT_TS_XL_BIT] &= ~PORT_PCR_MUX_MASK;
;;;422    		PORTE->PCR[TFT_TS_XL_BIT] |= PORT_PCR_MUX(0);
;;;423    		PORTE->PCR[TFT_TS_XR_BIT] &= ~PORT_PCR_MUX_MASK;
;;;424    		PORTE->PCR[TFT_TS_XR_BIT] |= PORT_PCR_MUX(0);
;;;425    		// Disable pull-up - just to be sure
;;;426    		PORTE->PCR[TFT_TS_XR_BIT] &= ~PORT_PCR_PE_MASK; 
;;;427    		
;;;428    		// Configure outputs to GPIO
;;;429    		PORTE->PCR[TFT_TS_YU_BIT] &= ~PORT_PCR_MUX_MASK;
;;;430    		PORTE->PCR[TFT_TS_YU_BIT] |= PORT_PCR_MUX(1);
;;;431    		PORTE->PCR[TFT_TS_YD_BIT] &= ~PORT_PCR_MUX_MASK;
;;;432    		PORTE->PCR[TFT_TS_YD_BIT] |= PORT_PCR_MUX(1);
;;;433    		PTE->PDDR |= MASK(TFT_TS_YU_BIT) | MASK(TFT_TS_YD_BIT);
;;;434    		PTE->PSOR = MASK(TFT_TS_YD_BIT); // Set YD to 1
;;;435    		PTE->PCOR = MASK(TFT_TS_YU_BIT); // Clear YU to 0
;;;436    		// Wait for the inputs to settle
;;;437    		Delay(TS_DELAY);
;;;438    
;;;439    		// Read inputs
;;;440    		ADC0->SC1[0] = TFT_TS_XL_CHANNEL; // start conversion on channel XL
;;;441    		while (!(ADC0->SC1[0] & ADC_SC1_COCO_MASK))
;;;442    			;
;;;443    		xl = ADC0->R[0];
;;;444    		y = xl;
;;;445    
;;;446    		// Apply calibration factors to raw position information
;;;447    		if (TFT_TS_Calibrated) {
;;;448    			if (x<TFT_TS_X_Offset) {
;;;449    				position->X = 0;
;;;450    			} else {
;;;451    				position->X = (x - TFT_TS_X_Offset)/TFT_TS_X_Scale;
;;;452    			}
;;;453    			if (y<TFT_TS_Y_Offset) {
;;;454    				position->Y = 0;
;;;455    			} else {
;;;456    				position->Y = (y - TFT_TS_Y_Offset)/TFT_TS_Y_Scale;
;;;457    			}
;;;458    		} else {
;;;459    			position->X = x;
;;;460    			position->Y = y;
;;;461    		}
;;;462    		return 1;
;;;463    	}
;;;464    }
000618  bdf8              POP      {r3-r7,pc}
                  |L1.1562|
00061a  69a1              LDR      r1,[r4,#0x18]         ;395
00061c  2007              MOVS     r0,#7                 ;395
00061e  0200              LSLS     r0,r0,#8              ;395
000620  4381              BICS     r1,r1,r0              ;395
000622  61a1              STR      r1,[r4,#0x18]         ;395
000624  69a1              LDR      r1,[r4,#0x18]         ;396
000626  61a1              STR      r1,[r4,#0x18]         ;396
000628  6921              LDR      r1,[r4,#0x10]         ;397
00062a  4381              BICS     r1,r1,r0              ;397
00062c  6121              STR      r1,[r4,#0x10]         ;397
00062e  6921              LDR      r1,[r4,#0x10]         ;398
000630  6121              STR      r1,[r4,#0x10]         ;398
000632  6961              LDR      r1,[r4,#0x14]         ;402
000634  4381              BICS     r1,r1,r0              ;402
000636  6161              STR      r1,[r4,#0x14]         ;402
000638  6962              LDR      r2,[r4,#0x14]         ;403
00063a  21ff              MOVS     r1,#0xff              ;403
00063c  3101              ADDS     r1,#1                 ;403
00063e  430a              ORRS     r2,r2,r1              ;403
000640  6162              STR      r2,[r4,#0x14]         ;403
000642  69e2              LDR      r2,[r4,#0x1c]         ;404
000644  4382              BICS     r2,r2,r0              ;404
000646  61e2              STR      r2,[r4,#0x1c]         ;404
000648  69e0              LDR      r0,[r4,#0x1c]         ;405
00064a  4308              ORRS     r0,r0,r1              ;405
00064c  61e0              STR      r0,[r4,#0x1c]         ;405
00064e  6970              LDR      r0,[r6,#0x14]         ;406
000650  2105              MOVS     r1,#5                 ;406
000652  0549              LSLS     r1,r1,#21             ;406
000654  4308              ORRS     r0,r0,r1              ;406
000656  6170              STR      r0,[r6,#0x14]         ;406
000658  6077              STR      r7,[r6,#4]            ;407
00065a  2001              MOVS     r0,#1                 ;408
00065c  0540              LSLS     r0,r0,#21             ;408
00065e  60b0              STR      r0,[r6,#8]            ;408
000660  2001              MOVS     r0,#1                 ;410
000662  f7fffffe          BL       Delay
000666  4890              LDR      r0,|L1.2216|
000668  2103              MOVS     r1,#3                 ;413
00066a  6001              STR      r1,[r0,#0]            ;413
                  |L1.1644|
00066c  6801              LDR      r1,[r0,#0]            ;414
00066e  0609              LSLS     r1,r1,#24             ;414
000670  d5fc              BPL      |L1.1644|
000672  488d              LDR      r0,|L1.2216|
000674  6900              LDR      r0,[r0,#0x10]         ;416
000676  b287              UXTH     r7,r0                 ;416
000678  488c              LDR      r0,|L1.2220|
00067a  8087              STRH     r7,[r0,#4]            ;416
00067c  6961              LDR      r1,[r4,#0x14]         ;421
00067e  2007              MOVS     r0,#7                 ;421
000680  0200              LSLS     r0,r0,#8              ;421
000682  4381              BICS     r1,r1,r0              ;421
000684  6161              STR      r1,[r4,#0x14]         ;421
000686  6961              LDR      r1,[r4,#0x14]         ;422
000688  6161              STR      r1,[r4,#0x14]         ;422
00068a  69e1              LDR      r1,[r4,#0x1c]         ;423
00068c  4381              BICS     r1,r1,r0              ;423
00068e  61e1              STR      r1,[r4,#0x1c]         ;423
000690  69e1              LDR      r1,[r4,#0x1c]         ;424
000692  61e1              STR      r1,[r4,#0x1c]         ;424
000694  69e2              LDR      r2,[r4,#0x1c]         ;426
000696  2102              MOVS     r1,#2                 ;426
000698  438a              BICS     r2,r2,r1              ;426
00069a  61e2              STR      r2,[r4,#0x1c]         ;426
00069c  69a1              LDR      r1,[r4,#0x18]         ;429
00069e  4381              BICS     r1,r1,r0              ;429
0006a0  61a1              STR      r1,[r4,#0x18]         ;429
0006a2  69a1              LDR      r1,[r4,#0x18]         ;430
0006a4  22ff              MOVS     r2,#0xff              ;430
0006a6  3201              ADDS     r2,#1                 ;430
0006a8  4311              ORRS     r1,r1,r2              ;430
0006aa  61a1              STR      r1,[r4,#0x18]         ;430
0006ac  6921              LDR      r1,[r4,#0x10]         ;431
0006ae  4381              BICS     r1,r1,r0              ;431
0006b0  6121              STR      r1,[r4,#0x10]         ;431
0006b2  6920              LDR      r0,[r4,#0x10]         ;432
0006b4  4310              ORRS     r0,r0,r2              ;432
0006b6  6120              STR      r0,[r4,#0x10]         ;432
0006b8  6970              LDR      r0,[r6,#0x14]         ;433
0006ba  2105              MOVS     r1,#5                 ;433
0006bc  0509              LSLS     r1,r1,#20             ;433
0006be  4308              ORRS     r0,r0,r1              ;433
0006c0  6170              STR      r0,[r6,#0x14]         ;433
0006c2  0310              LSLS     r0,r2,#12             ;434
0006c4  6070              STR      r0,[r6,#4]            ;434
0006c6  0080              LSLS     r0,r0,#2              ;435
0006c8  60b0              STR      r0,[r6,#8]            ;435
0006ca  2001              MOVS     r0,#1                 ;437
0006cc  f7fffffe          BL       Delay
0006d0  4875              LDR      r0,|L1.2216|
0006d2  2104              MOVS     r1,#4                 ;440
0006d4  6001              STR      r1,[r0,#0]            ;440
                  |L1.1750|
0006d6  6801              LDR      r1,[r0,#0]            ;441
0006d8  0609              LSLS     r1,r1,#24             ;441
0006da  d5fc              BPL      |L1.1750|
0006dc  6900              LDR      r0,[r0,#0x10]         ;443
0006de  4e73              LDR      r6,|L1.2220|
0006e0  b284              UXTH     r4,r0                 ;443
0006e2  8074              STRH     r4,[r6,#2]            ;443
0006e4  7830              LDRB     r0,[r6,#0]            ;447  ; TFT_TS_Calibrated
0006e6  2800              CMP      r0,#0                 ;447
0006e8  d016              BEQ      |L1.1816|
0006ea  68f0              LDR      r0,[r6,#0xc]          ;448  ; TFT_TS_X_Offset
0006ec  4287              CMP      r7,r0                 ;448
0006ee  d202              BCS      |L1.1782|
0006f0  2000              MOVS     r0,#0                 ;449
0006f2  6028              STR      r0,[r5,#0]            ;449
0006f4  e004              B        |L1.1792|
                  |L1.1782|
0006f6  1a38              SUBS     r0,r7,r0              ;451
0006f8  68b1              LDR      r1,[r6,#8]            ;451  ; TFT_TS_X_Scale
0006fa  f7fffffe          BL       __aeabi_uidivmod
0006fe  6028              STR      r0,[r5,#0]            ;451
                  |L1.1792|
000700  6970              LDR      r0,[r6,#0x14]         ;453  ; TFT_TS_Y_Offset
000702  4284              CMP      r4,r0                 ;453
000704  d202              BCS      |L1.1804|
000706  2000              MOVS     r0,#0                 ;454
000708  6068              STR      r0,[r5,#4]            ;454
00070a  e007              B        |L1.1820|
                  |L1.1804|
00070c  1a20              SUBS     r0,r4,r0              ;456
00070e  6931              LDR      r1,[r6,#0x10]         ;456  ; TFT_TS_Y_Scale
000710  f7fffffe          BL       __aeabi_uidivmod
000714  6068              STR      r0,[r5,#4]            ;456
000716  e001              B        |L1.1820|
                  |L1.1816|
000718  602f              STR      r7,[r5,#0]            ;459
00071a  606c              STR      r4,[r5,#4]            ;460
                  |L1.1820|
00071c  2001              MOVS     r0,#1                 ;462
00071e  bdf8              POP      {r3-r7,pc}
;;;465    
                          ENDP

                  TFT_TS_Test PROC
;;;466    /* Test touchscreen by printing touch coordinates and drawing lines where touched. */
;;;467    void TFT_TS_Test(void) {
000720  b090              SUB      sp,sp,#0x40
;;;468    	PT_T p, bp, pp;
;;;469    	COLOR_T c;
;;;470    	char buffer[32];
;;;471    	
;;;472    	TFT_Erase();
000722  f7fffffe          BL       TFT_Erase
;;;473    
;;;474    	pp.X = 0;
000726  2400              MOVS     r4,#0
000728  940a              STR      r4,[sp,#0x28]
;;;475    	pp.Y = 0;
00072a  940b              STR      r4,[sp,#0x2c]
;;;476    	
;;;477    	bp.X = COL_TO_X(0);
00072c  940c              STR      r4,[sp,#0x30]
;;;478    	bp.Y = ROW_TO_Y(0);
00072e  940d              STR      r4,[sp,#0x34]
;;;479    	c.R = 255;
000730  20ff              MOVS     r0,#0xff
000732  a908              ADD      r1,sp,#0x20
000734  7108              STRB     r0,[r1,#4]
;;;480    	c.G = 100;
000736  2064              MOVS     r0,#0x64
000738  7148              STRB     r0,[r1,#5]
;;;481    	c.B = 100;
00073a  7188              STRB     r0,[r1,#6]
                  |L1.1852|
;;;482    	
;;;483    	while (1) {
;;;484    		if (TFT_TS_Read(&p)) {
00073c  a80e              ADD      r0,sp,#0x38
00073e  f7fffffe          BL       TFT_TS_Read
000742  2800              CMP      r0,#0
000744  d01e              BEQ      |L1.1924|
;;;485    			bp.X = 0;
000746  940c              STR      r4,[sp,#0x30]
;;;486    			sprintf(buffer, "X:%5d Y:%5d", p.X, p.Y);
000748  a159              ADR      r1,|L1.2224|
00074a  a801              ADD      r0,sp,#4
00074c  9b0f              LDR      r3,[sp,#0x3c]
00074e  9a0e              LDR      r2,[sp,#0x38]
000750  f7fffffe          BL       __2sprintf
;;;487    			TFT_Text_PrintStr(&bp, buffer);
000754  a901              ADD      r1,sp,#4
000756  a80c              ADD      r0,sp,#0x30
000758  f7fffffe          BL       TFT_Text_PrintStr
;;;488    
;;;489    #if 0
;;;490    			TFT_Plot_Pixel(&p, &c);
;;;491    			p.X++;
;;;492    			TFT_Plot_Pixel(&p, &c);
;;;493    			p.X-=2;
;;;494    			TFT_Plot_Pixel(&p, &c);
;;;495    			p.X++;
;;;496    			
;;;497    			p.Y++;
;;;498    			TFT_Plot_Pixel(&p, &c);
;;;499    			p.Y-=2;
;;;500    			TFT_Plot_Pixel(&p, &c);
;;;501    #else
;;;502    			if ((pp.X == 0) && (pp.Y == 0)) {
00075c  980a              LDR      r0,[sp,#0x28]
00075e  2800              CMP      r0,#0
000760  d106              BNE      |L1.1904|
000762  980b              LDR      r0,[sp,#0x2c]
000764  2800              CMP      r0,#0
000766  d103              BNE      |L1.1904|
;;;503    				pp = p;
000768  990f              LDR      r1,[sp,#0x3c]
00076a  980e              LDR      r0,[sp,#0x38]
00076c  910b              STR      r1,[sp,#0x2c]
00076e  900a              STR      r0,[sp,#0x28]
                  |L1.1904|
;;;504    			}
;;;505    			TFT_Draw_Line(&p, &pp, &c);
000770  aa09              ADD      r2,sp,#0x24
000772  a90a              ADD      r1,sp,#0x28
000774  a80e              ADD      r0,sp,#0x38
000776  f7fffffe          BL       TFT_Draw_Line
;;;506    			pp = p;
00077a  990f              LDR      r1,[sp,#0x3c]
00077c  980e              LDR      r0,[sp,#0x38]
00077e  910b              STR      r1,[sp,#0x2c]
000780  900a              STR      r0,[sp,#0x28]
000782  e7db              B        |L1.1852|
                  |L1.1924|
;;;507    #endif
;;;508    		} else {
;;;509    			pp.X = 0;
000784  940a              STR      r4,[sp,#0x28]
;;;510    			pp.Y = 0;
000786  940b              STR      r4,[sp,#0x2c]
;;;511    	
;;;512    			bp.X = 0;
000788  940c              STR      r4,[sp,#0x30]
;;;513    			TFT_Text_PrintStr(&bp, "Not Pressed    ");
00078a  a14c              ADR      r1,|L1.2236|
00078c  a80c              ADD      r0,sp,#0x30
00078e  f7fffffe          BL       TFT_Text_PrintStr
000792  e7d3              B        |L1.1852|
;;;514    		}
;;;515    	}
;;;516    }
;;;517    
                          ENDP

                  TFT_TS_Calibrate PROC
;;;518    /* Calibrate touchscreen. */
;;;519    void TFT_TS_Calibrate(void) {
000794  b5f0              PUSH     {r4-r7,lr}
000796  b087              SUB      sp,sp,#0x1c
;;;520    	PT_T p, bp, p_bound;
;;;521    	uint32_t i;
;;;522    	
;;;523    	bp.X = COL_TO_X(0);
000798  2500              MOVS     r5,#0
00079a  9503              STR      r5,[sp,#0xc]
;;;524    	bp.Y = ROW_TO_Y(3);
00079c  4e4b              LDR      r6,|L1.2252|
00079e  7830              LDRB     r0,[r6,#0]  ; G_TFT_char_height
0007a0  0041              LSLS     r1,r0,#1
0007a2  1840              ADDS     r0,r0,r1
0007a4  9004              STR      r0,[sp,#0x10]
;;;525    
;;;526    	TFT_Text_PrintStr(&bp, "Calibrate TS");
0007a6  a14a              ADR      r1,|L1.2256|
0007a8  a803              ADD      r0,sp,#0xc
0007aa  f7fffffe          BL       TFT_Text_PrintStr
;;;527    	bp.X = COL_TO_X(0);
0007ae  9503              STR      r5,[sp,#0xc]
;;;528    	bp.Y = ROW_TO_Y(4);
0007b0  7830              LDRB     r0,[r6,#0]  ; G_TFT_char_height
0007b2  0080              LSLS     r0,r0,#2
0007b4  9004              STR      r0,[sp,#0x10]
;;;529    	TFT_Text_PrintStr(&bp, "by pressing each +");
0007b6  a14a              ADR      r1,|L1.2272|
0007b8  a803              ADD      r0,sp,#0xc
0007ba  f7fffffe          BL       TFT_Text_PrintStr
;;;530    	
;;;531    	bp.X = COL_TO_X(0);
0007be  9503              STR      r5,[sp,#0xc]
;;;532    	bp.Y = ROW_TO_Y(0);
0007c0  9504              STR      r5,[sp,#0x10]
;;;533    	TFT_Text_PrintStr(&bp, "+");
0007c2  a14c              ADR      r1,|L1.2292|
0007c4  a803              ADD      r0,sp,#0xc
0007c6  f7fffffe          BL       TFT_Text_PrintStr
;;;534    	
;;;535    	p_bound.X = 0xffff;
0007ca  484b              LDR      r0,|L1.2296|
0007cc  9001              STR      r0,[sp,#4]
;;;536    	p_bound.Y = 0xffff;
0007ce  9002              STR      r0,[sp,#8]
;;;537    	for (i=0; i<TS_CALIB_SAMPLES; i++){
0007d0  2400              MOVS     r4,#0
                  |L1.2002|
;;;538    		while (!TFT_TS_Read(&p))
0007d2  a805              ADD      r0,sp,#0x14
0007d4  f7fffffe          BL       TFT_TS_Read
0007d8  2800              CMP      r0,#0
0007da  d0fa              BEQ      |L1.2002|
;;;539    			;
;;;540    		if (p.X < p_bound.X)
0007dc  9901              LDR      r1,[sp,#4]
0007de  9805              LDR      r0,[sp,#0x14]
0007e0  4288              CMP      r0,r1
0007e2  d201              BCS      |L1.2024|
;;;541    			p_bound.X = p.X;
0007e4  9805              LDR      r0,[sp,#0x14]
0007e6  9001              STR      r0,[sp,#4]
                  |L1.2024|
;;;542    		if (p.Y < p_bound.Y)
0007e8  9902              LDR      r1,[sp,#8]
0007ea  9806              LDR      r0,[sp,#0x18]
0007ec  4288              CMP      r0,r1
0007ee  d201              BCS      |L1.2036|
;;;543    			p_bound.Y = p.Y;
0007f0  9806              LDR      r0,[sp,#0x18]
0007f2  9002              STR      r0,[sp,#8]
                  |L1.2036|
0007f4  1c64              ADDS     r4,r4,#1              ;537
0007f6  2c0a              CMP      r4,#0xa               ;537
0007f8  d3eb              BCC      |L1.2002|
;;;544    	}
;;;545    	
;;;546    	TFT_TS_X_Offset = p_bound.X;
0007fa  4f2c              LDR      r7,|L1.2220|
0007fc  9801              LDR      r0,[sp,#4]
0007fe  60f8              STR      r0,[r7,#0xc]  ; TFT_TS_X_Offset
;;;547    	TFT_TS_Y_Offset = p_bound.Y;
000800  9802              LDR      r0,[sp,#8]
000802  6178              STR      r0,[r7,#0x14]  ; TFT_TS_Y_Offset
;;;548    	
;;;549    	TS_Min = p_bound;
000804  4638              MOV      r0,r7
000806  9a02              LDR      r2,[sp,#8]
000808  9901              LDR      r1,[sp,#4]
00080a  61c2              STR      r2,[r0,#0x1c]  ; TS_Min
00080c  6181              STR      r1,[r0,#0x18]  ; TS_Min
                  |L1.2062|
;;;550    	
;;;551    	// Wait for release
;;;552    	while (TFT_TS_Read(&p))
00080e  a805              ADD      r0,sp,#0x14
000810  f7fffffe          BL       TFT_TS_Read
000814  2800              CMP      r0,#0
000816  d1fa              BNE      |L1.2062|
;;;553    		;
;;;554    	
;;;555    	TFT_Erase();
000818  f7fffffe          BL       TFT_Erase
;;;556    
;;;557    	/*
;;;558    	bp.X = COL_TO_X(TFT_MAX_COLS-1);
;;;559    	bp.Y = ROW_TO_Y(TFT_MAX_ROWS-1);
;;;560    	*/
;;;561    	bp.X = TFT_WIDTH - CHAR_WIDTH - 1;
00081c  4837              LDR      r0,|L1.2300|
00081e  21ef              MOVS     r1,#0xef
000820  7800              LDRB     r0,[r0,#0]  ; G_TFT_char_width
000822  1a08              SUBS     r0,r1,r0
000824  9003              STR      r0,[sp,#0xc]
;;;562    	bp.Y = TFT_HEIGHT - CHAR_HEIGHT - 1;
000826  7830              LDRB     r0,[r6,#0]  ; G_TFT_char_height
000828  21ff              MOVS     r1,#0xff
00082a  3140              ADDS     r1,r1,#0x40
00082c  1a08              SUBS     r0,r1,r0
00082e  9004              STR      r0,[sp,#0x10]
;;;563    	TFT_Text_PrintStr(&bp, "+");
000830  a130              ADR      r1,|L1.2292|
000832  a803              ADD      r0,sp,#0xc
000834  f7fffffe          BL       TFT_Text_PrintStr
;;;564    
;;;565    	p_bound.X = 0;
000838  9501              STR      r5,[sp,#4]
;;;566    	p_bound.Y = 0;
00083a  9502              STR      r5,[sp,#8]
;;;567    	for (i=0; i<TS_CALIB_SAMPLES; i++){
00083c  2400              MOVS     r4,#0
                  |L1.2110|
;;;568    		while (!TFT_TS_Read(&p))
00083e  a805              ADD      r0,sp,#0x14
000840  f7fffffe          BL       TFT_TS_Read
000844  2800              CMP      r0,#0
000846  d0fa              BEQ      |L1.2110|
;;;569    			;
;;;570    		if (p.X > p_bound.X)
000848  9901              LDR      r1,[sp,#4]
00084a  9805              LDR      r0,[sp,#0x14]
00084c  4288              CMP      r0,r1
00084e  d901              BLS      |L1.2132|
;;;571    			p_bound.X = p.X;
000850  9805              LDR      r0,[sp,#0x14]
000852  9001              STR      r0,[sp,#4]
                  |L1.2132|
;;;572    		if (p.Y > p_bound.Y)
000854  9902              LDR      r1,[sp,#8]
000856  9806              LDR      r0,[sp,#0x18]
000858  4288              CMP      r0,r1
00085a  d901              BLS      |L1.2144|
;;;573    			p_bound.Y = p.Y;
00085c  9806              LDR      r0,[sp,#0x18]
00085e  9002              STR      r0,[sp,#8]
                  |L1.2144|
000860  1c64              ADDS     r4,r4,#1              ;567
000862  2c0a              CMP      r4,#0xa               ;567
000864  d3eb              BCC      |L1.2110|
;;;574    	}
;;;575    	
;;;576    	TS_Max = p_bound;
000866  4811              LDR      r0,|L1.2220|
000868  9a02              LDR      r2,[sp,#8]
00086a  9901              LDR      r1,[sp,#4]
00086c  6242              STR      r2,[r0,#0x24]  ; TS_Max
00086e  6201              STR      r1,[r0,#0x20]  ; TS_Max
;;;577    	
;;;578    	TFT_TS_X_Scale = (p_bound.X-TFT_TS_X_Offset)/TFT_WIDTH;
000870  9801              LDR      r0,[sp,#4]
000872  68f9              LDR      r1,[r7,#0xc]  ; TFT_TS_X_Offset
000874  1a40              SUBS     r0,r0,r1
000876  21f0              MOVS     r1,#0xf0
000878  f7fffffe          BL       __aeabi_uidivmod
00087c  60b8              STR      r0,[r7,#8]  ; TFT_TS_X_Scale
;;;579    	TFT_TS_Y_Scale = (p_bound.Y-TFT_TS_Y_Offset)/TFT_HEIGHT;
00087e  9802              LDR      r0,[sp,#8]
000880  6979              LDR      r1,[r7,#0x14]  ; TFT_TS_Y_Offset
000882  1a40              SUBS     r0,r0,r1
000884  21ff              MOVS     r1,#0xff
000886  3141              ADDS     r1,r1,#0x41
000888  f7fffffe          BL       __aeabi_uidivmod
00088c  6138              STR      r0,[r7,#0x10]  ; TFT_TS_Y_Scale
                  |L1.2190|
;;;580    
;;;581    	// Wait for release
;;;582    	while (TFT_TS_Read(&p))
00088e  a805              ADD      r0,sp,#0x14
000890  f7fffffe          BL       TFT_TS_Read
000894  2800              CMP      r0,#0
000896  d1fa              BNE      |L1.2190|
;;;583    		;
;;;584    	
;;;585    	TFT_TS_Calibrated = 1;
000898  2001              MOVS     r0,#1
00089a  7038              STRB     r0,[r7,#0]
;;;586    
;;;587    }
00089c  b007              ADD      sp,sp,#0x1c
00089e  bdf0              POP      {r4-r7,pc}
                          ENDP

                  |L1.2208|
                          DCD      0x4004d040
                  |L1.2212|
                          DCD      0x400ff100
                  |L1.2216|
                          DCD      0x4003b000
                  |L1.2220|
                          DCD      ||.data||
                  |L1.2224|
0008b0  583a2535          DCB      "X:%5d Y:%5d",0
0008b4  6420593a
0008b8  25356400
                  |L1.2236|
0008bc  4e6f7420          DCB      "Not Pressed    ",0
0008c0  50726573
0008c4  73656420
0008c8  20202000
                  |L1.2252|
                          DCD      G_TFT_char_height
                  |L1.2256|
0008d0  43616c69          DCB      "Calibrate TS",0
0008d4  62726174
0008d8  65205453
0008dc  00      
0008dd  00                DCB      0
0008de  00                DCB      0
0008df  00                DCB      0
                  |L1.2272|
0008e0  62792070          DCB      "by pressing each +",0
0008e4  72657373
0008e8  696e6720
0008ec  65616368
0008f0  202b00  
0008f3  00                DCB      0
                  |L1.2292|
0008f4  2b00              DCB      "+",0
0008f6  00                DCB      0
0008f7  00                DCB      0
                  |L1.2296|
                          DCD      0x0000ffff
                  |L1.2300|
                          DCD      G_TFT_char_width

                          AREA ||.data||, DATA, ALIGN=2

                  TFT_TS_Calibrated
000000  0100              DCB      0x01,0x00
                  ||xl||
000002  0000              DCW      0x0000
                  ||yu||
000004  0000              DCW      0x0000
000006  0000              DCB      0x00,0x00
                  TFT_TS_X_Scale
                          DCD      0x000000d1
                  TFT_TS_X_Offset
                          DCD      0x000019f8
                  TFT_TS_Y_Scale
                          DCD      0x0000009f
                  TFT_TS_Y_Offset
                          DCD      0x00001a21
                  TS_Min
                          %        8
                  TS_Max
                          %        8

;*** Start embedded assembler ***

#line 1 "src\\TFT_lcd.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_TFT_lcd_c_72135517____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_TFT_lcd_c_72135517____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_TFT_lcd_c_72135517____REVSH|
#line 144
|__asm___9_TFT_lcd_c_72135517____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
