; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\tft_graphics.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\tft_graphics.d --cpu=Cortex-M0+ --fpmode=fast --apcs=interwork -O1 -I.\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Freescale\Kinetis -D__RTX -D__MICROLIB -DMKL25Z128xxx4 --omf_browse=.\obj\tft_graphics.crf src\TFT_graphics.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  TFT_Draw_Line PROC
;;;49     
;;;50     void TFT_Draw_Line(PT_T * p1, PT_T * p2, COLOR_T * color)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;51     {
000002  b08a              SUB      sp,sp,#0x28
;;;52     	PT_T p;
;;;53       int Temp, AdjUp, AdjDown, ErrorTerm, XAdvance, XDelta, YDelta;	 
;;;54       int WholeStep, InitialPixelCount, FinalPixelCount, i,j, RunLength;
;;;55       int XStart;
;;;56       int YStart;
;;;57       int XEnd;
;;;58       int YEnd;
;;;59     
;;;60       XStart = p1->X;
000004  6802              LDR      r2,[r0,#0]
;;;61       YStart = p1->Y;
000006  6840              LDR      r0,[r0,#4]
;;;62       XEnd = p2->X;
000008  680b              LDR      r3,[r1,#0]
;;;63       YEnd = p2->Y;
00000a  6849              LDR      r1,[r1,#4]
;;;64     
;;;65       /* We'll always draw top to bottom, to reduce the number of cases we have to
;;;66          ** handle, and to make lines between the same endpoints draw the same pixels
;;;67       */
;;;68       if (YStart > YEnd)	
00000c  4288              CMP      r0,r1
00000e  dd05              BLE      |L1.28|
;;;69         {
;;;70           Temp = YStart;
000010  4604              MOV      r4,r0
;;;71           YStart = YEnd;
000012  4608              MOV      r0,r1
;;;72           YEnd = Temp;
000014  4621              MOV      r1,r4
;;;73           Temp = XStart;
000016  4614              MOV      r4,r2
;;;74           XStart = XEnd;
000018  461a              MOV      r2,r3
;;;75           XEnd = Temp;
00001a  4623              MOV      r3,r4
                  |L1.28|
;;;76         }
;;;77     
;;;78       /* Figure out whethere we're going left or right, and how far we're going
;;;79       ** horizontally  */
;;;80       XDelta = XEnd - XStart;
00001c  1a9d              SUBS     r5,r3,r2
;;;81       if (XDelta < 0) {
00001e  2d00              CMP      r5,#0
000020  da03              BGE      |L1.42|
;;;82           XAdvance = -1;
000022  2400              MOVS     r4,#0
000024  43e4              MVNS     r4,r4
;;;83           XDelta = -XDelta;
000026  426d              RSBS     r5,r5,#0
000028  e000              B        |L1.44|
                  |L1.42|
;;;84     	} else {
;;;85           XAdvance = 1;
00002a  2401              MOVS     r4,#1
                  |L1.44|
;;;86        }
;;;87     
;;;88       /* Figure out how far we're going vertically */
;;;89       YDelta = YEnd - YStart;
00002c  1a0e              SUBS     r6,r1,r0
;;;90     
;;;91       /* Special-case horizontal, vertical, and diagonal lines, for speed and
;;;92       ** to avoid nasty boundary conditions and division by 0
;;;93       */
;;;94     
;;;95     	p.X = XStart;
00002e  9206              STR      r2,[sp,#0x18]
;;;96     	p.Y = YStart;
000030  9007              STR      r0,[sp,#0x1c]
;;;97     	 
;;;98       /* Vertical Line case */
;;;99       if (XDelta == 0) {
000032  2d00              CMP      r5,#0
000034  d005              BEQ      |L1.66|
;;;100        /* Vertical line */
;;;101        for (i = 0; i <= YDelta; i++) {
;;;102    				p.Y++;
;;;103    				TFT_Plot_Pixel(&p, color);
;;;104         }
;;;105        return;
;;;106      }
;;;107      
;;;108      /* Horizontal Line Case */
;;;109      if (YDelta == 0) {
000036  2e00              CMP      r6,#0
000038  d011              BEQ      |L1.94|
;;;110        /* Horizontal line */
;;;111        for (i = 0; i <= XDelta; i++) {
;;;112    				TFT_Plot_Pixel(&p, color);
;;;113    				p.X += XAdvance;
;;;114        }  
;;;115        return;
;;;116      }
;;;117       
;;;118      /* Diagonal Case */
;;;119      if (XDelta == YDelta) {
00003a  42b5              CMP      r5,r6
00003c  d12a              BNE      |L1.148|
;;;120        /* Diagonal line */
;;;121        for (i = 0; i <= XDelta; i++)
00003e  2600              MOVS     r6,#0
000040  e025              B        |L1.142|
                  |L1.66|
000042  2400              MOVS     r4,#0                 ;101
000044  e007              B        |L1.86|
                  |L1.70|
000046  9807              LDR      r0,[sp,#0x1c]         ;102
000048  1c40              ADDS     r0,r0,#1              ;102
00004a  9007              STR      r0,[sp,#0x1c]         ;102
00004c  a806              ADD      r0,sp,#0x18           ;103
00004e  990c              LDR      r1,[sp,#0x30]         ;103
000050  f7fffffe          BL       TFT_Plot_Pixel
000054  1c64              ADDS     r4,r4,#1              ;101
                  |L1.86|
000056  42b4              CMP      r4,r6                 ;101
000058  ddf5              BLE      |L1.70|
                  |L1.90|
;;;122          {
;;;123    				TFT_Plot_Pixel(&p, color);
;;;124    				p.X += XAdvance;
;;;125    				p.Y++;
;;;126          }
;;;127        return;
;;;128      }
;;;129       
;;;130       
;;;131      /* Determine whether the line is X or Y major, and handle accordingly */
;;;132      if (XDelta >= YDelta) {
;;;133        /* X major line */
;;;134        /* Minimum # of pixels in a run in this line */
;;;135        WholeStep = XDelta / YDelta;													/* DIV */
;;;136        
;;;137        /* Error term adjust eacn time Y steps by 1; used to tel when one
;;;138        ** extra pixel should be drawn as part of a run, to account for
;;;139        ** fractional steps along the X axis per 1-pixel steps along Y
;;;140        */
;;;141        AdjUp = (XDelta % YDelta) * 2;													/* DIV */
;;;142        
;;;143        /* Error term adjust when the error term turns over, used to factor
;;;144        ** out the X step made at that time
;;;145        */
;;;146        AdjDown = YDelta * 2;
;;;147        
;;;148        /* Initial error term; reflects an initial step of 0.5 along the Y axis 
;;;149         */
;;;150        ErrorTerm = (XDelta % YDelta) - (YDelta * 2);											/* DIV */
;;;151        
;;;152        /* The initial and last runs are partial, because Y advancse only 0.5
;;;153        ** for these runs, rather than 1.  Divide one full run, plus the
;;;154        ** initial pixel, between the initial and last runs.
;;;155        */
;;;156        InitialPixelCount = (WholeStep / 2) + 1;
;;;157        FinalPixelCount = InitialPixelCount;
;;;158        
;;;159        /* If the basic run length is even and there's no fractional
;;;160        ** advance, we have one pixel that could go to either the initial
;;;161        ** or last partial run, which we'll arbitrarily allocate to the
;;;162        ** last run
;;;163        */
;;;164        if ((AdjUp == 0) && ((WholeStep & 0x01) == 0))
;;;165          InitialPixelCount--;
;;;166        
;;;167        /* If there's an odd number of pixels per run, we have 1 pixel that can't
;;;168           ** be allocated to either the initial run or last partial run, so we'll add 0.5
;;;169           ** to error term so this pixel will be handled by the normal full-run loop
;;;170        */
;;;171        if ((WholeStep & 0x01) != 0)
;;;172          ErrorTerm += YDelta;
;;;173        
;;;174        /* Draw the first, partial run of pixels */
;;;175    #ifdef USE_DRAW_LINE_FUNC
;;;176        Line_DrawHorizontalRun(pThis, &XStart, &YStart, XAdvance, 
;;;177    			   InitialPixelCount, pThis->PenColor);
;;;178    #else
;;;179        for (j = 0; j < InitialPixelCount; j++)
;;;180          {
;;;181    				TFT_Plot_Pixel(&p, color);
;;;182    				p.X += XAdvance;
;;;183          }
;;;184        p.Y++;
;;;185    #endif
;;;186        
;;;187        /* Draw all full runs */
;;;188        for (i = 0; i < (YDelta - 1); i++)
;;;189          {
;;;190    				RunLength = WholeStep; /* run is at least this long */
;;;191    				/* Advance the error term and add an extra pixel if the error
;;;192    				** term so indicates
;;;193    				*/
;;;194    				if ((ErrorTerm += AdjUp) > 0)
;;;195    					{
;;;196    						RunLength++;
;;;197    						ErrorTerm -= AdjDown; /* reset the error term */
;;;198    					}
;;;199    	
;;;200    				/* Draw this scan line's run */
;;;201    #ifdef USE_DRAW_LINE_FUNC
;;;202    				Line_DrawHorizontalRun(pThis, &XStart, &YStart, XAdvance, RunLength, 
;;;203    			       pThis->PenColor);
;;;204    #else
;;;205    				for (j = 0; j < RunLength; j++) {
;;;206    					TFT_Plot_Pixel(&p, color);
;;;207    					p.X += XAdvance;
;;;208    				}
;;;209    				p.Y++;
;;;210    #endif
;;;211    				}
;;;212        
;;;213        /* Draw the final run of pixels */
;;;214    #ifdef USE_DRAW_LINE_FUNC
;;;215        Line_DrawHorizontalRun(pThis, &XStart, &YStart, XAdvance, 
;;;216    			   FinalPixelCount, pThis->PenColor);
;;;217    #else
;;;218        for (j = 0; j < FinalPixelCount; j++)
;;;219          {
;;;220    				TFT_Plot_Pixel(&p, color);
;;;221    				p.X += XAdvance;
;;;222          }
;;;223        p.Y++;
;;;224    #endif
;;;225        
;;;226        return;
;;;227      } else {
;;;228        /* Y major line */
;;;229        
;;;230        /* Minimum # of pixels in a run in this line */
;;;231        WholeStep = YDelta / XDelta;										/* DIV */
;;;232        
;;;233        /* Error term adjust each time X steps by 1; used to tell when 1 extra
;;;234        ** pixel should be drawn as part of a run, to account for
;;;235        ** fractional steps along the Y axis per 1-pixel steps along X
;;;236        */
;;;237        AdjUp = (YDelta % XDelta) * 2;										/* DIV */
;;;238        
;;;239        /* Error term adjust when the error term turns over, used to factor
;;;240        ** out the Y step made at that time
;;;241        */
;;;242        AdjDown = XDelta * 2;
;;;243        
;;;244        /* Initial error term; reflects initial step of 0.5 along the X axis */
;;;245        ErrorTerm = (YDelta % XDelta) - (XDelta * 2);								/* DIV */
;;;246        
;;;247        /* The initial and last runs are partial, because X advances only 0.5
;;;248        ** for these runs, rather than 1.  Divide ony full run, plus the
;;;249        ** initial pixel, between the initial and last runs
;;;250        */
;;;251        
;;;252        InitialPixelCount = (WholeStep / 2) + 1;
;;;253        FinalPixelCount = InitialPixelCount;
;;;254        
;;;255        /* If the basic run length is even and there's no fractional
;;;256          ** advance, we have one pixel that could go to either the initial
;;;257          ** or last partial run, which we'll arbitrarily allocate to the
;;;258          ** last run
;;;259          */
;;;260          if ((AdjUp == 0) && ((WholeStep & 0x01) == 0))
;;;261    	{
;;;262    	  InitialPixelCount--;
;;;263    	}
;;;264          
;;;265          /* If there's an odd number of pixels per run, we have 1 pixel that 
;;;266    	 can't
;;;267    	 ** be allocated to either the initial run or last partial run, so we'll 
;;;268    	 add 0.5
;;;269    	 ** to error term so this pixel will be handled by the normal full-run 
;;;270    	 loop
;;;271          */
;;;272          if ((WholeStep & 0x01) != 0)
;;;273    	{
;;;274    	  ErrorTerm += XDelta;
;;;275    	}
;;;276          
;;;277          /* Draw the first, partial run of pixels */
;;;278    #ifdef USE_DRAW_LINE_FUNC
;;;279          Line_DrawVerticalRun(pThis, &XStart, &YStart, XAdvance, 
;;;280    			   InitialPixelCount, pThis->PenColor);
;;;281    #else
;;;282          for (j = 0; j < InitialPixelCount; j++) {
;;;283    				TFT_Plot_Pixel(&p, color);
;;;284    				p.Y++;
;;;285    			}
;;;286          /* Update x,y position */
;;;287          p.X += XAdvance;
;;;288    #endif
;;;289          
;;;290          /* Draw all full runs */
;;;291          for (i = 0; i < (XDelta - 1); i++) {
;;;292    				RunLength = WholeStep; /* run is at least this long */
;;;293    	  
;;;294    				/* Advance the error term and add an extra pixel if the error
;;;295    				** term so indicates
;;;296    				*/
;;;297    	  if ((ErrorTerm += AdjUp) > 0)
;;;298    	    {
;;;299    	      RunLength++;
;;;300    	      ErrorTerm -= AdjDown; /* reset the error term */
;;;301    	    }
;;;302    	  
;;;303    	  /* Draw this scan line's run */
;;;304    #ifdef USE_DRAW_LINE_FUNC
;;;305    	  Line_DrawVerticalRun(pThis, &XStart, &YStart, XAdvance, RunLength, 
;;;306    			       pThis->PenColor);
;;;307    #else
;;;308    	  for (j = 0; j < RunLength; j++)
;;;309    	    {
;;;310    				TFT_Plot_Pixel(&p, color);
;;;311    	      p.Y++;
;;;312    	    }
;;;313    	  /* Update x,y position */
;;;314    	  p.X += XAdvance;
;;;315    #endif
;;;316    	  
;;;317    	}
;;;318          
;;;319          /* Draw the final run of pixels */
;;;320    #ifdef USE_DRAW_LINE_FUNC
;;;321          Line_DrawVerticalRun(pThis, &XStart, &YStart, XAdvance, 
;;;322    			   FinalPixelCount, pThis->PenColor);
;;;323    #else
;;;324          for (j= 0; j < FinalPixelCount; j++)
;;;325    			{
;;;326    				TFT_Plot_Pixel(&p, color);
;;;327    				p.Y++;
;;;328    			}
;;;329          /* Update x,y position */
;;;330          p.X += XAdvance;
;;;331    #endif    
;;;332          return;
;;;333        }
;;;334    }
00005a  b00d              ADD      sp,sp,#0x34
00005c  bdf0              POP      {r4-r7,pc}
                  |L1.94|
00005e  2600              MOVS     r6,#0                 ;111
000060  e007              B        |L1.114|
                  |L1.98|
000062  a806              ADD      r0,sp,#0x18           ;112
000064  990c              LDR      r1,[sp,#0x30]         ;112
000066  f7fffffe          BL       TFT_Plot_Pixel
00006a  9806              LDR      r0,[sp,#0x18]         ;113
00006c  1900              ADDS     r0,r0,r4              ;113
00006e  9006              STR      r0,[sp,#0x18]         ;113
000070  1c76              ADDS     r6,r6,#1              ;111
                  |L1.114|
000072  42ae              CMP      r6,r5                 ;111
000074  ddf5              BLE      |L1.98|
000076  e7f0              B        |L1.90|
                  |L1.120|
000078  a806              ADD      r0,sp,#0x18           ;123
00007a  990c              LDR      r1,[sp,#0x30]         ;123
00007c  f7fffffe          BL       TFT_Plot_Pixel
000080  9806              LDR      r0,[sp,#0x18]         ;124
000082  1900              ADDS     r0,r0,r4              ;124
000084  9006              STR      r0,[sp,#0x18]         ;124
000086  9807              LDR      r0,[sp,#0x1c]         ;125
000088  1c40              ADDS     r0,r0,#1              ;125
00008a  9007              STR      r0,[sp,#0x1c]         ;125
00008c  1c76              ADDS     r6,r6,#1              ;121
                  |L1.142|
00008e  42ae              CMP      r6,r5                 ;121
000090  ddf2              BLE      |L1.120|
000092  e7e2              B        |L1.90|
                  |L1.148|
000094  42b5              CMP      r5,r6                 ;132
000096  db5f              BLT      |L1.344|
000098  4631              MOV      r1,r6                 ;135
00009a  4628              MOV      r0,r5                 ;135
00009c  f7fffffe          BL       __aeabi_idivmod
0000a0  9003              STR      r0,[sp,#0xc]          ;135
0000a2  0048              LSLS     r0,r1,#1              ;141
0000a4  9005              STR      r0,[sp,#0x14]         ;141
0000a6  0070              LSLS     r0,r6,#1              ;146
0000a8  9004              STR      r0,[sp,#0x10]         ;146
0000aa  1a0d              SUBS     r5,r1,r0              ;150
0000ac  9803              LDR      r0,[sp,#0xc]          ;156
0000ae  0fc1              LSRS     r1,r0,#31             ;156
0000b0  1808              ADDS     r0,r1,r0              ;156
0000b2  1040              ASRS     r0,r0,#1              ;156
0000b4  1c40              ADDS     r0,r0,#1              ;156
0000b6  9002              STR      r0,[sp,#8]            ;156
0000b8  9802              LDR      r0,[sp,#8]            ;157
0000ba  9001              STR      r0,[sp,#4]            ;157
0000bc  9803              LDR      r0,[sp,#0xc]          ;164
0000be  07c1              LSLS     r1,r0,#31             ;164
0000c0  9805              LDR      r0,[sp,#0x14]         ;164
0000c2  0fc9              LSRS     r1,r1,#31             ;164
0000c4  4301              ORRS     r1,r1,r0              ;164
0000c6  d102              BNE      |L1.206|
0000c8  9802              LDR      r0,[sp,#8]            ;165
0000ca  1e40              SUBS     r0,r0,#1              ;165
0000cc  9002              STR      r0,[sp,#8]            ;165
                  |L1.206|
0000ce  9803              LDR      r0,[sp,#0xc]          ;171
0000d0  07c0              LSLS     r0,r0,#31             ;171
0000d2  d000              BEQ      |L1.214|
0000d4  19ad              ADDS     r5,r5,r6              ;172
                  |L1.214|
0000d6  2700              MOVS     r7,#0                 ;179
0000d8  e007              B        |L1.234|
                  |L1.218|
0000da  a806              ADD      r0,sp,#0x18           ;181
0000dc  990c              LDR      r1,[sp,#0x30]         ;181
0000de  f7fffffe          BL       TFT_Plot_Pixel
0000e2  9806              LDR      r0,[sp,#0x18]         ;182
0000e4  1900              ADDS     r0,r0,r4              ;182
0000e6  9006              STR      r0,[sp,#0x18]         ;182
0000e8  1c7f              ADDS     r7,r7,#1              ;179
                  |L1.234|
0000ea  9802              LDR      r0,[sp,#8]            ;179
0000ec  4287              CMP      r7,r0                 ;179
0000ee  dbf4              BLT      |L1.218|
0000f0  9807              LDR      r0,[sp,#0x1c]         ;184
0000f2  1c40              ADDS     r0,r0,#1              ;184
0000f4  9007              STR      r0,[sp,#0x1c]         ;184
0000f6  2000              MOVS     r0,#0                 ;188
0000f8  9000              STR      r0,[sp,#0]            ;188
0000fa  1e76              SUBS     r6,r6,#1              ;188
0000fc  9609              STR      r6,[sp,#0x24]         ;188
0000fe  e019              B        |L1.308|
                  |L1.256|
000100  9f03              LDR      r7,[sp,#0xc]          ;190
000102  9805              LDR      r0,[sp,#0x14]         ;194
000104  182d              ADDS     r5,r5,r0              ;194
000106  2d00              CMP      r5,#0                 ;194
000108  dd02              BLE      |L1.272|
00010a  1c7f              ADDS     r7,r7,#1              ;196
00010c  9804              LDR      r0,[sp,#0x10]         ;197
00010e  1a2d              SUBS     r5,r5,r0              ;197
                  |L1.272|
000110  2600              MOVS     r6,#0                 ;205
000112  e007              B        |L1.292|
                  |L1.276|
000114  a806              ADD      r0,sp,#0x18           ;206
000116  990c              LDR      r1,[sp,#0x30]         ;206
000118  f7fffffe          BL       TFT_Plot_Pixel
00011c  9806              LDR      r0,[sp,#0x18]         ;207
00011e  1900              ADDS     r0,r0,r4              ;207
000120  9006              STR      r0,[sp,#0x18]         ;207
000122  1c76              ADDS     r6,r6,#1              ;205
                  |L1.292|
000124  42be              CMP      r6,r7                 ;205
000126  dbf5              BLT      |L1.276|
000128  9807              LDR      r0,[sp,#0x1c]         ;209
00012a  1c40              ADDS     r0,r0,#1              ;209
00012c  9007              STR      r0,[sp,#0x1c]         ;209
00012e  9800              LDR      r0,[sp,#0]            ;188
000130  1c40              ADDS     r0,r0,#1              ;188
000132  9000              STR      r0,[sp,#0]            ;188
                  |L1.308|
000134  9909              LDR      r1,[sp,#0x24]         ;188
000136  9800              LDR      r0,[sp,#0]            ;188
000138  4288              CMP      r0,r1                 ;188
00013a  dbe1              BLT      |L1.256|
00013c  2500              MOVS     r5,#0                 ;218
00013e  e007              B        |L1.336|
                  |L1.320|
000140  a806              ADD      r0,sp,#0x18           ;220
000142  990c              LDR      r1,[sp,#0x30]         ;220
000144  f7fffffe          BL       TFT_Plot_Pixel
000148  9806              LDR      r0,[sp,#0x18]         ;221
00014a  1900              ADDS     r0,r0,r4              ;221
00014c  9006              STR      r0,[sp,#0x18]         ;221
00014e  1c6d              ADDS     r5,r5,#1              ;218
                  |L1.336|
000150  9801              LDR      r0,[sp,#4]            ;218
000152  4285              CMP      r5,r0                 ;218
000154  dbf4              BLT      |L1.320|
000156  e780              B        |L1.90|
                  |L1.344|
000158  4629              MOV      r1,r5                 ;231
00015a  4630              MOV      r0,r6                 ;231
00015c  f7fffffe          BL       __aeabi_idivmod
000160  9003              STR      r0,[sp,#0xc]          ;231
000162  0048              LSLS     r0,r1,#1              ;237
000164  9005              STR      r0,[sp,#0x14]         ;237
000166  0068              LSLS     r0,r5,#1              ;242
000168  9004              STR      r0,[sp,#0x10]         ;242
00016a  1a0e              SUBS     r6,r1,r0              ;245
00016c  9803              LDR      r0,[sp,#0xc]          ;252
00016e  0fc1              LSRS     r1,r0,#31             ;252
000170  1808              ADDS     r0,r1,r0              ;252
000172  1040              ASRS     r0,r0,#1              ;252
000174  1c40              ADDS     r0,r0,#1              ;252
000176  9002              STR      r0,[sp,#8]            ;252
000178  9802              LDR      r0,[sp,#8]            ;253
00017a  9001              STR      r0,[sp,#4]            ;253
00017c  9803              LDR      r0,[sp,#0xc]          ;260
00017e  07c1              LSLS     r1,r0,#31             ;260
000180  9805              LDR      r0,[sp,#0x14]         ;260
000182  0fc9              LSRS     r1,r1,#31             ;260
000184  4301              ORRS     r1,r1,r0              ;260
000186  d102              BNE      |L1.398|
000188  9802              LDR      r0,[sp,#8]            ;262
00018a  1e40              SUBS     r0,r0,#1              ;262
00018c  9002              STR      r0,[sp,#8]            ;262
                  |L1.398|
00018e  9803              LDR      r0,[sp,#0xc]          ;272
000190  07c0              LSLS     r0,r0,#31             ;272
000192  d000              BEQ      |L1.406|
000194  1976              ADDS     r6,r6,r5              ;274
                  |L1.406|
000196  2700              MOVS     r7,#0                 ;282
000198  e007              B        |L1.426|
                  |L1.410|
00019a  a806              ADD      r0,sp,#0x18           ;283
00019c  990c              LDR      r1,[sp,#0x30]         ;283
00019e  f7fffffe          BL       TFT_Plot_Pixel
0001a2  9807              LDR      r0,[sp,#0x1c]         ;284
0001a4  1c40              ADDS     r0,r0,#1              ;284
0001a6  9007              STR      r0,[sp,#0x1c]         ;284
0001a8  1c7f              ADDS     r7,r7,#1              ;282
                  |L1.426|
0001aa  9802              LDR      r0,[sp,#8]            ;282
0001ac  4287              CMP      r7,r0                 ;282
0001ae  dbf4              BLT      |L1.410|
0001b0  9806              LDR      r0,[sp,#0x18]         ;287
0001b2  1900              ADDS     r0,r0,r4              ;287
0001b4  9006              STR      r0,[sp,#0x18]         ;287
0001b6  2000              MOVS     r0,#0                 ;291
0001b8  9000              STR      r0,[sp,#0]            ;291
0001ba  1e6d              SUBS     r5,r5,#1              ;291
0001bc  9508              STR      r5,[sp,#0x20]         ;291
0001be  e019              B        |L1.500|
                  |L1.448|
0001c0  9f03              LDR      r7,[sp,#0xc]          ;292
0001c2  9805              LDR      r0,[sp,#0x14]         ;297
0001c4  1836              ADDS     r6,r6,r0              ;297
0001c6  2e00              CMP      r6,#0                 ;297
0001c8  dd02              BLE      |L1.464|
0001ca  1c7f              ADDS     r7,r7,#1              ;299
0001cc  9804              LDR      r0,[sp,#0x10]         ;300
0001ce  1a36              SUBS     r6,r6,r0              ;300
                  |L1.464|
0001d0  2500              MOVS     r5,#0                 ;308
0001d2  e007              B        |L1.484|
                  |L1.468|
0001d4  a806              ADD      r0,sp,#0x18           ;310
0001d6  990c              LDR      r1,[sp,#0x30]         ;310
0001d8  f7fffffe          BL       TFT_Plot_Pixel
0001dc  9807              LDR      r0,[sp,#0x1c]         ;311
0001de  1c40              ADDS     r0,r0,#1              ;311
0001e0  9007              STR      r0,[sp,#0x1c]         ;311
0001e2  1c6d              ADDS     r5,r5,#1              ;308
                  |L1.484|
0001e4  42bd              CMP      r5,r7                 ;308
0001e6  dbf5              BLT      |L1.468|
0001e8  9806              LDR      r0,[sp,#0x18]         ;314
0001ea  1900              ADDS     r0,r0,r4              ;314
0001ec  9006              STR      r0,[sp,#0x18]         ;314
0001ee  9800              LDR      r0,[sp,#0]            ;291
0001f0  1c40              ADDS     r0,r0,#1              ;291
0001f2  9000              STR      r0,[sp,#0]            ;291
                  |L1.500|
0001f4  9908              LDR      r1,[sp,#0x20]         ;291
0001f6  9800              LDR      r0,[sp,#0]            ;291
0001f8  4288              CMP      r0,r1                 ;291
0001fa  dbe1              BLT      |L1.448|
0001fc  2400              MOVS     r4,#0                 ;324
0001fe  e007              B        |L1.528|
                  |L1.512|
000200  a806              ADD      r0,sp,#0x18           ;326
000202  990c              LDR      r1,[sp,#0x30]         ;326
000204  f7fffffe          BL       TFT_Plot_Pixel
000208  9807              LDR      r0,[sp,#0x1c]         ;327
00020a  1c40              ADDS     r0,r0,#1              ;327
00020c  9007              STR      r0,[sp,#0x1c]         ;327
00020e  1c64              ADDS     r4,r4,#1              ;324
                  |L1.528|
000210  9801              LDR      r0,[sp,#4]            ;324
000212  4284              CMP      r4,r0                 ;324
000214  dbf4              BLT      |L1.512|
000216  e720              B        |L1.90|
                          ENDP

                  Graphics_Test PROC
;;;4      
;;;5      void Graphics_Test(void) {
000218  b5f0              PUSH     {r4-r7,lr}
00021a  b085              SUB      sp,sp,#0x14
;;;6      	int x, y;
;;;7      	PT_T p1, p2;
;;;8      	COLOR_T c;
;;;9      	
;;;10     	p1.X = TFT_WIDTH/2;
00021c  2078              MOVS     r0,#0x78
00021e  9003              STR      r0,[sp,#0xc]
;;;11     	p1.Y = TFT_HEIGHT/2;
000220  20a0              MOVS     r0,#0xa0
000222  9004              STR      r0,[sp,#0x10]
;;;12     
;;;13     	c.R = 100;
000224  2664              MOVS     r6,#0x64
000226  4668              MOV      r0,sp
000228  7006              STRB     r6,[r0,#0]
;;;14     	c.G = 100;
00022a  7046              STRB     r6,[r0,#1]
;;;15     	c.B = 255;
00022c  27ff              MOVS     r7,#0xff
00022e  7087              STRB     r7,[r0,#2]
;;;16     	p2.Y = 0;
000230  2000              MOVS     r0,#0
000232  9002              STR      r0,[sp,#8]
;;;17     	for (x=0; x<TFT_WIDTH; x += STEP) {
000234  2400              MOVS     r4,#0
                  |L1.566|
;;;18     		p2.X = x;
000236  9401              STR      r4,[sp,#4]
;;;19     		TFT_Draw_Line(&p1, &p2, &c);
000238  466a              MOV      r2,sp
00023a  a901              ADD      r1,sp,#4
00023c  a803              ADD      r0,sp,#0xc
00023e  f7fffffe          BL       TFT_Draw_Line
000242  3408              ADDS     r4,r4,#8              ;17
000244  2cf0              CMP      r4,#0xf0              ;17
000246  dbf6              BLT      |L1.566|
;;;20     	}
;;;21     
;;;22     	c.G = 100;
000248  4668              MOV      r0,sp
00024a  7046              STRB     r6,[r0,#1]
;;;23     	c.B = 100;
00024c  7086              STRB     r6,[r0,#2]
;;;24     	c.R = 255;
00024e  7007              STRB     r7,[r0,#0]
;;;25     	p2.X = TFT_WIDTH-1;
000250  20ef              MOVS     r0,#0xef
000252  9001              STR      r0,[sp,#4]
;;;26     	for (y=0; y<TFT_HEIGHT; y += STEP) {
000254  2400              MOVS     r4,#0
000256  25ff              MOVS     r5,#0xff
000258  3541              ADDS     r5,r5,#0x41
                  |L1.602|
;;;27     		p2.Y = y;
00025a  9402              STR      r4,[sp,#8]
;;;28     		TFT_Draw_Line(&p1, &p2, &c);
00025c  466a              MOV      r2,sp
00025e  a901              ADD      r1,sp,#4
000260  a803              ADD      r0,sp,#0xc
000262  f7fffffe          BL       TFT_Draw_Line
000266  3408              ADDS     r4,r4,#8              ;26
000268  42ac              CMP      r4,r5                 ;26
00026a  dbf6              BLT      |L1.602|
;;;29     	}
;;;30     
;;;31     	c.R = 100;
00026c  4668              MOV      r0,sp
00026e  7006              STRB     r6,[r0,#0]
;;;32     	c.B = 100;
000270  7086              STRB     r6,[r0,#2]
;;;33     	c.G = 255;
000272  7047              STRB     r7,[r0,#1]
;;;34     	p2.Y = TFT_HEIGHT-1;
000274  20ff              MOVS     r0,#0xff
000276  3040              ADDS     r0,r0,#0x40
000278  9002              STR      r0,[sp,#8]
;;;35     	for (x=0; x<TFT_WIDTH; x += STEP) {
00027a  2400              MOVS     r4,#0
                  |L1.636|
;;;36     		p2.X = x;
00027c  9401              STR      r4,[sp,#4]
;;;37     		TFT_Draw_Line(&p1, &p2, &c);
00027e  466a              MOV      r2,sp
000280  a901              ADD      r1,sp,#4
000282  a803              ADD      r0,sp,#0xc
000284  f7fffffe          BL       TFT_Draw_Line
000288  3408              ADDS     r4,r4,#8              ;35
00028a  2cf0              CMP      r4,#0xf0              ;35
00028c  dbf6              BLT      |L1.636|
;;;38     	}
;;;39     
;;;40     	c.R = 200;
00028e  20c8              MOVS     r0,#0xc8
000290  4669              MOV      r1,sp
000292  7008              STRB     r0,[r1,#0]
;;;41     	c.B = 100;
000294  708e              STRB     r6,[r1,#2]
;;;42     	c.G = 255;
000296  704f              STRB     r7,[r1,#1]
;;;43     	p2.X = 0;
000298  2000              MOVS     r0,#0
00029a  9001              STR      r0,[sp,#4]
;;;44     	for (y=0; y<TFT_HEIGHT; y += STEP) {
00029c  2400              MOVS     r4,#0
                  |L1.670|
;;;45     		p2.Y = y;
00029e  9402              STR      r4,[sp,#8]
;;;46     		TFT_Draw_Line(&p1, &p2, &c);
0002a0  466a              MOV      r2,sp
0002a2  a901              ADD      r1,sp,#4
0002a4  a803              ADD      r0,sp,#0xc
0002a6  f7fffffe          BL       TFT_Draw_Line
0002aa  3408              ADDS     r4,r4,#8              ;44
0002ac  42ac              CMP      r4,r5                 ;44
0002ae  dbf6              BLT      |L1.670|
;;;47     	}
;;;48     }
0002b0  b005              ADD      sp,sp,#0x14
0002b2  bdf0              POP      {r4-r7,pc}
;;;49     
                          ENDP

