; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\tasks.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\tasks.d --cpu=Cortex-M0+ --fpmode=fast --apcs=interwork -O1 -I.\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Freescale\Kinetis -D__RTX -D__MICROLIB -DMKL25Z128xxx4 --omf_browse=.\obj\tasks.crf src\tasks.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  Init_Debug_Signals PROC
;;;20     
;;;21     void Init_Debug_Signals(void) {
000000  b530              PUSH     {r4,r5,lr}
;;;22     	// Enable clock to port B
;;;23     	SIM->SCGC5 |= SIM_SCGC5_PORTB_MASK;
000002  48a8              LDR      r0,|L1.676|
000004  6b81              LDR      r1,[r0,#0x38]
000006  1502              ASRS     r2,r0,#20
000008  4311              ORRS     r1,r1,r2
00000a  6381              STR      r1,[r0,#0x38]
;;;24     	
;;;25     	// Make 3 pins GPIO
;;;26     	PORTB->PCR[DEBUG_T0_POS] &= ~PORT_PCR_MUX_MASK;          
00000c  48a6              LDR      r0,|L1.680|
00000e  6802              LDR      r2,[r0,#0]
000010  2107              MOVS     r1,#7
000012  0209              LSLS     r1,r1,#8
000014  438a              BICS     r2,r2,r1
000016  6002              STR      r2,[r0,#0]
;;;27     	PORTB->PCR[DEBUG_T0_POS] |= PORT_PCR_MUX(1);          
000018  6803              LDR      r3,[r0,#0]
00001a  1582              ASRS     r2,r0,#22
00001c  4313              ORRS     r3,r3,r2
00001e  6003              STR      r3,[r0,#0]
;;;28     	PORTB->PCR[DEBUG_T1_POS] &= ~PORT_PCR_MUX_MASK;          
000020  6843              LDR      r3,[r0,#4]
000022  438b              BICS     r3,r3,r1
000024  6043              STR      r3,[r0,#4]
;;;29     	PORTB->PCR[DEBUG_T1_POS] |= PORT_PCR_MUX(1);          
000026  6843              LDR      r3,[r0,#4]
000028  4313              ORRS     r3,r3,r2
00002a  6043              STR      r3,[r0,#4]
;;;30     	PORTB->PCR[DEBUG_T2_POS] &= ~PORT_PCR_MUX_MASK;          
00002c  6883              LDR      r3,[r0,#8]
00002e  438b              BICS     r3,r3,r1
000030  6083              STR      r3,[r0,#8]
;;;31     	PORTB->PCR[DEBUG_T2_POS] |= PORT_PCR_MUX(1);          
000032  6883              LDR      r3,[r0,#8]
000034  4313              ORRS     r3,r3,r2
000036  6083              STR      r3,[r0,#8]
;;;32     	PORTB->PCR[DEBUG_T3_POS] &= ~PORT_PCR_MUX_MASK;          
000038  68c3              LDR      r3,[r0,#0xc]
00003a  438b              BICS     r3,r3,r1
00003c  60c3              STR      r3,[r0,#0xc]
;;;33     	PORTB->PCR[DEBUG_T3_POS] |= PORT_PCR_MUX(1);          
00003e  68c1              LDR      r1,[r0,#0xc]
000040  4311              ORRS     r1,r1,r2
000042  60c1              STR      r1,[r0,#0xc]
;;;34     	
;;;35     	// Set ports to outputs
;;;36     	PTB->PDDR |= MASK(DEBUG_T0_POS);
000044  4899              LDR      r0,|L1.684|
000046  6941              LDR      r1,[r0,#0x14]
000048  2301              MOVS     r3,#1
00004a  4319              ORRS     r1,r1,r3
00004c  6141              STR      r1,[r0,#0x14]
;;;37     	PTB->PDDR |= MASK(DEBUG_T1_POS);
00004e  6941              LDR      r1,[r0,#0x14]
000050  2402              MOVS     r4,#2
000052  4321              ORRS     r1,r1,r4
000054  6141              STR      r1,[r0,#0x14]
;;;38     	PTB->PDDR |= MASK(DEBUG_T2_POS);
000056  6941              LDR      r1,[r0,#0x14]
000058  2504              MOVS     r5,#4
00005a  4329              ORRS     r1,r1,r5
00005c  6141              STR      r1,[r0,#0x14]
;;;39     	PTB->PDDR |= MASK(DEBUG_T3_POS);
00005e  6942              LDR      r2,[r0,#0x14]
000060  2108              MOVS     r1,#8
000062  430a              ORRS     r2,r2,r1
000064  6142              STR      r2,[r0,#0x14]
;;;40     	
;;;41     	// Initial values are 0
;;;42     	PTB->PCOR = MASK(DEBUG_T0_POS);
000066  6083              STR      r3,[r0,#8]
;;;43     	PTB->PCOR = MASK(DEBUG_T1_POS);
000068  6084              STR      r4,[r0,#8]
;;;44     	PTB->PCOR = MASK(DEBUG_T2_POS);
00006a  6085              STR      r5,[r0,#8]
;;;45     	PTB->PCOR = MASK(DEBUG_T3_POS);
00006c  6081              STR      r1,[r0,#8]
;;;46     }	
00006e  bd30              POP      {r4,r5,pc}
;;;47     
                          ENDP

                  Task_Update_Screen PROC
;;;133    
;;;134    __task void Task_Update_Screen(void) {
000070  b086              SUB      sp,sp,#0x18
;;;135    	int16_t paddle_pos=TFT_WIDTH/2;
000072  2478              MOVS     r4,#0x78
;;;136    	PT_T p1, p2;
;;;137    	COLOR_T paddle_color, black;
;;;138    	
;;;139    	paddle_color.R = 100;
000074  2064              MOVS     r0,#0x64
000076  4669              MOV      r1,sp
000078  7108              STRB     r0,[r1,#4]
;;;140    	paddle_color.G = 200;
00007a  20c8              MOVS     r0,#0xc8
00007c  7148              STRB     r0,[r1,#5]
;;;141    	paddle_color.B = 50;
00007e  2032              MOVS     r0,#0x32
000080  7188              STRB     r0,[r1,#6]
;;;142    
;;;143    	black.R = 0;
000082  2000              MOVS     r0,#0
000084  7008              STRB     r0,[r1,#0]
;;;144    	black.G = 0;
000086  7048              STRB     r0,[r1,#1]
;;;145    	black.B = 0;
000088  7088              STRB     r0,[r1,#2]
;;;146    	
;;;147    	os_itv_set(TASK_UPDATE_SCREEN_PERIOD_TICKS);
00008a  4f89              LDR      r7,|L1.688|
00008c  2064              MOVS     r0,#0x64
00008e  46bc              MOV      r12,r7
000090  df00              SVC      #0x0
;;;148    
;;;149    	while (1) {
;;;150    		os_itv_wait();
;;;151    		PTB->PSOR = MASK(DEBUG_T3_POS);
;;;152    		
;;;153    		if ((roll < -2.0) || (roll > 2.0)) {
;;;154    			p1.X = paddle_pos;
;;;155    			p1.Y = PADDLE_Y_POS;
000092  26ff              MOVS     r6,#0xff
000094  362e              ADDS     r6,r6,#0x2e
000096  2508              MOVS     r5,#8                 ;151
                  |L1.152|
000098  4f86              LDR      r7,|L1.692|
00009a  46bc              MOV      r12,r7                ;150
00009c  df00              SVC      #0x0                  ;150
00009e  4f83              LDR      r7,|L1.684|
0000a0  607d              STR      r5,[r7,#4]            ;151
0000a2  4885              LDR      r0,|L1.696|
0000a4  2103              MOVS     r1,#3                 ;153
0000a6  6800              LDR      r0,[r0,#0]            ;153  ; roll
0000a8  0789              LSLS     r1,r1,#30             ;153
0000aa  4288              CMP      r0,r1                 ;153
0000ac  d802              BHI      |L1.180|
0000ae  0639              LSLS     r1,r7,#24             ;153
0000b0  4288              CMP      r0,r1                 ;153
0000b2  dd29              BLE      |L1.264|
                  |L1.180|
0000b4  9404              STR      r4,[sp,#0x10]         ;154
0000b6  9605              STR      r6,[sp,#0x14]
;;;156    			p2.X = p1.X + PADDLE_WIDTH;
0000b8  9804              LDR      r0,[sp,#0x10]
0000ba  3028              ADDS     r0,r0,#0x28
0000bc  9002              STR      r0,[sp,#8]
;;;157    			p2.Y = p1.Y + PADDLE_HEIGHT;
0000be  20ff              MOVS     r0,#0xff
0000c0  303d              ADDS     r0,r0,#0x3d
0000c2  9003              STR      r0,[sp,#0xc]
;;;158    			TFT_Fill_Rectangle(&p1, &p2, &black); 		
0000c4  466a              MOV      r2,sp
0000c6  a902              ADD      r1,sp,#8
0000c8  a804              ADD      r0,sp,#0x10
0000ca  f7fffffe          BL       TFT_Fill_Rectangle
;;;159    			
;;;160    			paddle_pos += roll;
0000ce  4620              MOV      r0,r4
0000d0  f7fffffe          BL       __aeabi_i2f
0000d4  4978              LDR      r1,|L1.696|
0000d6  6809              LDR      r1,[r1,#0]  ; roll
0000d8  f7fffffe          BL       __aeabi_fadd
0000dc  f7fffffe          BL       __aeabi_f2iz
0000e0  b204              SXTH     r4,r0
;;;161    			paddle_pos = MAX(0, paddle_pos);
0000e2  2c00              CMP      r4,#0
0000e4  da00              BGE      |L1.232|
0000e6  2400              MOVS     r4,#0
                  |L1.232|
;;;162    			paddle_pos = MIN(paddle_pos, TFT_WIDTH-1);
0000e8  2cef              CMP      r4,#0xef
0000ea  db00              BLT      |L1.238|
0000ec  24ef              MOVS     r4,#0xef
                  |L1.238|
;;;163    			
;;;164    			p1.X = paddle_pos;
0000ee  9404              STR      r4,[sp,#0x10]
;;;165    			p1.Y = PADDLE_Y_POS;
0000f0  9605              STR      r6,[sp,#0x14]
;;;166    			p2.X = p1.X + PADDLE_WIDTH;
0000f2  9804              LDR      r0,[sp,#0x10]
0000f4  3028              ADDS     r0,r0,#0x28
0000f6  9002              STR      r0,[sp,#8]
;;;167    			p2.Y = p1.Y + PADDLE_HEIGHT;
0000f8  20ff              MOVS     r0,#0xff
0000fa  303d              ADDS     r0,r0,#0x3d
0000fc  9003              STR      r0,[sp,#0xc]
;;;168    			TFT_Fill_Rectangle(&p1, &p2, &paddle_color); 		
0000fe  aa01              ADD      r2,sp,#4
000100  a902              ADD      r1,sp,#8
000102  a804              ADD      r0,sp,#0x10
000104  f7fffffe          BL       TFT_Fill_Rectangle
                  |L1.264|
;;;169    		}
;;;170    		
;;;171    		PTB->PCOR = MASK(DEBUG_T3_POS);
000108  60bd              STR      r5,[r7,#8]
00010a  e7c5              B        |L1.152|
;;;172    	}
;;;173    }
                          ENDP

                  Task_Read_Accelerometer PROC
;;;105    
;;;106    __task void Task_Read_Accelerometer(void) {
00010c  b51f              PUSH     {r0-r4,lr}
;;;107    	char buffer[16];
;;;108    	
;;;109    	os_itv_set(TASK_READ_ACCELEROMETER_PERIOD_TICKS);
00010e  4f68              LDR      r7,|L1.688|
000110  2064              MOVS     r0,#0x64
000112  46bc              MOV      r12,r7
000114  df00              SVC      #0x0
;;;110    
;;;111    	while (1) {
;;;112    		os_itv_wait();
;;;113    		PTB->PSOR = MASK(DEBUG_T0_POS);
000116  4d65              LDR      r5,|L1.684|
;;;114    		read_full_xyz();
;;;115    		convert_xyz_to_roll_pitch();
;;;116    
;;;117    		sprintf(buffer, "Roll: %6.2f", roll);
;;;118    		os_mut_wait(&LCD_mutex, WAIT_FOREVER);
000118  4e68              LDR      r6,|L1.700|
00011a  2401              MOVS     r4,#1                 ;113
                  |L1.284|
00011c  4f65              LDR      r7,|L1.692|
00011e  46bc              MOV      r12,r7                ;112
000120  df00              SVC      #0x0                  ;112
000122  606c              STR      r4,[r5,#4]            ;113
000124  f7fffffe          BL       read_full_xyz
000128  f7fffffe          BL       convert_xyz_to_roll_pitch
00012c  4862              LDR      r0,|L1.696|
00012e  6800              LDR      r0,[r0,#0]            ;117  ; roll
000130  f7fffffe          BL       __aeabi_f2d
000134  4602              MOV      r2,r0                 ;117
000136  460b              MOV      r3,r1                 ;117
000138  a161              ADR      r1,|L1.704|
00013a  4668              MOV      r0,sp                 ;117
00013c  f7fffffe          BL       __2sprintf
000140  4f63              LDR      r7,|L1.720|
000142  4631              MOV      r1,r6
000144  4861              LDR      r0,|L1.716|
000146  46bc              MOV      r12,r7
000148  df00              SVC      #0x0
;;;119    		TFT_Text_PrintStr_RC(2, 0, buffer);
00014a  466a              MOV      r2,sp
00014c  2100              MOVS     r1,#0
00014e  2002              MOVS     r0,#2
000150  f7fffffe          BL       TFT_Text_PrintStr_RC
;;;120    		os_mut_release(&LCD_mutex);
000154  4f5f              LDR      r7,|L1.724|
000156  485d              LDR      r0,|L1.716|
000158  46bc              MOV      r12,r7
00015a  df00              SVC      #0x0
;;;121    
;;;122    		sprintf(buffer, "Pitch: %6.2f", pitch);
00015c  485e              LDR      r0,|L1.728|
00015e  6800              LDR      r0,[r0,#0]  ; pitch
000160  f7fffffe          BL       __aeabi_f2d
000164  4602              MOV      r2,r0
000166  460b              MOV      r3,r1
000168  a15c              ADR      r1,|L1.732|
00016a  4668              MOV      r0,sp
00016c  f7fffffe          BL       __2sprintf
;;;123    		os_mut_wait(&LCD_mutex, WAIT_FOREVER);
000170  4f57              LDR      r7,|L1.720|
000172  4631              MOV      r1,r6
000174  4855              LDR      r0,|L1.716|
000176  46bc              MOV      r12,r7
000178  df00              SVC      #0x0
;;;124    		TFT_Text_PrintStr_RC(3, 0, buffer);
00017a  466a              MOV      r2,sp
00017c  2100              MOVS     r1,#0
00017e  2003              MOVS     r0,#3
000180  f7fffffe          BL       TFT_Text_PrintStr_RC
;;;125    		os_mut_release(&LCD_mutex);
000184  4f53              LDR      r7,|L1.724|
000186  4851              LDR      r0,|L1.716|
000188  46bc              MOV      r12,r7
00018a  df00              SVC      #0x0
;;;126    
;;;127    		PTB->PCOR = MASK(DEBUG_T0_POS);
00018c  60ac              STR      r4,[r5,#8]
00018e  e7c5              B        |L1.284|
;;;128    	}
;;;129    }
;;;130    
                          ENDP

                  Task_Read_TS PROC
;;;61     
;;;62     __task void Task_Read_TS(void) {
000190  b086              SUB      sp,sp,#0x18
;;;63     	PT_T p, pp;
;;;64     	COLOR_T c;
;;;65     	
;;;66     	c.R = 150;
000192  2096              MOVS     r0,#0x96
000194  4669              MOV      r1,sp
000196  7108              STRB     r0,[r1,#4]
;;;67     	c.G = 200;
000198  20c8              MOVS     r0,#0xc8
00019a  7148              STRB     r0,[r1,#5]
;;;68     	c.B = 255;
00019c  20ff              MOVS     r0,#0xff
00019e  7188              STRB     r0,[r1,#6]
;;;69     	
;;;70     	os_itv_set(TASK_READ_TS_PERIOD_TICKS);
0001a0  4f43              LDR      r7,|L1.688|
0001a2  2014              MOVS     r0,#0x14
0001a4  46bc              MOV      r12,r7
0001a6  df00              SVC      #0x0
;;;71     
;;;72     	TFT_Text_PrintStr_RC(TFT_MAX_ROWS-3, 0, "Mute");
0001a8  4c50              LDR      r4,|L1.748|
0001aa  25ff              MOVS     r5,#0xff
0001ac  3541              ADDS     r5,r5,#0x41
0001ae  7821              LDRB     r1,[r4,#0]  ; G_TFT_char_height
0001b0  4628              MOV      r0,r5
0001b2  f7fffffe          BL       __aeabi_uidivmod
0001b6  1ec0              SUBS     r0,r0,#3
0001b8  b2c0              UXTB     r0,r0
0001ba  a24d              ADR      r2,|L1.752|
0001bc  2100              MOVS     r1,#0
0001be  f7fffffe          BL       TFT_Text_PrintStr_RC
;;;73     	TFT_Text_PrintStr_RC(TFT_MAX_ROWS-3, 12, "Unmute");
0001c2  7821              LDRB     r1,[r4,#0]  ; G_TFT_char_height
0001c4  4628              MOV      r0,r5
0001c6  f7fffffe          BL       __aeabi_uidivmod
0001ca  1ec0              SUBS     r0,r0,#3
0001cc  b2c0              UXTB     r0,r0
0001ce  a24a              ADR      r2,|L1.760|
0001d0  210c              MOVS     r1,#0xc
0001d2  f7fffffe          BL       TFT_Text_PrintStr_RC
;;;74     	
;;;75     	while (1) {
;;;76     		os_itv_wait();
;;;77     		PTB->PSOR = MASK(DEBUG_T1_POS);
0001d6  4c35              LDR      r4,|L1.684|
0001d8  2502              MOVS     r5,#2
                  |L1.474|
0001da  4f36              LDR      r7,|L1.692|
0001dc  46bc              MOV      r12,r7                ;76
0001de  df00              SVC      #0x0                  ;76
0001e0  6065              STR      r5,[r4,#4]
;;;78     		if (TFT_TS_Read(&p)) { 
0001e2  a804              ADD      r0,sp,#0x10
0001e4  f7fffffe          BL       TFT_TS_Read
0001e8  2800              CMP      r0,#0
0001ea  d028              BEQ      |L1.574|
;;;79     			// Send message indicating screen was pressed
;;;80     			// os_evt_set(EV_PLAYSOUND, t_Sound);
;;;81     
;;;82     			if (p.Y > 240) { 
0001ec  9805              LDR      r0,[sp,#0x14]
0001ee  28f0              CMP      r0,#0xf0
0001f0  d908              BLS      |L1.516|
;;;83     				if (p.X < TFT_WIDTH/2) {
0001f2  9804              LDR      r0,[sp,#0x10]
0001f4  2878              CMP      r0,#0x78
0001f6  d202              BCS      |L1.510|
;;;84     					Sound_Disable_Amp();
0001f8  f7fffffe          BL       Sound_Disable_Amp
0001fc  e022              B        |L1.580|
                  |L1.510|
;;;85     				} else {
;;;86     					Sound_Enable_Amp();
0001fe  f7fffffe          BL       Sound_Enable_Amp
000202  e01f              B        |L1.580|
                  |L1.516|
;;;87     				}
;;;88     			} else {
;;;89     				// Now draw on screen
;;;90     				if ((pp.X == 0) && (pp.Y == 0)) {
000204  9802              LDR      r0,[sp,#8]
000206  2800              CMP      r0,#0
000208  d106              BNE      |L1.536|
00020a  9803              LDR      r0,[sp,#0xc]
00020c  2800              CMP      r0,#0
00020e  d103              BNE      |L1.536|
;;;91     					pp = p;
000210  9905              LDR      r1,[sp,#0x14]
000212  9804              LDR      r0,[sp,#0x10]
000214  9103              STR      r1,[sp,#0xc]
000216  9002              STR      r0,[sp,#8]
                  |L1.536|
;;;92     				}
;;;93     				os_mut_wait(&LCD_mutex, WAIT_FOREVER);
000218  4f2d              LDR      r7,|L1.720|
00021a  4928              LDR      r1,|L1.700|
00021c  482b              LDR      r0,|L1.716|
00021e  46bc              MOV      r12,r7
000220  df00              SVC      #0x0
;;;94     				TFT_Draw_Line(&p, &pp, &c);
000222  aa01              ADD      r2,sp,#4
000224  a902              ADD      r1,sp,#8
000226  a804              ADD      r0,sp,#0x10
000228  f7fffffe          BL       TFT_Draw_Line
;;;95     				os_mut_release(&LCD_mutex);
00022c  4f29              LDR      r7,|L1.724|
00022e  4827              LDR      r0,|L1.716|
000230  46bc              MOV      r12,r7
000232  df00              SVC      #0x0
;;;96     				pp = p;
000234  9905              LDR      r1,[sp,#0x14]
000236  9804              LDR      r0,[sp,#0x10]
000238  9103              STR      r1,[sp,#0xc]
00023a  9002              STR      r0,[sp,#8]
00023c  e002              B        |L1.580|
                  |L1.574|
;;;97     			} 
;;;98     		} else {
;;;99     			pp.X = 0;
00023e  2000              MOVS     r0,#0
000240  9002              STR      r0,[sp,#8]
;;;100    			pp.Y = 0;
000242  9003              STR      r0,[sp,#0xc]
                  |L1.580|
;;;101    		}
;;;102    		PTB->PCOR = MASK(DEBUG_T1_POS);
000244  60a5              STR      r5,[r4,#8]
000246  e7c8              B        |L1.474|
;;;103    	}
;;;104    }
;;;105    
                          ENDP

                  Task_Init PROC
;;;47     
;;;48     __task void Task_Init(void) {
000248  4f2d              LDR      r7,|L1.768|
;;;49     	
;;;50     	os_mut_init(&LCD_mutex);
00024a  4820              LDR      r0,|L1.716|
00024c  46bc              MOV      r12,r7
00024e  df00              SVC      #0x0
;;;51     	
;;;52     	t_Read_TS = os_tsk_create(Task_Read_TS, 4);
000250  2300              MOVS     r3,#0
000252  4f2d              LDR      r7,|L1.776|
000254  461a              MOV      r2,r3
000256  2104              MOVS     r1,#4
000258  482a              LDR      r0,|L1.772|
00025a  46bc              MOV      r12,r7
00025c  df00              SVC      #0x0
00025e  4c2b              LDR      r4,|L1.780|
000260  6020              STR      r0,[r4,#0]  ; t_Read_TS
;;;53     	t_Read_Accelerometer = os_tsk_create_user(Task_Read_Accelerometer, 3, RA_Stack, 512);
000262  2300              MOVS     r3,#0
000264  4a2a              LDR      r2,|L1.784|
000266  492b              LDR      r1,|L1.788|
000268  482b              LDR      r0,|L1.792|
00026a  46bc              MOV      r12,r7
00026c  df00              SVC      #0x0
00026e  6060              STR      r0,[r4,#4]  ; t_Read_Accelerometer
;;;54     	t_Sound_Manager = os_tsk_create(Task_Sound_Manager, 2);
000270  2300              MOVS     r3,#0
000272  461a              MOV      r2,r3
000274  2102              MOVS     r1,#2
000276  4829              LDR      r0,|L1.796|
000278  46bc              MOV      r12,r7
00027a  df00              SVC      #0x0
00027c  60a0              STR      r0,[r4,#8]  ; t_Sound_Manager
;;;55     	t_US = os_tsk_create(Task_Update_Screen, 5);
00027e  2300              MOVS     r3,#0
000280  461a              MOV      r2,r3
000282  2105              MOVS     r1,#5
000284  4826              LDR      r0,|L1.800|
000286  46bc              MOV      r12,r7
000288  df00              SVC      #0x0
00028a  60e0              STR      r0,[r4,#0xc]  ; t_US
;;;56     	t_Refill_Sound_Buffer = os_tsk_create(Task_Refill_Sound_Buffer, 1);
00028c  2300              MOVS     r3,#0
00028e  461a              MOV      r2,r3
000290  2101              MOVS     r1,#1
000292  4824              LDR      r0,|L1.804|
000294  46bc              MOV      r12,r7
000296  df00              SVC      #0x0
000298  6120              STR      r0,[r4,#0x10]  ; t_Refill_Sound_Buffer
;;;57     
;;;58     
;;;59       os_tsk_delete_self ();
00029a  4f23              LDR      r7,|L1.808|
00029c  2000              MOVS     r0,#0
00029e  46bc              MOV      r12,r7
0002a0  df00              SVC      #0x0
;;;60     }
;;;61     
                          ENDP

0002a2  0000              DCW      0x0000
                  |L1.676|
                          DCD      0x40048000
                  |L1.680|
                          DCD      0x4004a000
                  |L1.684|
                          DCD      0x400ff040
                  |L1.688|
                          DCD      rt_itv_set
                  |L1.692|
                          DCD      rt_itv_wait
                  |L1.696|
                          DCD      roll
                  |L1.700|
                          DCD      0x0000ffff
                  |L1.704|
0002c0  526f6c6c          DCB      "Roll: %6.2f",0
0002c4  3a202536
0002c8  2e326600
                  |L1.716|
                          DCD      ||.bss||+0x200
                  |L1.720|
                          DCD      rt_mut_wait
                  |L1.724|
                          DCD      rt_mut_release
                  |L1.728|
                          DCD      pitch
                  |L1.732|
0002dc  50697463          DCB      "Pitch: %6.2f",0
0002e0  683a2025
0002e4  362e3266
0002e8  00      
0002e9  00                DCB      0
0002ea  00                DCB      0
0002eb  00                DCB      0
                  |L1.748|
                          DCD      G_TFT_char_height
                  |L1.752|
0002f0  4d757465          DCB      "Mute",0
0002f4  00      
0002f5  00                DCB      0
0002f6  00                DCB      0
0002f7  00                DCB      0
                  |L1.760|
0002f8  556e6d75          DCB      "Unmute",0
0002fc  746500  
0002ff  00                DCB      0
                  |L1.768|
                          DCD      rt_mut_init
                  |L1.772|
                          DCD      Task_Read_TS
                  |L1.776|
                          DCD      rt_tsk_create
                  |L1.780|
                          DCD      ||.data||
                  |L1.784|
                          DCD      ||.bss||
                  |L1.788|
                          DCD      0x00020003
                  |L1.792|
                          DCD      Task_Read_Accelerometer
                  |L1.796|
                          DCD      Task_Sound_Manager
                  |L1.800|
                          DCD      Task_Update_Screen
                  |L1.804|
                          DCD      Task_Refill_Sound_Buffer
                  |L1.808|
                          DCD      rt_tsk_delete

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  RA_Stack
                          %        512
                  LCD_mutex
                          %        16

                          AREA ||area_number.4||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.bss||
                  TS_mutex
                          %        16

                          AREA ||.data||, DATA, ALIGN=2

                  t_Read_TS
                          DCD      0x00000000
                  t_Read_Accelerometer
                          DCD      0x00000000
                  t_Sound_Manager
                          DCD      0x00000000
                  t_US
                          DCD      0x00000000
                  t_Refill_Sound_Buffer
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "src\\tasks.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_tasks_c_ebb4e44d____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_tasks_c_ebb4e44d____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_tasks_c_ebb4e44d____REVSH|
#line 144
|__asm___7_tasks_c_ebb4e44d____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
