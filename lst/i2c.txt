; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\i2c.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\i2c.d --cpu=Cortex-M0+ --fpmode=fast --apcs=interwork -O1 -I.\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Freescale\Kinetis -D__RTX -D__MICROLIB -DMKL25Z128xxx4 --omf_browse=.\obj\i2c.crf src\I2C.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  i2c_init PROC
;;;4      //init i2c0
;;;5      void i2c_init(void)
000000  4853              LDR      r0,|L1.336|
;;;6      {
;;;7      	//clock i2c peripheral and port E
;;;8      	SIM->SCGC4 |= SIM_SCGC4_I2C0_MASK;
000002  6b41              LDR      r1,[r0,#0x34]
000004  2240              MOVS     r2,#0x40
000006  4311              ORRS     r1,r1,r2
000008  6341              STR      r1,[r0,#0x34]
;;;9      	SIM->SCGC5 |= (SIM_SCGC5_PORTE_MASK);
00000a  6b81              LDR      r1,[r0,#0x38]
00000c  01d2              LSLS     r2,r2,#7
00000e  4311              ORRS     r1,r1,r2
000010  6381              STR      r1,[r0,#0x38]
;;;10     	
;;;11     	//set pins to I2C function
;;;12     	PORTE->PCR[24] |= PORT_PCR_MUX(5);
000012  4850              LDR      r0,|L1.340|
000014  6a02              LDR      r2,[r0,#0x20]
000016  2105              MOVS     r1,#5
000018  0209              LSLS     r1,r1,#8
00001a  430a              ORRS     r2,r2,r1
00001c  6202              STR      r2,[r0,#0x20]
;;;13     	PORTE->PCR[25] |= PORT_PCR_MUX(5);
00001e  6a42              LDR      r2,[r0,#0x24]
000020  430a              ORRS     r2,r2,r1
000022  6242              STR      r2,[r0,#0x24]
;;;14     		
;;;15     	//set to 100k baud
;;;16     	//baud = bus freq/(scl_div+mul)
;;;17      	//~400k = 24M/(64); icr=0x12 sets scl_div to 64
;;;18     
;;;19      	I2C0->F = (I2C_F_ICR(8) | I2C_F_MULT(0));
000024  484c              LDR      r0,|L1.344|
000026  2108              MOVS     r1,#8
000028  7041              STRB     r1,[r0,#1]
;;;20     		
;;;21     	//enable i2c and set to master mode
;;;22     	I2C0->C1 |= (I2C_C1_IICEN_MASK);
00002a  7881              LDRB     r1,[r0,#2]
00002c  2280              MOVS     r2,#0x80
00002e  4311              ORRS     r1,r1,r2
000030  7081              STRB     r1,[r0,#2]
;;;23     	
;;;24     	// Select high drive mode
;;;25     	I2C0->C2 |= (I2C_C2_HDRS_MASK);
000032  7941              LDRB     r1,[r0,#5]
000034  2220              MOVS     r2,#0x20
000036  4311              ORRS     r1,r1,r2
000038  7141              STRB     r1,[r0,#5]
;;;26     }
00003a  4770              BX       lr
;;;27     
                          ENDP

                  i2c_wait PROC
;;;28     #pragma no_inline 
;;;29     void i2c_wait(void) {
00003c  4846              LDR      r0,|L1.344|
                  |L1.62|
;;;30     	while((I2C0->S & I2C_S_IICIF_MASK)==0) {
00003e  78c1              LDRB     r1,[r0,#3]
000040  0789              LSLS     r1,r1,#30
000042  d5fc              BPL      |L1.62|
;;;31     	} 
;;;32       I2C0->S |= I2C_S_IICIF_MASK;
000044  78c1              LDRB     r1,[r0,#3]
000046  2202              MOVS     r2,#2
000048  4311              ORRS     r1,r1,r2
00004a  70c1              STRB     r1,[r0,#3]
;;;33     }
00004c  4770              BX       lr
;;;34     
                          ENDP

                  i2c_start PROC
;;;36     //send start sequence
;;;37     void i2c_start()
00004e  4842              LDR      r0,|L1.344|
;;;38     {
;;;39     	I2C_TRAN;							/*set to transmit mode */
000050  7881              LDRB     r1,[r0,#2]
000052  2210              MOVS     r2,#0x10
000054  4311              ORRS     r1,r1,r2
000056  7081              STRB     r1,[r0,#2]
;;;40     	I2C_M_START;					/*send start	*/
000058  7881              LDRB     r1,[r0,#2]
00005a  2220              MOVS     r2,#0x20
00005c  4311              ORRS     r1,r1,r2
00005e  7081              STRB     r1,[r0,#2]
;;;41     }
000060  4770              BX       lr
;;;42     
                          ENDP

                  i2c_read_setup PROC
;;;44     #pragma no_inline 
;;;45     void i2c_read_setup(uint8_t dev, uint8_t address)
000062  b530              PUSH     {r4,r5,lr}
;;;46     {
000064  4604              MOV      r4,r0
000066  460d              MOV      r5,r1
;;;47     	I2C0->D = dev;			  /*send dev address	*/
000068  4b3b              LDR      r3,|L1.344|
00006a  711c              STRB     r4,[r3,#4]
;;;48     	I2C_WAIT							/*wait for completion */
00006c  f7fffffe          BL       i2c_wait
;;;49     	
;;;50     	I2C0->D =  address;		/*send read address	*/
000070  711d              STRB     r5,[r3,#4]
;;;51     	I2C_WAIT							/*wait for completion */
000072  f7fffffe          BL       i2c_wait
;;;52     		
;;;53     	I2C_M_RSTART;				   /*repeated start */
000076  7898              LDRB     r0,[r3,#2]
000078  2104              MOVS     r1,#4
00007a  4308              ORRS     r0,r0,r1
00007c  7098              STRB     r0,[r3,#2]
;;;54     	I2C0->D = (dev|0x1);	 /*send dev address (read)	*/
00007e  2001              MOVS     r0,#1
000080  4304              ORRS     r4,r4,r0
000082  711c              STRB     r4,[r3,#4]
;;;55     	I2C_WAIT							 /*wait for completion */
000084  f7fffffe          BL       i2c_wait
;;;56     	
;;;57     	I2C_REC;						   /*set to receive mode */
000088  7898              LDRB     r0,[r3,#2]
00008a  21ef              MOVS     r1,#0xef
00008c  4008              ANDS     r0,r0,r1
00008e  7098              STRB     r0,[r3,#2]
;;;58     
;;;59     }
000090  bd30              POP      {r4,r5,pc}
;;;60     
                          ENDP

                  i2c_repeated_read PROC
;;;62     // #pragma no_inline 
;;;63     uint8_t i2c_repeated_read(uint8_t isLastRead)
000092  b510              PUSH     {r4,lr}
;;;64     {
000094  4604              MOV      r4,r0
;;;65     	uint8_t data;
;;;66     	
;;;67     	if(isLastRead)	{
;;;68     		NACK;								/*set NACK after read	*/
000096  4b30              LDR      r3,|L1.344|
000098  2c00              CMP      r4,#0                 ;67
00009a  d004              BEQ      |L1.166|
00009c  7898              LDRB     r0,[r3,#2]
00009e  2108              MOVS     r1,#8
0000a0  4308              ORRS     r0,r0,r1
0000a2  7098              STRB     r0,[r3,#2]
0000a4  e003              B        |L1.174|
                  |L1.166|
;;;69     	} else	{
;;;70     		ACK;								/*ACK after read	*/
0000a6  7898              LDRB     r0,[r3,#2]
0000a8  21f7              MOVS     r1,#0xf7
0000aa  4008              ANDS     r0,r0,r1
0000ac  7098              STRB     r0,[r3,#2]
                  |L1.174|
;;;71     	}
;;;72     	
;;;73     	data = I2C0->D;				/*dummy read	*/
0000ae  7918              LDRB     r0,[r3,#4]
;;;74     	I2C_WAIT							/*wait for completion */
0000b0  f7fffffe          BL       i2c_wait
;;;75     	
;;;76     	if(isLastRead)	{
0000b4  2c00              CMP      r4,#0
0000b6  d003              BEQ      |L1.192|
;;;77     		I2C_M_STOP;					/*send stop	*/
0000b8  7898              LDRB     r0,[r3,#2]
0000ba  21df              MOVS     r1,#0xdf
0000bc  4008              ANDS     r0,r0,r1
0000be  7098              STRB     r0,[r3,#2]
                  |L1.192|
;;;78     	}
;;;79     	data = I2C0->D;				/*read data	*/
0000c0  7918              LDRB     r0,[r3,#4]
;;;80     
;;;81     	return  data;					
;;;82     }
0000c2  bd10              POP      {r4,pc}
;;;83     
                          ENDP

                  i2c_read_byte PROC
;;;88     // #pragma no_inline 
;;;89     uint8_t i2c_read_byte(uint8_t dev, uint8_t address)
0000c4  b530              PUSH     {r4,r5,lr}
;;;90     {
0000c6  4604              MOV      r4,r0
0000c8  460d              MOV      r5,r1
;;;91     	uint8_t data;
;;;92     	
;;;93     	I2C_TRAN;							/*set to transmit mode */
0000ca  4b23              LDR      r3,|L1.344|
0000cc  7898              LDRB     r0,[r3,#2]
0000ce  2110              MOVS     r1,#0x10
0000d0  4308              ORRS     r0,r0,r1
0000d2  7098              STRB     r0,[r3,#2]
;;;94     	I2C_M_START;					/*send start	*/
0000d4  7898              LDRB     r0,[r3,#2]
0000d6  2120              MOVS     r1,#0x20
0000d8  4308              ORRS     r0,r0,r1
0000da  7098              STRB     r0,[r3,#2]
;;;95     	I2C0->D = dev;			  /*send dev address	*/
0000dc  711c              STRB     r4,[r3,#4]
;;;96     	I2C_WAIT							/*wait for completion */
0000de  f7fffffe          BL       i2c_wait
;;;97     	
;;;98     	I2C0->D =  address;		/*send read address	*/
0000e2  711d              STRB     r5,[r3,#4]
;;;99     	I2C_WAIT							/*wait for completion */
0000e4  f7fffffe          BL       i2c_wait
;;;100    		
;;;101    	I2C_M_RSTART;				   /*repeated start */
0000e8  7898              LDRB     r0,[r3,#2]
0000ea  2104              MOVS     r1,#4
0000ec  4308              ORRS     r0,r0,r1
0000ee  7098              STRB     r0,[r3,#2]
;;;102    	I2C0->D = (dev|0x1);	 /*send dev address (read)	*/
0000f0  2001              MOVS     r0,#1
0000f2  4304              ORRS     r4,r4,r0
0000f4  711c              STRB     r4,[r3,#4]
;;;103    	I2C_WAIT							 /*wait for completion */
0000f6  f7fffffe          BL       i2c_wait
;;;104    	
;;;105    	I2C_REC;						   /*set to recieve mode */
0000fa  7898              LDRB     r0,[r3,#2]
0000fc  21ef              MOVS     r1,#0xef
0000fe  4008              ANDS     r0,r0,r1
000100  7098              STRB     r0,[r3,#2]
;;;106    	NACK;									 /*set NACK after read	*/
000102  7898              LDRB     r0,[r3,#2]
000104  2108              MOVS     r1,#8
000106  4308              ORRS     r0,r0,r1
000108  7098              STRB     r0,[r3,#2]
;;;107    	
;;;108    	data = I2C0->D;					/*dummy read	*/
00010a  7918              LDRB     r0,[r3,#4]
;;;109    	I2C_WAIT								/*wait for completion */
00010c  f7fffffe          BL       i2c_wait
;;;110    	
;;;111    	I2C_M_STOP;							/*send stop	*/
000110  7898              LDRB     r0,[r3,#2]
000112  21df              MOVS     r1,#0xdf
000114  4008              ANDS     r0,r0,r1
000116  7098              STRB     r0,[r3,#2]
;;;112    	data = I2C0->D;					/*read data	*/
000118  7918              LDRB     r0,[r3,#4]
;;;113    
;;;114    	return data;
;;;115    }
00011a  bd30              POP      {r4,r5,pc}
;;;116    
                          ENDP

                  i2c_write_byte PROC
;;;120    #pragma no_inline 
;;;121    void i2c_write_byte(uint8_t dev, uint8_t address, uint8_t data)
00011c  b570              PUSH     {r4-r6,lr}
;;;122    {
00011e  460d              MOV      r5,r1
000120  4616              MOV      r6,r2
;;;123    	
;;;124    	I2C_TRAN;							/*set to transmit mode */
000122  4b0d              LDR      r3,|L1.344|
000124  789c              LDRB     r4,[r3,#2]
000126  2110              MOVS     r1,#0x10
000128  430c              ORRS     r4,r4,r1
00012a  709c              STRB     r4,[r3,#2]
;;;125    	I2C_M_START;					/*send start	*/
00012c  7899              LDRB     r1,[r3,#2]
00012e  2220              MOVS     r2,#0x20
000130  4311              ORRS     r1,r1,r2
000132  7099              STRB     r1,[r3,#2]
;;;126    	I2C0->D = dev;			  /*send dev address	*/
000134  7118              STRB     r0,[r3,#4]
;;;127    	I2C_WAIT						  /*wait for ack */
000136  f7fffffe          BL       i2c_wait
;;;128    	
;;;129    	I2C0->D =  address;		/*send write address	*/
00013a  711d              STRB     r5,[r3,#4]
;;;130    	I2C_WAIT
00013c  f7fffffe          BL       i2c_wait
;;;131    		
;;;132    	I2C0->D = data;				/*send data	*/
000140  711e              STRB     r6,[r3,#4]
;;;133    	I2C_WAIT
000142  f7fffffe          BL       i2c_wait
;;;134    	I2C_M_STOP;
000146  7898              LDRB     r0,[r3,#2]
000148  21df              MOVS     r1,#0xdf
00014a  4008              ANDS     r0,r0,r1
00014c  7098              STRB     r0,[r3,#2]
;;;135    	
;;;136    }
00014e  bd70              POP      {r4-r6,pc}
;;;137    
                          ENDP

                  |L1.336|
                          DCD      0x40048000
                  |L1.340|
                          DCD      0x4004d040
                  |L1.344|
                          DCD      0x40066000

;*** Start embedded assembler ***

#line 1 "src\\I2C.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_I2C_c_i2c_init____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_I2C_c_i2c_init____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_I2C_c_i2c_init____REVSH|
#line 144
|__asm___5_I2C_c_i2c_init____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
