; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\system_mkl25z4.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\system_mkl25z4.d --cpu=Cortex-M0+ --fpmode=fast --apcs=interwork -O1 -I.\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Freescale\Kinetis -D__RTX -D__MICROLIB -DMKL25Z128xxx4 --omf_browse=.\obj\system_mkl25z4.crf src\system_MKL25Z4.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;90     
;;;91     void SystemInit (void) {
000000  4859              LDR      r0,|L1.360|
;;;92     #if (DISABLE_WDOG)
;;;93       /* Disable the WDOG module */
;;;94       /* SIM_COPC: COPT=0,COPCLKS=0,COPW=0 */
;;;95       SIM->COPC = (uint32_t)0x00u;
000002  2200              MOVS     r2,#0
000004  6002              STR      r2,[r0,#0]
;;;96     #endif /* (DISABLE_WDOG) */
;;;97     #if (CLOCK_SETUP == 0)
;;;98       /* SIM->CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=2,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0 */
;;;99       SIM->CLKDIV1 = (uint32_t)0x00020000UL; /* Update system prescalers */
;;;100      /* Switch to FEI Mode */
;;;101      /* MCG->C1: CLKS=0,FRDIV=0,IREFS=1,IRCLKEN=1,IREFSTEN=0 */
;;;102      MCG->C1 = (uint8_t)0x06U;
;;;103      /* MCG_C2: LOCRE0=0,??=0,RANGE0=0,HGO0=0,EREFS0=0,LP=0,IRCS=0 */
;;;104      MCG->C2 = (uint8_t)0x00U;
;;;105      /* MCG->C4: DMX32=0,DRST_DRS=1 */
;;;106      MCG->C4 = (uint8_t)((MCG->C4 & (uint8_t)~(uint8_t)0xC0U) | (uint8_t)0x20U);
;;;107      /* OSC0->CR: ERCLKEN=1,??=0,EREFSTEN=0,??=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
;;;108      OSC0->CR = (uint8_t)0x80U;
;;;109      /* MCG->C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=0 */
;;;110      MCG->C5 = (uint8_t)0x00U;
;;;111      /* MCG->C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
;;;112      MCG->C6 = (uint8_t)0x00U;
;;;113      while((MCG->S & MCG_S_IREFST_MASK) == 0x00U) { /* Check that the source of the FLL reference clock is the internal reference clock. */
;;;114      }
;;;115      while((MCG->S & 0x0CU) != 0x00U) {    /* Wait until output of the FLL is selected */
;;;116      }
;;;117    #elif (CLOCK_SETUP == 1)
;;;118      /* SIM->SCGC5: PORTA=1 */
;;;119      SIM->SCGC5 |= (uint32_t)0x0200UL;     /* Enable clock gate for ports to enable pin routing */
000006  4859              LDR      r0,|L1.364|
000008  6b81              LDR      r1,[r0,#0x38]
00000a  1543              ASRS     r3,r0,#21
00000c  4319              ORRS     r1,r1,r3
00000e  6381              STR      r1,[r0,#0x38]
;;;120      /* SIM->CLKDIV1: OUTDIV1=1,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=1,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0 */
;;;121      SIM->CLKDIV1 = (uint32_t)0x10010000UL; /* Update system prescalers */
000010  4956              LDR      r1,|L1.364|
000012  4857              LDR      r0,|L1.368|
000014  3140              ADDS     r1,r1,#0x40
000016  6048              STR      r0,[r1,#4]
;;;122      /* PORTA->PCR18: ISF=0,MUX=0 */
;;;123      PORTA->PCR[18] &= (uint32_t)~0x01000700UL;
000018  4856              LDR      r0,|L1.372|
00001a  6883              LDR      r3,[r0,#8]
00001c  4956              LDR      r1,|L1.376|
00001e  400b              ANDS     r3,r3,r1
000020  6083              STR      r3,[r0,#8]
;;;124      /* PORTA->PCR19: ISF=0,MUX=0 */
;;;125      PORTA->PCR[19] &= (uint32_t)~0x01000700UL;
000022  68c3              LDR      r3,[r0,#0xc]
000024  400b              ANDS     r3,r3,r1
000026  60c3              STR      r3,[r0,#0xc]
;;;126      /* Switch to FBE Mode */
;;;127      /* OSC0->CR: ERCLKEN=1,??=0,EREFSTEN=0,??=0,SC2P=1,SC4P=0,SC8P=0,SC16P=1 */
;;;128      OSC0->CR = (uint8_t)0x89U;
000028  4954              LDR      r1,|L1.380|
00002a  2089              MOVS     r0,#0x89
00002c  7008              STRB     r0,[r1,#0]
;;;129      /* MCG->C2: LOCRE0=0,??=0,RANGE0=2,HGO0=0,EREFS0=1,LP=0,IRCS=0 */
;;;130      MCG->C2 = (uint8_t)0x24U;
00002e  4854              LDR      r0,|L1.384|
000030  2124              MOVS     r1,#0x24
000032  7041              STRB     r1,[r0,#1]
;;;131      /* MCG->C1: CLKS=2,FRDIV=3,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
;;;132      MCG->C1 = (uint8_t)0x9AU;
000034  219a              MOVS     r1,#0x9a
000036  7001              STRB     r1,[r0,#0]
;;;133      /* MCG->C4: DMX32=0,DRST_DRS=0 */
;;;134      MCG->C4 &= (uint8_t)~(uint8_t)0xE0U;
000038  78c1              LDRB     r1,[r0,#3]
00003a  06c9              LSLS     r1,r1,#27
00003c  0ec9              LSRS     r1,r1,#27
00003e  70c1              STRB     r1,[r0,#3]
;;;135      /* MCG->C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=1 */
;;;136      MCG->C5 = (uint8_t)0x01U;
000040  2101              MOVS     r1,#1
000042  7101              STRB     r1,[r0,#4]
;;;137      /* MCG->C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
;;;138      MCG->C6 = (uint8_t)0x00U;
000044  7142              STRB     r2,[r0,#5]
                  |L1.70|
;;;139      while((MCG->S & MCG_S_IREFST_MASK) != 0x00U) { /* Check that the source of the FLL reference clock is the external reference clock. */
000046  7981              LDRB     r1,[r0,#6]
000048  06c9              LSLS     r1,r1,#27
00004a  d4fc              BMI      |L1.70|
                  |L1.76|
;;;140      }
;;;141      while((MCG->S & 0x0CU) != 0x08U) {    /* Wait until external reference clock is selected as MCG output */
00004c  7981              LDRB     r1,[r0,#6]
00004e  0709              LSLS     r1,r1,#28
000050  0f89              LSRS     r1,r1,#30
000052  2902              CMP      r1,#2
000054  d1fa              BNE      |L1.76|
;;;142      }
;;;143      /* Switch to PBE Mode */
;;;144      /* MCG->C6: LOLIE0=0,PLLS=1,CME0=0,VDIV0=0 */
;;;145      MCG->C6 = (uint8_t)0x40U;
000056  2140              MOVS     r1,#0x40
000058  7141              STRB     r1,[r0,#5]
                  |L1.90|
;;;146      while((MCG->S & 0x0CU) != 0x08U) {    /* Wait until external reference clock is selected as MCG output */
00005a  7981              LDRB     r1,[r0,#6]
00005c  0709              LSLS     r1,r1,#28
00005e  0f89              LSRS     r1,r1,#30
000060  2902              CMP      r1,#2
000062  d1fa              BNE      |L1.90|
                  |L1.100|
;;;147      }
;;;148      while((MCG->S & MCG_S_LOCK0_MASK) == 0x00U) { /* Wait until locked */
000064  7981              LDRB     r1,[r0,#6]
000066  0649              LSLS     r1,r1,#25
000068  d5fc              BPL      |L1.100|
;;;149      }
;;;150      /* Switch to PEE Mode */
;;;151      /* MCG->C1: CLKS=0,FRDIV=3,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
;;;152      MCG->C1 = (uint8_t)0x1AU;
00006a  211a              MOVS     r1,#0x1a
00006c  7001              STRB     r1,[r0,#0]
                  |L1.110|
;;;153      while((MCG->S & 0x0CU) != 0x0CU) {    /* Wait until output of the PLL is selected */
00006e  7981              LDRB     r1,[r0,#6]
000070  0709              LSLS     r1,r1,#28
000072  0f89              LSRS     r1,r1,#30
000074  2903              CMP      r1,#3
000076  d1fa              BNE      |L1.110|
;;;154      }
;;;155    #elif (CLOCK_SETUP == 2)
;;;156      /* SIM->SCGC5: PORTA=1 */
;;;157      SIM->SCGC5 |= (uint32_t)0x0200UL;     /* Enable clock gate for ports to enable pin routing */
;;;158      /* SIM->CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0 */
;;;159      SIM->CLKDIV1 = (uint32_t)0x00000000UL; /* Update system prescalers */
;;;160      /* PORTA->PCR18: ISF=0,MUX=0 */
;;;161      PORTA->PCR[18] &= (uint32_t)~0x01000700UL;
;;;162      /* PORTA->PCR19: ISF=0,MUX=0 */
;;;163      PORTA->PCR[19] &= (uint32_t)~0x01000700UL;
;;;164      /* Switch to FBE Mode */
;;;165      /* OSC0->CR: ERCLKEN=1,??=0,EREFSTEN=0,??=0,SC2P=1,SC4P=0,SC8P=0,SC16P=1 */
;;;166      OSC0->CR = (uint8_t)0x89U;
;;;167      /* MCG->C2: LOCRE0=0,??=0,RANGE0=2,HGO0=0,EREFS0=1,LP=0,IRCS=0 */
;;;168      MCG->C2 = (uint8_t)0x24U;
;;;169      /* MCG->C1: CLKS=2,FRDIV=3,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
;;;170      MCG->C1 = (uint8_t)0x9AU;
;;;171      /* MCG->C4: DMX32=0,DRST_DRS=0 */
;;;172      MCG->C4 &= (uint8_t)~(uint8_t)0xE0U;
;;;173      /* MCG->C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=0 */
;;;174      MCG->C5 = (uint8_t)0x00U;
;;;175      /* MCG->C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
;;;176      MCG->C6 = (uint8_t)0x00U;
;;;177      while((MCG->S & MCG_S_IREFST_MASK) != 0x00U) { /* Check that the source of the FLL reference clock is the external reference clock. */
;;;178      }
;;;179      while((MCG->S & 0x0CU) != 0x08U) {    /* Wait until external reference clock is selected as MCG output */
;;;180      }
;;;181      /* Switch to BLPE Mode */
;;;182      /* MCG->C2: LOCRE0=0,??=0,RANGE0=2,HGO0=0,EREFS0=1,LP=1,IRCS=0 */
;;;183      MCG->C2 = (uint8_t)0x26U;
;;;184      while((MCG->S & 0x0CU) != 0x08U) {    /* Wait until external reference clock is selected as MCG output */
;;;185      }
;;;186    #endif /* (CLOCK_SETUP == 2) */
;;;187    }
000078  4770              BX       lr
;;;188    
                          ENDP

                  SystemCoreClockUpdate PROC
;;;192    
;;;193    void SystemCoreClockUpdate (void) {
00007a  b510              PUSH     {r4,lr}
;;;194      uint32_t MCGOUTClock;                                                        /* Variable to store output clock frequency of the MCG module */
;;;195      uint8_t Divider;
;;;196    
;;;197      if ((MCG->C1 & MCG_C1_CLKS_MASK) == 0x0u) {
00007c  4c40              LDR      r4,|L1.384|
00007e  7820              LDRB     r0,[r4,#0]
;;;198        /* Output of FLL or PLL is selected */
;;;199        if ((MCG->C6 & MCG_C6_PLLS_MASK) == 0x0u) {
;;;200          /* FLL is selected */
;;;201          if ((MCG->C1 & MCG_C1_IREFS_MASK) == 0x0u) {
;;;202            /* External reference clock is selected */
;;;203            MCGOUTClock = CPU_XTAL_CLK_HZ;                                       /* System oscillator drives MCG clock */
;;;204            Divider = (uint8_t)(1u << ((MCG->C1 & MCG_C1_FRDIV_MASK) >> MCG_C1_FRDIV_SHIFT));
000080  2101              MOVS     r1,#1
000082  0983              LSRS     r3,r0,#6              ;197
000084  483f              LDR      r0,|L1.388|
;;;205            MCGOUTClock = (MCGOUTClock / Divider);  /* Calculate the divided FLL reference clock */
;;;206            if ((MCG->C2 & MCG_C2_RANGE0_MASK) != 0x0u) {
;;;207              MCGOUTClock /= 32u;                                                  /* If high range is enabled, additional 32 divider is active */
;;;208            } /* ((MCG->C2 & MCG_C2_RANGE0_MASK) != 0x0u) */
;;;209          } else { /* (!((MCG->C1 & MCG_C1_IREFS_MASK) == 0x0u)) */
;;;210            MCGOUTClock = CPU_INT_SLOW_CLK_HZ;                                     /* The slow internal reference clock is selected */
000086  03ca              LSLS     r2,r1,#15
000088  2b00              CMP      r3,#0                 ;197
00008a  d011              BEQ      |L1.176|
;;;211          } /* (!((MCG->C1 & MCG_C1_IREFS_MASK) == 0x0u)) */
;;;212          /* Select correct multiplier to calculate the MCG output clock  */
;;;213          switch (MCG->C4 & (MCG_C4_DMX32_MASK | MCG_C4_DRST_DRS_MASK)) {
;;;214            case 0x0u:
;;;215              MCGOUTClock *= 640u;
;;;216              break;
;;;217            case 0x20u:
;;;218              MCGOUTClock *= 1280u;
;;;219              break;
;;;220            case 0x40u:
;;;221              MCGOUTClock *= 1920u;
;;;222              break;
;;;223            case 0x60u:
;;;224              MCGOUTClock *= 2560u;
;;;225              break;
;;;226            case 0x80u:
;;;227              MCGOUTClock *= 732u;
;;;228              break;
;;;229            case 0xA0u:
;;;230              MCGOUTClock *= 1464u;
;;;231              break;
;;;232            case 0xC0u:
;;;233              MCGOUTClock *= 2197u;
;;;234              break;
;;;235            case 0xE0u:
;;;236              MCGOUTClock *= 2929u;
;;;237              break;
;;;238            default:
;;;239              break;
;;;240          }
;;;241        } else { /* (!((MCG->C6 & MCG_C6_PLLS_MASK) == 0x0u)) */
;;;242          /* PLL is selected */
;;;243          Divider = (1u + (MCG->C5 & MCG_C5_PRDIV0_MASK));
;;;244          MCGOUTClock = (uint32_t)(CPU_XTAL_CLK_HZ / Divider);                     /* Calculate the PLL reference clock */
;;;245          Divider = ((MCG->C6 & MCG_C6_VDIV0_MASK) + 24u);
;;;246          MCGOUTClock *= Divider;                       /* Calculate the MCG output clock */
;;;247        } /* (!((MCG->C6 & MCG_C6_PLLS_MASK) == 0x0u)) */
;;;248      } else if ((MCG->C1 & MCG_C1_CLKS_MASK) == 0x40u) {
00008c  7823              LDRB     r3,[r4,#0]
00008e  099b              LSRS     r3,r3,#6
000090  2b01              CMP      r3,#1
000092  d05b              BEQ      |L1.332|
;;;249        /* Internal reference clock is selected */
;;;250        if ((MCG->C2 & MCG_C2_IRCS_MASK) == 0x0u) {
;;;251          MCGOUTClock = CPU_INT_SLOW_CLK_HZ;                                       /* Slow internal reference clock selected */
;;;252        } else { /* (!((MCG->C2 & MCG_C2_IRCS_MASK) == 0x0u)) */
;;;253          MCGOUTClock = CPU_INT_FAST_CLK_HZ / (1 << ((MCG->SC & MCG_SC_FCRDIV_MASK) >> MCG_SC_FCRDIV_SHIFT));  /* Fast internal reference clock selected */
;;;254        } /* (!((MCG->C2 & MCG_C2_IRCS_MASK) == 0x0u)) */
;;;255      } else if ((MCG->C1 & MCG_C1_CLKS_MASK) == 0x80u) {
000094  7821              LDRB     r1,[r4,#0]
000096  0989              LSRS     r1,r1,#6
000098  2902              CMP      r1,#2
00009a  d108              BNE      |L1.174|
                  |L1.156|
;;;256        /* External reference clock is selected */
;;;257        MCGOUTClock = CPU_XTAL_CLK_HZ;                                           /* System oscillator drives MCG clock */
;;;258      } else { /* (!((MCG->C1 & MCG_C1_CLKS_MASK) == 0x80u)) */
;;;259        /* Reserved value */
;;;260        return;
;;;261      } /* (!((MCG->C1 & MCG_C1_CLKS_MASK) == 0x80u)) */
;;;262      SystemCoreClock = (MCGOUTClock / (1u + ((SIM->CLKDIV1 & SIM_CLKDIV1_OUTDIV1_MASK) >> SIM_CLKDIV1_OUTDIV1_SHIFT)));
00009c  4933              LDR      r1,|L1.364|
00009e  3140              ADDS     r1,r1,#0x40
0000a0  6849              LDR      r1,[r1,#4]
0000a2  0f09              LSRS     r1,r1,#28
0000a4  1c49              ADDS     r1,r1,#1
0000a6  f7fffffe          BL       __aeabi_uidivmod
0000aa  4937              LDR      r1,|L1.392|
0000ac  6008              STR      r0,[r1,#0]  ; SystemCoreClock
                  |L1.174|
;;;263    }
0000ae  bd10              POP      {r4,pc}
                  |L1.176|
0000b0  7963              LDRB     r3,[r4,#5]            ;199
0000b2  065b              LSLS     r3,r3,#25             ;199
0000b4  d43e              BMI      |L1.308|
0000b6  7823              LDRB     r3,[r4,#0]            ;201
0000b8  075b              LSLS     r3,r3,#29             ;201
0000ba  d40c              BMI      |L1.214|
0000bc  7822              LDRB     r2,[r4,#0]            ;204
0000be  0692              LSLS     r2,r2,#26             ;204
0000c0  0f52              LSRS     r2,r2,#29             ;204
0000c2  4091              LSLS     r1,r1,r2              ;204
0000c4  b2c9              UXTB     r1,r1                 ;204
0000c6  f7fffffe          BL       __aeabi_uidivmod
0000ca  7861              LDRB     r1,[r4,#1]            ;206
0000cc  0689              LSLS     r1,r1,#26             ;206
0000ce  0f89              LSRS     r1,r1,#30             ;206
0000d0  d002              BEQ      |L1.216|
0000d2  0940              LSRS     r0,r0,#5              ;207
0000d4  e000              B        |L1.216|
                  |L1.214|
0000d6  4610              MOV      r0,r2                 ;210
                  |L1.216|
0000d8  78e1              LDRB     r1,[r4,#3]            ;213
0000da  0949              LSRS     r1,r1,#5              ;213
0000dc  0149              LSLS     r1,r1,#5              ;213
0000de  06ca              LSLS     r2,r1,#27             ;213
0000e0  0ed2              LSRS     r2,r2,#27             ;213
0000e2  d1db              BNE      |L1.156|
0000e4  1149              ASRS     r1,r1,#5              ;213
0000e6  000b              MOVS     r3,r1                 ;213
0000e8  f7fffffe          BL       __ARM_common_switch8
0000ec  08060a0e          DCB      0x08,0x06,0x0a,0x0e
0000f0  12161a1e          DCB      0x12,0x16,0x1a,0x1e
0000f4  2105              DCB      0x21,0x05
0000f6  e7d1              B        |L1.156|
0000f8  2105              MOVS     r1,#5                 ;215
0000fa  01c9              LSLS     r1,r1,#7              ;215
0000fc  4348              MULS     r0,r1,r0              ;215
0000fe  e7cd              B        |L1.156|
000100  2105              MOVS     r1,#5                 ;218
000102  0209              LSLS     r1,r1,#8              ;218
000104  4348              MULS     r0,r1,r0              ;218
000106  e7c9              B        |L1.156|
000108  210f              MOVS     r1,#0xf               ;221
00010a  01c9              LSLS     r1,r1,#7              ;221
00010c  4348              MULS     r0,r1,r0              ;221
00010e  e7c5              B        |L1.156|
000110  2105              MOVS     r1,#5                 ;224
000112  0249              LSLS     r1,r1,#9              ;224
000114  4348              MULS     r0,r1,r0              ;224
000116  e7c1              B        |L1.156|
000118  21b7              MOVS     r1,#0xb7              ;227
00011a  0089              LSLS     r1,r1,#2              ;227
00011c  4348              MULS     r0,r1,r0              ;227
00011e  e7bd              B        |L1.156|
000120  21b7              MOVS     r1,#0xb7              ;230
000122  00c9              LSLS     r1,r1,#3              ;230
000124  4348              MULS     r0,r1,r0              ;230
000126  e7b9              B        |L1.156|
000128  4918              LDR      r1,|L1.396|
00012a  4348              MULS     r0,r1,r0              ;233
00012c  e7b6              B        |L1.156|
00012e  4918              LDR      r1,|L1.400|
000130  4348              MULS     r0,r1,r0              ;236
000132  e7b3              B        |L1.156|
                  |L1.308|
000134  7921              LDRB     r1,[r4,#4]            ;243
000136  06c9              LSLS     r1,r1,#27             ;243
000138  0ec9              LSRS     r1,r1,#27             ;243
00013a  1c49              ADDS     r1,r1,#1              ;243
00013c  f7fffffe          BL       __aeabi_uidivmod
000140  7961              LDRB     r1,[r4,#5]            ;245
000142  06c9              LSLS     r1,r1,#27             ;245
000144  0ec9              LSRS     r1,r1,#27             ;245
000146  3118              ADDS     r1,r1,#0x18           ;245
000148  4348              MULS     r0,r1,r0              ;246
00014a  e7a7              B        |L1.156|
                  |L1.332|
00014c  7860              LDRB     r0,[r4,#1]            ;250
00014e  07c0              LSLS     r0,r0,#31             ;250
000150  d007              BEQ      |L1.354|
000152  7a20              LDRB     r0,[r4,#8]            ;253
000154  0700              LSLS     r0,r0,#28             ;253
000156  0f40              LSRS     r0,r0,#29             ;253
000158  4081              LSLS     r1,r1,r0              ;253
00015a  480e              LDR      r0,|L1.404|
00015c  f7fffffe          BL       __aeabi_uidivmod
000160  e79c              B        |L1.156|
                  |L1.354|
000162  4610              MOV      r0,r2                 ;251
000164  e79a              B        |L1.156|
                          ENDP

000166  0000              DCW      0x0000
                  |L1.360|
                          DCD      0x40048100
                  |L1.364|
                          DCD      0x40048000
                  |L1.368|
                          DCD      0x10010000
                  |L1.372|
                          DCD      0x40049040
                  |L1.376|
                          DCD      0xfefff8ff
                  |L1.380|
                          DCD      0x40065000
                  |L1.384|
                          DCD      0x40064000
                  |L1.388|
                          DCD      0x007a1200
                  |L1.392|
                          DCD      ||.data||
                  |L1.396|
                          DCD      0x00000895
                  |L1.400|
                          DCD      0x00000b71
                  |L1.404|
                          DCD      0x003d0900

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x02dc6c00

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L16.16|
00000e  461d              MOV      r5,r3
                  |L16.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP


;*** Start embedded assembler ***

#line 1 "src\\system_MKL25Z4.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_system_MKL25Z4_c_5d646a67____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_system_MKL25Z4_c_5d646a67____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_system_MKL25Z4_c_5d646a67____REVSH|
#line 144
|__asm___16_system_MKL25Z4_c_5d646a67____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
