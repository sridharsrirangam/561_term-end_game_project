; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\mma8451.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\mma8451.d --cpu=Cortex-M0+ --fpmode=fast --apcs=interwork -O1 -I.\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Freescale\Kinetis -D__RTX -D__MICROLIB -DMKL25Z128xxx4 --omf_browse=.\obj\mma8451.crf src\MMA8451.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  init_mma PROC
;;;24      */
;;;25     int init_mma()
000000  b510              PUSH     {r4,lr}
;;;26     {
;;;27     	  //check for device
;;;28     		if(i2c_read_byte(MMA_ADDR, REG_WHOAMI) == WHOAMI)	{
000002  210d              MOVS     r1,#0xd
000004  203a              MOVS     r0,#0x3a
000006  f7fffffe          BL       i2c_read_byte
00000a  281a              CMP      r0,#0x1a
00000c  d001              BEQ      |L1.18|
;;;29     			
;;;30     		  Delay(100);
;;;31     		  //turn on data ready irq; defaults to int2 (PTA15)
;;;32     		  i2c_write_byte(MMA_ADDR, REG_CTRL4, 0x01);
;;;33     		  Delay(100);
;;;34     		  //set active 14bit mode and 100Hz (0x19)
;;;35     		  i2c_write_byte(MMA_ADDR, REG_CTRL1, 0x01);
;;;36     				
;;;37     		  //enable the irq in the NVIC
;;;38     		  //NVIC_EnableIRQ(PORTA_IRQn);
;;;39     		  return 1;
;;;40     		}
;;;41     		
;;;42     		//else error
;;;43     		return 0;
00000e  2000              MOVS     r0,#0
;;;44     	
;;;45     }
000010  bd10              POP      {r4,pc}
                  |L1.18|
000012  2064              MOVS     r0,#0x64              ;30
000014  f7fffffe          BL       Delay
000018  2201              MOVS     r2,#1                 ;32
00001a  212d              MOVS     r1,#0x2d              ;32
00001c  203a              MOVS     r0,#0x3a              ;32
00001e  f7fffffe          BL       i2c_write_byte
000022  2064              MOVS     r0,#0x64              ;33
000024  f7fffffe          BL       Delay
000028  2201              MOVS     r2,#1                 ;35
00002a  212a              MOVS     r1,#0x2a              ;35
00002c  203a              MOVS     r0,#0x3a              ;35
00002e  f7fffffe          BL       i2c_write_byte
000032  2001              MOVS     r0,#1                 ;39
000034  bd10              POP      {r4,pc}
;;;46     
                          ENDP

                  read_full_xyz PROC
;;;49     */
;;;50     void read_full_xyz()
000036  b57c              PUSH     {r2-r6,lr}
;;;51     {
;;;52     	
;;;53     	int i;
;;;54     	uint8_t data[6];
;;;55     	
;;;56     	i2c_start();
000038  f7fffffe          BL       i2c_start
;;;57     	i2c_read_setup(MMA_ADDR , REG_XHI);
00003c  2101              MOVS     r1,#1
00003e  203a              MOVS     r0,#0x3a
000040  f7fffffe          BL       i2c_read_setup
;;;58     	
;;;59     	for( i=0;i<6;i++)	{
000044  2400              MOVS     r4,#0
000046  466d              MOV      r5,sp                 ;54
                  |L1.72|
;;;60     		if(i==5)
000048  2c05              CMP      r4,#5
00004a  d019              BEQ      |L1.128|
;;;61     			data[i] = i2c_repeated_read(1);
;;;62     		else
;;;63     			data[i] = i2c_repeated_read(0);
00004c  2000              MOVS     r0,#0
00004e  f7fffffe          BL       i2c_repeated_read
000052  5528              STRB     r0,[r5,r4]
                  |L1.84|
000054  1c64              ADDS     r4,r4,#1              ;59
000056  2c06              CMP      r4,#6                 ;59
000058  dbf6              BLT      |L1.72|
;;;64     	}
;;;65     	
;;;66     	acc_X = (((int16_t) data[0])<<8) | data[1];
00005a  466a              MOV      r2,sp
00005c  7810              LDRB     r0,[r2,#0]
00005e  0201              LSLS     r1,r0,#8
000060  7850              LDRB     r0,[r2,#1]
000062  4301              ORRS     r1,r1,r0
000064  4872              LDR      r0,|L1.560|
000066  8001              STRH     r1,[r0,#0]
;;;67     	acc_Y = (((int16_t) data[2])<<8) | data[3];
000068  7891              LDRB     r1,[r2,#2]
00006a  78d2              LDRB     r2,[r2,#3]
00006c  0209              LSLS     r1,r1,#8
00006e  4311              ORRS     r1,r1,r2
000070  8041              STRH     r1,[r0,#2]
;;;68     	acc_Z = (((int16_t) data[4])<<8) | data[5];
000072  466a              MOV      r2,sp
000074  7911              LDRB     r1,[r2,#4]
000076  7952              LDRB     r2,[r2,#5]
000078  0209              LSLS     r1,r1,#8
00007a  4311              ORRS     r1,r1,r2
00007c  8081              STRH     r1,[r0,#4]
;;;69     }
00007e  bd7c              POP      {r2-r6,pc}
                  |L1.128|
000080  2001              MOVS     r0,#1                 ;61
000082  f7fffffe          BL       i2c_repeated_read
000086  4669              MOV      r1,sp                 ;61
000088  7148              STRB     r0,[r1,#5]            ;61
00008a  e7e3              B        |L1.84|
;;;70     
                          ENDP

                  read_xyz PROC
;;;71     
;;;72     void read_xyz(void)
00008c  b510              PUSH     {r4,lr}
;;;73     {
;;;74     	// sign extend byte to 16 bits - need to cast to signed since function
;;;75     	// returns uint8_t which is unsigned
;;;76     	acc_X = ((int16_t) ((int8_t) i2c_read_byte(MMA_ADDR, REG_XHI))) << 8;
00008e  2101              MOVS     r1,#1
000090  203a              MOVS     r0,#0x3a
000092  f7fffffe          BL       i2c_read_byte
000096  4c66              LDR      r4,|L1.560|
000098  0200              LSLS     r0,r0,#8
00009a  8020              STRH     r0,[r4,#0]
;;;77     	Delay(100);
00009c  2064              MOVS     r0,#0x64
00009e  f7fffffe          BL       Delay
;;;78     	acc_Y = ((int16_t) ((int8_t) i2c_read_byte(MMA_ADDR, REG_YHI))) << 8;
0000a2  2103              MOVS     r1,#3
0000a4  203a              MOVS     r0,#0x3a
0000a6  f7fffffe          BL       i2c_read_byte
0000aa  0200              LSLS     r0,r0,#8
0000ac  8060              STRH     r0,[r4,#2]
;;;79     	Delay(100);
0000ae  2064              MOVS     r0,#0x64
0000b0  f7fffffe          BL       Delay
;;;80     	acc_Z = ((int16_t) ((int8_t) i2c_read_byte(MMA_ADDR, REG_ZHI))) << 8;
0000b4  2105              MOVS     r1,#5
0000b6  203a              MOVS     r0,#0x3a
0000b8  f7fffffe          BL       i2c_read_byte
0000bc  0200              LSLS     r0,r0,#8
0000be  80a0              STRH     r0,[r4,#4]
;;;81     }
0000c0  bd10              POP      {r4,pc}
;;;82     
                          ENDP

                  approx_sqrtf PROC
;;;83     float approx_sqrtf(float z) { // from Wikipedia
0000c2  2113              MOVS     r1,#0x13
;;;84     	int val_int = *(int*)&z; /* Same bits, but as an int */
;;;85     	const int a = 0x4c000;
0000c4  0389              LSLS     r1,r1,#14
;;;86     
;;;87       val_int -= 1 << 23; /* Subtract 2^m. */
0000c6  2201              MOVS     r2,#1
0000c8  05d2              LSLS     r2,r2,#23
0000ca  1a80              SUBS     r0,r0,r2
;;;88       val_int >>= 1; /* Divide by 2. */
0000cc  1040              ASRS     r0,r0,#1
;;;89       val_int += 1 << 29; /* Add ((b + 1) / 2) * 2^m. */
0000ce  0192              LSLS     r2,r2,#6
0000d0  1880              ADDS     r0,r0,r2
;;;90     	val_int += a;
0000d2  1840              ADDS     r0,r0,r1
;;;91     	//	val_int = (1 << 29) + (val_int >> 1) - (1 << 22) + a;
;;;92     	return *(float*)&val_int; /* Interpret again as float */
;;;93     }
0000d4  4770              BX       lr
;;;94     
                          ENDP

                  approx_atan2f PROC
;;;95     float approx_atan2f(float y, float x) {
0000d6  b5f3              PUSH     {r0,r1,r4-r7,lr}
0000d8  b083              SUB      sp,sp,#0xc
;;;96     	float a, abs_a, approx, adj=0.0;
0000da  2000              MOVS     r0,#0
0000dc  9001              STR      r0,[sp,#4]
;;;97     	char negate = 0;
0000de  2700              MOVS     r7,#0
;;;98     	
;;;99     	if (x == 0) { // special cases
0000e0  9804              LDR      r0,[sp,#0x10]
;;;100    		if (y == 0.0)
;;;101    			return 0.0; // undefined, but return 0 by convention
;;;102    		else if (y < 0.0)
;;;103    			return -M_PI_2;
0000e2  4c54              LDR      r4,|L1.564|
;;;104    		else
;;;105    			return M_PI_2;
0000e4  4d54              LDR      r5,|L1.568|
0000e6  0040              LSLS     r0,r0,#1              ;99
0000e8  d010              BEQ      |L1.268|
;;;106    	}	else {
;;;107    	// Version 7
;;;108    #if 1		
;;;109    		a = y/x;
0000ea  9904              LDR      r1,[sp,#0x10]
0000ec  9803              LDR      r0,[sp,#0xc]
0000ee  f7fffffe          BL       __aeabi_fdiv
0000f2  4606              MOV      r6,r0
;;;110    		if (a>1) {
0000f4  217f              MOVS     r1,#0x7f
0000f6  05c9              LSLS     r1,r1,#23
0000f8  428e              CMP      r6,r1
0000fa  dd16              BLE      |L1.298|
;;;111    			a = x/y;
0000fc  9903              LDR      r1,[sp,#0xc]
0000fe  9804              LDR      r0,[sp,#0x10]
000100  f7fffffe          BL       __aeabi_fdiv
000104  4606              MOV      r6,r0
;;;112    			adj = M_PI_2;
000106  9501              STR      r5,[sp,#4]
;;;113    			negate = 1;
000108  2701              MOVS     r7,#1
00010a  e019              B        |L1.320|
                  |L1.268|
00010c  9803              LDR      r0,[sp,#0xc]          ;100
00010e  0040              LSLS     r0,r0,#1              ;100
000110  d007              BEQ      |L1.290|
000112  2101              MOVS     r1,#1                 ;102
000114  9803              LDR      r0,[sp,#0xc]          ;102
000116  07c9              LSLS     r1,r1,#31             ;102
000118  4288              CMP      r0,r1                 ;102
00011a  d904              BLS      |L1.294|
00011c  4620              MOV      r0,r4                 ;103
                  |L1.286|
;;;114    		} else if (a<-1) {
;;;115    			a = x/y;
;;;116    			adj = -M_PI_2;
;;;117    			negate = 1;
;;;118    		}
;;;119    #endif
;;;120    
;;;121    		abs_a = (a < 0)? -a : a;
;;;122    		approx = M_PI_4*a - a*(abs_a - 1)*(0.2447+0.0663*abs_a);
;;;123    		if (negate) {
;;;124    			approx = adj - approx;
;;;125    		}
;;;126    		
;;;127    		if (x > 0)
;;;128    			return approx;
;;;129    		else if (y >= 0)
;;;130    			return approx + M_PI;
;;;131    		else
;;;132    			return approx - M_PI;
;;;133    	}		
;;;134    }
00011e  b005              ADD      sp,sp,#0x14
000120  bdf0              POP      {r4-r7,pc}
                  |L1.290|
000122  2000              MOVS     r0,#0                 ;101
000124  e7fb              B        |L1.286|
                  |L1.294|
000126  4628              MOV      r0,r5                 ;105
000128  e7f9              B        |L1.286|
                  |L1.298|
00012a  2081              MOVS     r0,#0x81              ;114
00012c  05c0              LSLS     r0,r0,#23             ;114
00012e  42c6              CMN      r6,r0                 ;114
000130  d906              BLS      |L1.320|
000132  9903              LDR      r1,[sp,#0xc]          ;115
000134  9804              LDR      r0,[sp,#0x10]         ;115
000136  f7fffffe          BL       __aeabi_fdiv
00013a  4606              MOV      r6,r0                 ;115
00013c  9401              STR      r4,[sp,#4]            ;116
00013e  2701              MOVS     r7,#1                 ;117
                  |L1.320|
000140  2001              MOVS     r0,#1                 ;121
000142  07c0              LSLS     r0,r0,#31             ;121
000144  4286              CMP      r6,r0                 ;121
000146  d904              BLS      |L1.338|
000148  2101              MOVS     r1,#1                 ;121
00014a  4630              MOV      r0,r6                 ;121
00014c  07c9              LSLS     r1,r1,#31             ;121
00014e  4048              EORS     r0,r0,r1              ;121
000150  e000              B        |L1.340|
                  |L1.338|
000152  4630              MOV      r0,r6                 ;121
                  |L1.340|
000154  9002              STR      r0,[sp,#8]            ;121
000156  9802              LDR      r0,[sp,#8]            ;122
000158  f7fffffe          BL       __aeabi_f2d
00015c  4a37              LDR      r2,|L1.572|
00015e  4b38              LDR      r3,|L1.576|
000160  f7fffffe          BL       __aeabi_dmul
000164  4a37              LDR      r2,|L1.580|
000166  4b38              LDR      r3,|L1.584|
000168  f7fffffe          BL       __aeabi_dadd
00016c  460d              MOV      r5,r1                 ;122
00016e  4604              MOV      r4,r0                 ;122
000170  217f              MOVS     r1,#0x7f              ;122
000172  05c9              LSLS     r1,r1,#23             ;122
000174  9802              LDR      r0,[sp,#8]            ;122
000176  f7fffffe          BL       __aeabi_fsub
00017a  4631              MOV      r1,r6                 ;122
00017c  f7fffffe          BL       __aeabi_fmul
000180  f7fffffe          BL       __aeabi_f2d
000184  4622              MOV      r2,r4                 ;122
000186  462b              MOV      r3,r5                 ;122
000188  f7fffffe          BL       __aeabi_dmul
00018c  4604              MOV      r4,r0                 ;122
00018e  460d              MOV      r5,r1                 ;122
000190  4630              MOV      r0,r6                 ;122
000192  f7fffffe          BL       __aeabi_f2d
000196  4a2d              LDR      r2,|L1.588|
000198  4b2d              LDR      r3,|L1.592|
00019a  f7fffffe          BL       __aeabi_dmul
00019e  4622              MOV      r2,r4                 ;122
0001a0  462b              MOV      r3,r5                 ;122
0001a2  f7fffffe          BL       __aeabi_dsub
0001a6  f7fffffe          BL       __aeabi_d2f
0001aa  2f00              CMP      r7,#0                 ;123
0001ac  d003              BEQ      |L1.438|
0001ae  4601              MOV      r1,r0                 ;124
0001b0  9801              LDR      r0,[sp,#4]            ;124
0001b2  f7fffffe          BL       __aeabi_fsub
                  |L1.438|
0001b6  9904              LDR      r1,[sp,#0x10]         ;127
0001b8  2900              CMP      r1,#0                 ;127
0001ba  dcb0              BGT      |L1.286|
0001bc  2201              MOVS     r2,#1                 ;129
0001be  9903              LDR      r1,[sp,#0xc]          ;129
0001c0  07d2              LSLS     r2,r2,#31             ;129
0001c2  4b24              LDR      r3,|L1.596|
0001c4  4291              CMP      r1,r2                 ;129
0001c6  d803              BHI      |L1.464|
0001c8  4619              MOV      r1,r3                 ;130
0001ca  f7fffffe          BL       __aeabi_fadd
0001ce  e7a6              B        |L1.286|
                  |L1.464|
0001d0  4619              MOV      r1,r3                 ;132
0001d2  f7fffffe          BL       __aeabi_fsub
0001d6  e7a2              B        |L1.286|
;;;135    
                          ENDP

                  convert_xyz_to_roll_pitch PROC
;;;136    void convert_xyz_to_roll_pitch(void) {
0001d8  b570              PUSH     {r4-r6,lr}
;;;137    /*
;;;138    	float ax = acc_X/COUNTS_PER_G,
;;;139    				ay = acc_Y/COUNTS_PER_G,
;;;140    				az = acc_Z/COUNTS_PER_G;
;;;141    */
;;;142    	
;;;143    	roll = approx_atan2f(acc_Y, acc_Z)*(180/M_PI);
0001da  4c15              LDR      r4,|L1.560|
0001dc  2004              MOVS     r0,#4
0001de  5e20              LDRSH    r0,[r4,r0]  ; acc_Z
0001e0  f7fffffe          BL       __aeabi_i2f
0001e4  4605              MOV      r5,r0
0001e6  2002              MOVS     r0,#2
0001e8  5e20              LDRSH    r0,[r4,r0]  ; acc_Y
0001ea  f7fffffe          BL       __aeabi_i2f
0001ee  4629              MOV      r1,r5
0001f0  f7fffffe          BL       approx_atan2f
0001f4  4d18              LDR      r5,|L1.600|
0001f6  4629              MOV      r1,r5
0001f8  f7fffffe          BL       __aeabi_fmul
0001fc  60a0              STR      r0,[r4,#8]  ; roll
;;;144    	pitch = approx_atan2f(acc_X, approx_sqrtf(acc_Y*acc_Y + acc_Z*acc_Z))*(180/M_PI);
0001fe  2002              MOVS     r0,#2
000200  2104              MOVS     r1,#4
000202  5e20              LDRSH    r0,[r4,r0]  ; acc_Y
000204  5e61              LDRSH    r1,[r4,r1]  ; acc_Z
000206  4340              MULS     r0,r0,r0
000208  4349              MULS     r1,r1,r1
00020a  1840              ADDS     r0,r0,r1
00020c  f7fffffe          BL       __aeabi_i2f
000210  f7fffffe          BL       approx_sqrtf
000214  4606              MOV      r6,r0
000216  2000              MOVS     r0,#0
000218  5e20              LDRSH    r0,[r4,r0]  ; acc_X
00021a  f7fffffe          BL       __aeabi_i2f
00021e  4631              MOV      r1,r6
000220  f7fffffe          BL       approx_atan2f
000224  4629              MOV      r1,r5
000226  f7fffffe          BL       __aeabi_fmul
00022a  60e0              STR      r0,[r4,#0xc]  ; pitch
;;;145    #if 0	
;;;146    	roll = atan2(ay, az)*180/M_PI;
;;;147    	pitch = atan2(ax, sqrt(ay*ay + az*az))*180/M_PI;
;;;148    #endif
;;;149    }
00022c  bd70              POP      {r4-r6,pc}
;;;150    
                          ENDP

00022e  0000              DCW      0x0000
                  |L1.560|
                          DCD      ||.data||
                  |L1.564|
                          DCD      0xbfc90fdb
                  |L1.568|
                          DCD      0x3fc90fdb
                  |L1.572|
                          DCD      0x6bb98c7e
                  |L1.576|
                          DCD      0x3fb0f909
                  |L1.580|
                          DCD      0x60aa64c3
                  |L1.584|
                          DCD      0x3fcf5254
                  |L1.588|
                          DCD      0x53c8d4f1
                  |L1.592|
                          DCD      0x3fe921fb
                  |L1.596|
                          DCD      0x40490fdb
                  |L1.600|
                          DCD      0x42652ee1

                          AREA ||.data||, DATA, ALIGN=2

                  acc_X
000000  0000              DCW      0x0000
                  acc_Y
000002  0000              DCW      0x0000
                  acc_Z
000004  0000              DCW      0x0000
000006  0000              DCB      0x00,0x00
                  roll
000008  00000000          DCFS     0x00000000 ; 0
                  pitch
00000c  00000000          DCFS     0x00000000 ; 0

;*** Start embedded assembler ***

#line 1 "src\\MMA8451.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_MMA8451_c_acc_X____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_MMA8451_c_acc_X____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_MMA8451_c_acc_X____REVSH|
#line 144
|__asm___9_MMA8451_c_acc_X____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
