; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\sound.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\sound.d --cpu=Cortex-M0+ --fpmode=fast --apcs=interwork -O1 -I.\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Freescale\Kinetis -D__RTX -D__MICROLIB -DMKL25Z128xxx4 --omf_browse=.\obj\sound.crf src\sound.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  DAC_Init PROC
;;;17     
;;;18     void DAC_Init(void) {
000000  488e              LDR      r0,|L1.572|
;;;19       // Init DAC output
;;;20     	
;;;21     	SIM->SCGC6 |= MASK(SIM_SCGC6_DAC0_SHIFT); 
000002  6bc1              LDR      r1,[r0,#0x3c]
000004  0402              LSLS     r2,r0,#16
000006  4311              ORRS     r1,r1,r2
000008  63c1              STR      r1,[r0,#0x3c]
;;;22     	SIM->SCGC5 |= MASK(SIM_SCGC5_PORTE_SHIFT); 
00000a  6b81              LDR      r1,[r0,#0x38]
00000c  0c92              LSRS     r2,r2,#18
00000e  4311              ORRS     r1,r1,r2
000010  6381              STR      r1,[r0,#0x38]
;;;23     	
;;;24     	PORTE->PCR[DAC_POS] &= ~PORT_PCR_MUX_MASK;	
000012  488b              LDR      r0,|L1.576|
000014  6b81              LDR      r1,[r0,#0x38]
000016  2207              MOVS     r2,#7
000018  0212              LSLS     r2,r2,#8
00001a  4391              BICS     r1,r1,r2
00001c  6381              STR      r1,[r0,#0x38]
;;;25     	PORTE->PCR[DAC_POS] |= PORT_PCR_MUX(0);	// Select analog 
00001e  6b81              LDR      r1,[r0,#0x38]
000020  6381              STR      r1,[r0,#0x38]
;;;26     		
;;;27     	// Disable buffer mode
;;;28     	DAC0->C1 = 0;
000022  4888              LDR      r0,|L1.580|
000024  2100              MOVS     r1,#0
000026  7081              STRB     r1,[r0,#2]
;;;29     	DAC0->C2 = 0;
000028  70c1              STRB     r1,[r0,#3]
;;;30     	
;;;31     	// Enable DAC, select VDDA as reference voltage
;;;32     	DAC0->C0 = MASK(DAC_C0_DACEN_SHIFT) | MASK(DAC_C0_DACRFS_SHIFT);
00002a  21c0              MOVS     r1,#0xc0
00002c  7041              STRB     r1,[r0,#1]
;;;33     }
00002e  4770              BX       lr
;;;34     
                          ENDP

                  Play_Sound_Sample PROC
;;;37     */
;;;38     void Play_Sound_Sample(uint16_t val) {
000030  0501              LSLS     r1,r0,#20
;;;39     	DAC0->DAT[0].DATH = DAC_DATH_DATA1(val >> 8);
000032  0f0a              LSRS     r2,r1,#28
000034  4983              LDR      r1,|L1.580|
000036  3920              SUBS     r1,r1,#0x20
000038  704a              STRB     r2,[r1,#1]
;;;40     	DAC0->DAT[0].DATL = DAC_DATL_DATA0(val);
00003a  7008              STRB     r0,[r1,#0]
;;;41     }
00003c  4770              BX       lr
;;;42     
                          ENDP

                  SineTable_Init PROC
;;;43     void SineTable_Init(void) {
00003e  b5f8              PUSH     {r3-r7,lr}
;;;44     	unsigned n;
;;;45     	
;;;46     	for (n=0; n<NUM_STEPS; n++) {
000040  2400              MOVS     r4,#0
;;;47     		SineTable[n] = (MAX_DAC_CODE/2)*(1+sinf(n*(2*3.1415927/NUM_STEPS)));
000042  4e81              LDR      r6,|L1.584|
000044  4f81              LDR      r7,|L1.588|
000046  4d82              LDR      r5,|L1.592|
                  |L1.72|
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       __aeabi_ui2d
00004e  4632              MOV      r2,r6
000050  463b              MOV      r3,r7
000052  f7fffffe          BL       __aeabi_dmul
000056  f7fffffe          BL       __aeabi_d2f
00005a  f7fffffe          BL       sinf
00005e  217f              MOVS     r1,#0x7f
000060  05c9              LSLS     r1,r1,#23
000062  f7fffffe          BL       __aeabi_fadd
000066  497b              LDR      r1,|L1.596|
000068  f7fffffe          BL       __aeabi_fmul
00006c  f7fffffe          BL       __aeabi_f2uiz
000070  0061              LSLS     r1,r4,#1
000072  5268              STRH     r0,[r5,r1]
000074  1c64              ADDS     r4,r4,#1              ;46
000076  2c40              CMP      r4,#0x40              ;46
000078  d3e6              BCC      |L1.72|
;;;48     	}
;;;49     }
00007a  bdf8              POP      {r3-r7,pc}
;;;50     
                          ENDP

                  Init_Waveform PROC
;;;51     void Init_Waveform(void) {
00007c  b5f8              PUSH     {r3-r7,lr}
;;;52     	uint32_t i;
;;;53     	
;;;54     	for (i=0; i<NUM_WAVEFORM_SAMPLES; i++) {
00007e  2600              MOVS     r6,#0
;;;55     		Waveform[i] = (MAX_DAC_CODE/2)*
000080  4f75              LDR      r7,|L1.600|
                  |L1.130|
000082  4630              MOV      r0,r6
000084  f7fffffe          BL       __aeabi_ui2d
000088  4a6f              LDR      r2,|L1.584|
00008a  4b70              LDR      r3,|L1.588|
00008c  f7fffffe          BL       __aeabi_dmul
000090  f7fffffe          BL       __aeabi_d2f
000094  f7fffffe          BL       sinf
000098  f7fffffe          BL       __aeabi_f2d
00009c  4604              MOV      r4,r0
00009e  460d              MOV      r5,r1
0000a0  4630              MOV      r0,r6
0000a2  f7fffffe          BL       __aeabi_ui2f
0000a6  2108              MOVS     r1,#8
0000a8  43c9              MVNS     r1,r1
0000aa  f7fffffe          BL       __ARM_scalbnf
0000ae  f7fffffe          BL       __aeabi_f2d
0000b2  2200              MOVS     r2,#0
0000b4  463b              MOV      r3,r7
0000b6  f7fffffe          BL       __aeabi_drsub
0000ba  4622              MOV      r2,r4
0000bc  462b              MOV      r3,r5
0000be  f7fffffe          BL       __aeabi_dmul
0000c2  2200              MOVS     r2,#0
0000c4  463b              MOV      r3,r7
0000c6  f7fffffe          BL       __aeabi_dadd
0000ca  2200              MOVS     r2,#0
0000cc  4b63              LDR      r3,|L1.604|
0000ce  f7fffffe          BL       __aeabi_dmul
0000d2  f7fffffe          BL       __aeabi_d2uiz
0000d6  495e              LDR      r1,|L1.592|
0000d8  0072              LSLS     r2,r6,#1
0000da  3180              ADDS     r1,r1,#0x80
0000dc  5288              STRH     r0,[r1,r2]
0000de  1c76              ADDS     r6,r6,#1              ;54
0000e0  2001              MOVS     r0,#1                 ;54
0000e2  0240              LSLS     r0,r0,#9              ;54
0000e4  4286              CMP      r6,r0                 ;54
0000e6  d3cc              BCC      |L1.130|
;;;56     			(1.0+((1.0-((float)i)/NUM_WAVEFORM_SAMPLES))*sinf(i*(2*3.1415927/NUM_STEPS)));
;;;57     	}
;;;58     }
0000e8  bdf8              POP      {r3-r7,pc}
;;;59     
                          ENDP

                  Sound_Init PROC
;;;60     /* Initialize sound hardware and sine table*/
;;;61     void Sound_Init(void) {
0000ea  b510              PUSH     {r4,lr}
;;;62     	SineTable_Init();	
0000ec  f7fffffe          BL       SineTable_Init
;;;63     	Init_Waveform();
0000f0  f7fffffe          BL       Init_Waveform
;;;64     
;;;65     	DAC_Init();
0000f4  f7fffffe          BL       DAC_Init
;;;66     	DMA_Init();
0000f8  f7fffffe          BL       DMA_Init
;;;67     	TPM0_Init();
0000fc  f7fffffe          BL       TPM0_Init
;;;68     	Configure_TPM0_for_DMA(45);
000100  202d              MOVS     r0,#0x2d
000102  f7fffffe          BL       Configure_TPM0_for_DMA
;;;69     
;;;70     	SIM->SOPT2 |= (SIM_SOPT2_TPMSRC(1) | SIM_SOPT2_PLLFLLSEL_MASK);
000106  484d              LDR      r0,|L1.572|
000108  6841              LDR      r1,[r0,#4]
00010a  4a55              LDR      r2,|L1.608|
00010c  4311              ORRS     r1,r1,r2
00010e  6041              STR      r1,[r0,#4]
;;;71     
;;;72     
;;;73     	SIM->SCGC5 |= (1UL << SIM_SCGC5_PORTE_SHIFT); 
000110  6b81              LDR      r1,[r0,#0x38]
000112  2201              MOVS     r2,#1
000114  0352              LSLS     r2,r2,#13
000116  4311              ORRS     r1,r1,r2
000118  6381              STR      r1,[r0,#0x38]
;;;74     	
;;;75     	PORTE->PCR[AMP_ENABLE_POS] &= ~PORT_PCR_MUX_MASK;	
00011a  4849              LDR      r0,|L1.576|
00011c  6b41              LDR      r1,[r0,#0x34]
00011e  2207              MOVS     r2,#7
000120  0212              LSLS     r2,r2,#8
000122  4391              BICS     r1,r1,r2
000124  6341              STR      r1,[r0,#0x34]
;;;76     	PORTE->PCR[AMP_ENABLE_POS] |= PORT_PCR_MUX(1);	// Select GPIO
000126  6b41              LDR      r1,[r0,#0x34]
000128  1582              ASRS     r2,r0,#22
00012a  4311              ORRS     r1,r1,r2
00012c  6341              STR      r1,[r0,#0x34]
;;;77     	PTE->PDDR |= MASK(AMP_ENABLE_POS); // set to output
00012e  484d              LDR      r0,|L1.612|
000130  6942              LDR      r2,[r0,#0x14]
000132  0541              LSLS     r1,r0,#21
000134  430a              ORRS     r2,r2,r1
000136  6142              STR      r2,[r0,#0x14]
;;;78     	PTE->PSOR = MASK(AMP_ENABLE_POS);  // enable audio amp
000138  6041              STR      r1,[r0,#4]
;;;79     
;;;80     }
00013a  bd10              POP      {r4,pc}
;;;81     
                          ENDP

                  Sound_Enable_Amp PROC
;;;82     void Sound_Enable_Amp(void) {
00013c  2001              MOVS     r0,#1
;;;83     	PTE->PSOR = MASK(AMP_ENABLE_POS);  // enable audio amp
00013e  4949              LDR      r1,|L1.612|
000140  0740              LSLS     r0,r0,#29
000142  6048              STR      r0,[r1,#4]
;;;84     }
000144  4770              BX       lr
;;;85     
                          ENDP

                  Sound_Disable_Amp PROC
;;;86     void Sound_Disable_Amp(void) {
000146  2001              MOVS     r0,#1
;;;87     	PTE->PCOR = MASK(AMP_ENABLE_POS);  // disable audio amp
000148  4946              LDR      r1,|L1.612|
00014a  0740              LSLS     r0,r0,#29
00014c  6088              STR      r0,[r1,#8]
;;;88     }
00014e  4770              BX       lr
;;;89     
                          ENDP

                  Play_Tone PROC
;;;90     void Play_Tone(void) {
000150  b5f8              PUSH     {r3-r7,lr}
;;;91     	int n, d=MAX_DAC_CODE>>1, p;
000152  4845              LDR      r0,|L1.616|
;;;92     	
;;;93     	for (p=5; p>=1; p--) {
000154  2505              MOVS     r5,#5
;;;94     		for (n=0; n<20/p; n++) {
;;;95     			Play_Sound_Sample((MAX_DAC_CODE>>1)+d);
000156  0046              LSLS     r6,r0,#1
;;;96     			Delay(p);
;;;97     			Play_Sound_Sample((MAX_DAC_CODE>>1)-d);
000158  1a07              SUBS     r7,r0,r0
                  |L1.346|
00015a  2400              MOVS     r4,#0                 ;94
00015c  2014              MOVS     r0,#0x14              ;94
00015e  4629              MOV      r1,r5                 ;91
000160  f7fffffe          BL       __aeabi_idivmod
000164  9000              STR      r0,[sp,#0]            ;94
000166  e00c              B        |L1.386|
                  |L1.360|
000168  b2b0              UXTH     r0,r6                 ;95
00016a  f7fffffe          BL       Play_Sound_Sample
00016e  4628              MOV      r0,r5                 ;96
000170  f7fffffe          BL       Delay
000174  b2b8              UXTH     r0,r7
000176  f7fffffe          BL       Play_Sound_Sample
;;;98     			Delay(p);
00017a  4628              MOV      r0,r5
00017c  f7fffffe          BL       Delay
000180  1c64              ADDS     r4,r4,#1              ;94
                  |L1.386|
000182  9800              LDR      r0,[sp,#0]            ;94
000184  42a0              CMP      r0,r4                 ;94
000186  dcef              BGT      |L1.360|
000188  1e6d              SUBS     r5,r5,#1              ;93
00018a  2d01              CMP      r5,#1                 ;93
00018c  dae5              BGE      |L1.346|
;;;99     		}
;;;100    	}
;;;101    }
00018e  bdf8              POP      {r3-r7,pc}
;;;102    
                          ENDP

                  Sound_Generate_Next_Sample PROC
;;;103    uint16_t Sound_Generate_Next_Sample (void) {
000190  4a36              LDR      r2,|L1.620|
;;;104    	static uint16_t lfsr = 0xACE1u;
;;;105    	static uint16_t bit;
;;;106    	
;;;107    	// source code from http://en.wikipedia.org/wiki/Linear_feedback_shift_register
;;;108      /* taps: 16 14 13 11; characteristic polynomial: x^16 + x^14 + x^13 + x^11 + 1 */
;;;109      bit  = ((lfsr >> 0) ^ (lfsr >> 2) ^ (lfsr >> 3) ^ (lfsr >> 5) ) & 1;
000192  8810              LDRH     r0,[r2,#0]  ; lfsr
000194  0881              LSRS     r1,r0,#2
000196  4041              EORS     r1,r1,r0
000198  08c3              LSRS     r3,r0,#3
00019a  4059              EORS     r1,r1,r3
00019c  0943              LSRS     r3,r0,#5
00019e  4059              EORS     r1,r1,r3
0001a0  07c9              LSLS     r1,r1,#31
0001a2  0fc9              LSRS     r1,r1,#31
0001a4  8051              STRH     r1,[r2,#2]
;;;110      lfsr =  (lfsr >> 1) | (bit << 15);
0001a6  0840              LSRS     r0,r0,#1
0001a8  03c9              LSLS     r1,r1,#15
0001aa  4308              ORRS     r0,r0,r1
0001ac  8010              STRH     r0,[r2,#0]
;;;111    	return lfsr & 0x03ff;
0001ae  0580              LSLS     r0,r0,#22
0001b0  0d80              LSRS     r0,r0,#22
;;;112    }
0001b2  4770              BX       lr
;;;113    
                          ENDP

                  Play_Waveform_with_DMA PROC
;;;114    // void Play_Waveform_with_DMA(uint32_t sample_period_us, uint16_t * waveform, uint32_t num_samples) {
;;;115    void Play_Waveform_with_DMA(void) {
0001b4  b510              PUSH     {r4,lr}
;;;116    	//	Init_Waveform();
;;;117    	//	Configure_TPM0_for_DMA(45);
;;;118    	Configure_DMA_For_Playback(Waveform, NUM_WAVEFORM_SAMPLES, 1);
0001b6  4826              LDR      r0,|L1.592|
0001b8  2201              MOVS     r2,#1
0001ba  0251              LSLS     r1,r2,#9
0001bc  3080              ADDS     r0,r0,#0x80
0001be  f7fffffe          BL       Configure_DMA_For_Playback
;;;119    	Start_DMA_Playback();
0001c2  f7fffffe          BL       Start_DMA_Playback
;;;120    }
0001c6  bd10              POP      {r4,pc}
;;;121    
                          ENDP

                  Play_Tone_with_DMA PROC
;;;122    
;;;123    void Play_Tone_with_DMA(unsigned int period, unsigned int num_cycles) {
0001c8  b510              PUSH     {r4,lr}
0001ca  460c              MOV      r4,r1
;;;124    	Configure_TPM0_for_DMA(period/NUM_STEPS);
0001cc  0980              LSRS     r0,r0,#6
0001ce  f7fffffe          BL       Configure_TPM0_for_DMA
;;;125    	Configure_DMA_For_Playback(SineTable, NUM_STEPS, num_cycles);
0001d2  4622              MOV      r2,r4
0001d4  2140              MOVS     r1,#0x40
0001d6  481e              LDR      r0,|L1.592|
0001d8  f7fffffe          BL       Configure_DMA_For_Playback
;;;126    	Start_DMA_Playback();
0001dc  f7fffffe          BL       Start_DMA_Playback
;;;127    }
0001e0  bd10              POP      {r4,pc}
;;;128    
                          ENDP

                  Task_Sound_Manager PROC
;;;129    
;;;130    __task void Task_Sound_Manager(void) {
0001e2  4f23              LDR      r7,|L1.624|
;;;131    	
;;;132    	os_itv_set(1000);
0001e4  207d              MOVS     r0,#0x7d
0001e6  00c0              LSLS     r0,r0,#3
0001e8  46bc              MOV      r12,r7
0001ea  df00              SVC      #0x0
;;;133    	
;;;134    	while (1) {
;;;135    		os_itv_wait();
;;;136    		//		os_evt_wait_and(EV_PLAYSOUND, WAIT_FOREVER); // wait for trigger
;;;137    		// make a new sound every second
;;;138    		
;;;139    		// Hack - temporary code until voice code is added
;;;140    		WNG_Len = 2500;
0001ec  4d21              LDR      r5,|L1.628|
0001ee  4c1f              LDR      r4,|L1.620|
                  |L1.496|
0001f0  4f21              LDR      r7,|L1.632|
0001f2  46bc              MOV      r12,r7                ;135
0001f4  df00              SVC      #0x0                  ;135
0001f6  6065              STR      r5,[r4,#4]  ; WNG_Len
;;;141    		Play_Waveform_with_DMA();
0001f8  f7fffffe          BL       Play_Waveform_with_DMA
0001fc  e7f8              B        |L1.496|
;;;142    	}
;;;143    }
;;;144    
                          ENDP

                  Task_Refill_Sound_Buffer PROC
;;;145    __task void Task_Refill_Sound_Buffer(void) {
0001fe  4c14              LDR      r4,|L1.592|
;;;146    	uint32_t i;
;;;147    	
;;;148    	while (1) {
;;;149    		os_evt_wait_and(EV_REFILL_SOUND, WAIT_FOREVER); // wait for trigger
;;;150    
;;;151    		for (i=0; i<NUM_WAVEFORM_SAMPLES; i++) {
;;;152    			if (WNG_Len > 0) {
000200  4e1a              LDR      r6,|L1.620|
;;;153    				Waveform[i] = Sound_Generate_Next_Sample();
000202  3480              ADDS     r4,r4,#0x80
;;;154    				WNG_Len--;
;;;155    			} else {
;;;156    				Waveform[i] = MAX_DAC_CODE/2;
000204  4d18              LDR      r5,|L1.616|
000206  e011              B        |L1.556|
                  |L1.520|
000208  6870              LDR      r0,[r6,#4]            ;152  ; WNG_Len
00020a  2800              CMP      r0,#0                 ;152
00020c  d007              BEQ      |L1.542|
00020e  f7fffffe          BL       Sound_Generate_Next_Sample
000212  0079              LSLS     r1,r7,#1              ;153
000214  5260              STRH     r0,[r4,r1]            ;153
000216  6870              LDR      r0,[r6,#4]            ;154  ; WNG_Len
000218  1e40              SUBS     r0,r0,#1              ;154
00021a  6070              STR      r0,[r6,#4]            ;154  ; WNG_Len
00021c  e001              B        |L1.546|
                  |L1.542|
00021e  0078              LSLS     r0,r7,#1
000220  5225              STRH     r5,[r4,r0]
                  |L1.546|
000222  1c7f              ADDS     r7,r7,#1              ;151
000224  2001              MOVS     r0,#1                 ;151
000226  0240              LSLS     r0,r0,#9              ;151
000228  4287              CMP      r7,r0                 ;151
00022a  d3ed              BCC      |L1.520|
                  |L1.556|
00022c  4f14              LDR      r7,|L1.640|
00022e  2201              MOVS     r2,#1                 ;149
000230  4912              LDR      r1,|L1.636|
000232  4610              MOV      r0,r2                 ;149
000234  46bc              MOV      r12,r7                ;149
000236  df00              SVC      #0x0                  ;149
000238  2700              MOVS     r7,#0                 ;151
00023a  e7e5              B        |L1.520|
;;;157    			}
;;;158    		}
;;;159    	}
;;;160    }
;;;161    
                          ENDP

                  |L1.572|
                          DCD      0x40048000
                  |L1.576|
                          DCD      0x4004d040
                  |L1.580|
                          DCD      0x4003f020
                  |L1.584|
                          DCD      0x5a7ed197
                  |L1.588|
                          DCD      0x3fb921fb
                  |L1.592|
                          DCD      ||.bss||
                  |L1.596|
                          DCD      0x44ffe000
                  |L1.600|
                          DCD      0x3ff00000
                  |L1.604|
                          DCD      0x409ffc00
                  |L1.608|
                          DCD      0x01010000
                  |L1.612|
                          DCD      0x400ff100
                  |L1.616|
                          DCD      0x000007ff
                  |L1.620|
                          DCD      ||.data||
                  |L1.624|
                          DCD      rt_itv_set
                  |L1.628|
                          DCD      0x000009c4
                  |L1.632|
                          DCD      rt_itv_wait
                  |L1.636|
                          DCD      0x0000ffff
                  |L1.640|
                          DCD      rt_evt_wait

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  SineTable
                          %        128
                  Waveform
                          %        1024

                          AREA ||.data||, DATA, ALIGN=2

                  lfsr
000000  ace1              DCW      0xace1
                  bit
000002  0000              DCB      0x00,0x00
                  WNG_Len
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "src\\sound.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_sound_c_WNG_Len____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_sound_c_WNG_Len____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_sound_c_WNG_Len____REVSH|
#line 144
|__asm___7_sound_c_WNG_Len____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
