L 1 "src\omnom.c"
N#include "TFT_LCD.h"
L 1 ".\inc\TFT_LCD.h" 1
N#ifndef TFT_LCD_H
N#define TFT_LCD_H
N
N#include <stdint.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision: 185525 $
N * Checkin $Date: 2014-05-29 12:44:48 +0100 (Thu, 29 May 2014) $
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5050106
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX INT64_MAX
N#else
N#define UINTPTR_MAX INT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 5 ".\inc\TFT_LCD.h" 2
N
N#define TFT_WIDTH (240)
N#define TFT_HEIGHT (320)
N
N// TFT LCD Hardware Interface
N// signals -- all on port C
N#define TFT_DB8_POS (3)
N#define TFT_DB15_POS (10)
N#define TFT_D_NC_POS (12)
N#define TFT_NWR_POS (13)
N#define TFT_NRD_POS (16)
N#define TFT_NRST_POS (17)
N#define TFT_DATA_MASK (((unsigned )0x0ff) << TFT_DB8_POS)
N
N// Backlight
N#define TFT_BL_TPM (TPM1)
N#define TFT_BL_TPM_CHANNEL (0)
N#define TFT_BL_TPM_FREQ (200)
N#define TFT_BL_PERIOD ((SystemCoreClock)/(2*(TFT_BL_TPM_FREQ)))
N
N// Touchscreen Hardware Interface
N#define TFT_TS_YD_CHANNEL (0)
N#define TFT_TS_YU_CHANNEL (3)
N#define TFT_TS_XL_CHANNEL (4) 
N#define TFT_TS_XR_CHANNEL (7)
N
N#define TFT_TS_YD_BIT (20)
N#define TFT_TS_XL_BIT (21)
N#define TFT_TS_YU_BIT (22)
N#define TFT_TS_XR_BIT (23)
N
N// Touchscreen Configuration
N#define TS_DELAY (1)
N#define TS_CALIB_SAMPLES (10)
N
N/**************************************************************/
N#define	GPIO_ResetBit(pos)	(FPTC->PCOR = MASK(pos))
N#define	GPIO_SetBit(pos) 		(FPTC->PSOR = MASK(pos))
N#define GPIO_Write(cmd) 		FPTC->PDOR &= ~TFT_DATA_MASK; \
N														FPTC->PDOR |= (cmd & 0xff) << TFT_DB8_POS;
X#define GPIO_Write(cmd) 		FPTC->PDOR &= ~TFT_DATA_MASK; 														FPTC->PDOR |= (cmd & 0xff) << TFT_DB8_POS;
N/**************************************************************/
N
N#define MIN(a,b) ((a)<(b)? a : b)
N#define MAX(a,b) ((a)>(b)? a : b)
N
Ntypedef struct {
N	uint16_t X, Y;
N} PT_T;
N
Ntypedef struct {
N	uint8_t R, G, B; // note: using 5-6-5 color mode for LCD. 
N									 // Values are left aligned here
N} COLOR_T;
N
N
N void TFT_Init(void);
N void TFT_Fill_Buffer(COLOR_T * color);
N void TFT_Fill_Rectangle(PT_T * p1, PT_T * p2, COLOR_T * color);
N uint32_t TFT_Start_Rectangle(PT_T * p1, PT_T * p2);
N void TFT_Write_Rectangle_Pixel(COLOR_T * color, unsigned int count);
N
N
N void TFT_Plot_Pixel(PT_T * pos, COLOR_T * color);
N void TFT_Set_BL(uint8_t on);
N void TFT_Set_Brightness(uint8_t brightness);
N void TFT_Set_Backlight_Brightness(uint16_t brightness_percent);
N void TFT_Set_Colors(COLOR_T * foreground, COLOR_T * background);
N
N void TFT_Erase(void);
N void TFT_Text_Init(uint8_t font_num);
N void TFT_Text_PrintChar(PT_T * pos, char ch);
N void TFT_Text_PrintStr(PT_T * pos, char * str);
N void TFT_Text_PrintStr_RC( uint8_t  row, uint8_t col, char *  str);
N
N void Graphics_Test(void);
N void TFT_Draw_Line(PT_T * p1, PT_T * p2, COLOR_T * color);
N
N
N void TFT_TS_Init(void);
N uint32_t TFT_TS_Read(PT_T * position);
N void TFT_TS_Test(void);
N void TFT_TS_Calibrate(void);
N
N extern uint8_t G_TFT_char_width, G_TFT_char_height;
N
N
N#endif
L 2 "src\omnom.c" 2
N
Nconst COLOR_T omnom[20][20]=
N{
N{
N{0,0,0}, 
N{5,7,4}, 
N{0,2,1}, 
N{0,1,0}, 
N{7,5,6}, 
N{5,1,0}, 
N{3,0,0}, 
N{3,4,0}, 
N{0,1,6}, 
N{0,5,0}, 
N{38,51,25}, 
N{15,26,0}, 
N{2,4,0}, 
N{4,3,1}, 
N{0,0,0}, 
N{4,4,4}, 
N{1,2,0}, 
N{4,5,0}, 
N{1,0,5}, 
N{4,1,12}, 
N},
N
N{
N{5,5,7}, 
N{0,1,3}, 
N{0,1,0}, 
N{3,5,4}, 
N{1,0,2}, 
N{4,0,1}, 
N{10,6,3}, 
N{0,1,0}, 
N{0,4,0}, 
N{0,9,0}, 
N{162,175,149}, 
N{42,52,25}, 
N{0,2,0}, 
N{4,3,1}, 
N{2,2,4}, 
N{0,0,2}, 
N{0,0,0}, 
N{0,0,0}, 
N{1,0,5}, 
N{9,6,17}, 
N},
N
N{
N{1,0,10}, 
N{0,0,5}, 
N{4,6,5}, 
N{0,1,0}, 
N{2,0,5}, 
N{5,0,7}, 
N{3,0,0}, 
N{0,1,0}, 
N{1,9,0}, 
N{28,41,13}, 
N{38,48,23}, 
N{0,5,0}, 
N{6,7,0}, 
N{1,0,0}, 
N{0,0,4}, 
N{3,2,10}, 
N{6,6,16}, 
N{0,0,10}, 
N{1,0,8}, 
N{2,1,9}, 
N},
N
N{
N{0,0,9}, 
N{3,2,10}, 
N{0,1,3}, 
N{0,1,0}, 
N{1,0,5}, 
N{4,0,6}, 
N{7,2,6}, 
N{6,6,0}, 
N{22,31,4}, 
N{155,169,134}, 
N{72,83,53}, 
N{1,9,0}, 
N{0,1,0}, 
N{3,1,4}, 
N{0,0,5}, 
N{2,1,9}, 
N{0,0,7}, 
N{0,0,8}, 
N{1,0,8}, 
N{0,0,5}, 
N},
N
N{
N{4,2,7}, 
N{0,0,4}, 
N{0,0,2}, 
N{1,2,4}, 
N{7,6,11}, 
N{30,28,31}, 
N{255,253,255}, 
N{252,251,246}, 
N{246,254,233}, 
N{140,151,121}, 
N{163,173,139}, 
N{190,196,170}, 
N{255,254,250}, 
N{248,246,251}, 
N{10,9,14}, 
N{0,0,2}, 
N{0,1,0}, 
N{5,7,4}, 
N{0,0,2}, 
N{0,0,4}, 
N},
N
N{
N{2,0,3}, 
N{1,1,1}, 
N{4,7,0}, 
N{0,5,0}, 
N{37,38,33}, 
N{255,255,251}, 
N{255,254,255}, 
N{255,254,250}, 
N{252,255,244}, 
N{242,252,228}, 
N{250,255,230}, 
N{254,255,237}, 
N{252,251,247}, 
N{255,254,255}, 
N{250,250,250}, 
N{1,4,0}, 
N{0,6,0}, 
N{0,6,0}, 
N{0,1,0}, 
N{0,0,2}, 
N},
N
N{
N{3,0,7}, 
N{3,4,0}, 
N{0,6,0}, 
N{138,147,118}, 
N{253,255,235}, 
N{255,255,244}, 
N{254,253,249}, 
N{253,253,251}, 
N{1,7,0}, 
N{240,248,233}, 
N{246,252,240}, 
N{0,3,0}, 
N{255,255,250}, 
N{255,255,250}, 
N{251,252,244}, 
N{242,246,231}, 
N{38,47,18}, 
N{0,9,0}, 
N{0,3,0}, 
N{0,2,1}, 
N},
N
N{
N{1,0,4}, 
N{5,7,0}, 
N{22,34,0}, 
N{162,177,118}, 
N{251,255,222}, 
N{254,255,238}, 
N{255,255,250}, 
N{254,255,250}, 
N{0,5,0}, 
N{248,255,241}, 
N{250,255,246}, 
N{0,2,0}, 
N{254,254,246}, 
N{255,255,242}, 
N{250,255,233}, 
N{249,255,225}, 
N{163,177,128}, 
N{42,55,12}, 
N{0,5,0}, 
N{0,2,0}, 
N},
N
N{
N{3,4,0}, 
N{2,9,0}, 
N{165,185,98}, 
N{164,185,92}, 
N{245,255,205}, 
N{254,255,236}, 
N{252,255,246}, 
N{254,255,248}, 
N{250,255,238}, 
N{247,255,232}, 
N{252,255,241}, 
N{251,255,241}, 
N{255,255,246}, 
N{253,255,237}, 
N{248,255,217}, 
N{150,165,106}, 
N{164,182,108}, 
N{166,185,121}, 
N{0,9,0}, 
N{0,7,0}, 
N},
N
N{
N{0,1,0}, 
N{11,19,0}, 
N{157,178,85}, 
N{165,191,84}, 
N{152,170,94}, 
N{245,255,205}, 
N{249,255,222}, 
N{246,255,219}, 
N{243,255,205}, 
N{45,63,5}, 
N{36,50,1}, 
N{246,255,217}, 
N{248,255,221}, 
N{253,255,219}, 
N{238,255,187}, 
N{166,188,106}, 
N{162,184,102}, 
N{45,64,0}, 
N{0,7,0}, 
N{0,5,0}, 
N},
N
N{
N{0,3,0}, 
N{0,7,0}, 
N{88,108,36}, 
N{161,186,85}, 
N{163,189,79}, 
N{170,193,85}, 
N{234,255,164}, 
N{231,252,159}, 
N{149,177,64}, 
N{160,189,73}, 
N{155,179,81}, 
N{155,175,88}, 
N{153,170,90}, 
N{150,170,85}, 
N{158,185,82}, 
N{160,187,90}, 
N{235,255,190}, 
N{219,235,196}, 
N{2,12,1}, 
N{0,2,4}, 
N},
N
N{
N{1,3,0}, 
N{0,5,0}, 
N{240,255,196}, 
N{240,255,169}, 
N{152,183,56}, 
N{166,198,65}, 
N{154,181,68}, 
N{163,190,77}, 
N{162,195,65}, 
N{155,188,58}, 
N{159,187,74}, 
N{165,190,86}, 
N{165,187,87}, 
N{155,181,74}, 
N{164,196,71}, 
N{33,66,0}, 
N{30,56,0}, 
N{32,50,12}, 
N{0,8,0}, 
N{0,6,9}, 
N},
N
N{
N{0,2,3}, 
N{4,13,0}, 
N{35,55,0}, 
N{157,184,87}, 
N{154,186,61}, 
N{41,73,0}, 
N{160,187,84}, 
N{158,185,88}, 
N{155,186,82}, 
N{160,191,88}, 
N{165,192,99}, 
N{156,180,92}, 
N{155,180,88}, 
N{68,97,0}, 
N{113,151,14}, 
N{158,198,66}, 
N{155,184,91}, 
N{41,62,5}, 
N{0,7,0}, 
N{0,5,0}, 
N},
N
N{
N{0,2,3}, 
N{2,11,0}, 
N{37,60,0}, 
N{161,192,88}, 
N{154,190,58}, 
N{156,193,54}, 
N{234,255,146}, 
N{235,255,155}, 
N{36,70,0}, 
N{31,65,0}, 
N{33,65,0}, 
N{45,74,0}, 
N{236,255,154}, 
N{228,255,137}, 
N{158,200,52}, 
N{152,195,53}, 
N{156,189,82}, 
N{2,27,0}, 
N{2,16,0}, 
N{0,11,3}, 
N},
N
N{
N{0,5,0}, 
N{0,10,0}, 
N{59,83,9}, 
N{157,192,76}, 
N{156,196,45}, 
N{156,199,32}, 
N{162,202,43}, 
N{163,203,44}, 
N{157,199,39}, 
N{156,198,36}, 
N{165,207,47}, 
N{154,194,35}, 
N{156,196,37}, 
N{155,197,37}, 
N{153,199,38}, 
N{152,196,51}, 
N{114,148,36}, 
N{113,139,66}, 
N{14,28,5}, 
N{0,4,3}, 
N},
N
N{
N{0,5,1}, 
N{24,37,11}, 
N{118,141,73}, 
N{111,145,35}, 
N{157,197,49}, 
N{159,202,35}, 
N{155,196,30}, 
N{160,203,36}, 
N{158,201,36}, 
N{151,196,31}, 
N{157,200,35}, 
N{154,197,30}, 
N{161,204,29}, 
N{157,200,32}, 
N{150,195,44}, 
N{114,153,28}, 
N{117,146,54}, 
N{116,135,79}, 
N{32,43,26}, 
N{0,2,4}, 
N},
N
N{
N{0,3,5}, 
N{0,8,0}, 
N{119,138,92}, 
N{111,138,57}, 
N{109,142,27}, 
N{161,197,63}, 
N{153,191,52}, 
N{157,195,58}, 
N{157,193,67}, 
N{158,193,73}, 
N{153,188,72}, 
N{107,144,15}, 
N{158,198,40}, 
N{159,198,43}, 
N{153,188,70}, 
N{33,61,0}, 
N{38,51,5}, 
N{24,32,9}, 
N{8,11,2}, 
N{0,1,0}, 
N},
N
N{
N{0,2,8}, 
N{0,5,0}, 
N{0,11,0}, 
N{0,17,0}, 
N{35,58,0}, 
N{161,187,96}, 
N{159,185,94}, 
N{28,56,0}, 
N{36,63,0}, 
N{46,72,0}, 
N{28,53,0}, 
N{36,64,0}, 
N{159,189,75}, 
N{156,186,72}, 
N{163,187,111}, 
N{6,22,0}, 
N{3,7,0}, 
N{2,3,0}, 
N{0,1,0}, 
N{0,1,0}, 
N},
N
N{
N{1,1,9}, 
N{4,8,7}, 
N{0,4,0}, 
N{0,8,0}, 
N{0,9,0}, 
N{1,15,0}, 
N{0,6,0}, 
N{2,14,0}, 
N{0,8,0}, 
N{0,12,0}, 
N{0,5,0}, 
N{0,8,0}, 
N{5,18,0}, 
N{2,15,0}, 
N{0,10,0}, 
N{0,4,0}, 
N{0,2,0}, 
N{0,1,0}, 
N{1,2,0}, 
N{2,3,0}, 
N},
N
N{
N{0,0,7}, 
N{0,0,2}, 
N{5,8,0}, 
N{0,4,0}, 
N{0,6,0}, 
N{0,2,0}, 
N{2,6,18}, 
N{0,0,12}, 
N{0,3,7}, 
N{2,8,8}, 
N{1,6,12}, 
N{0,1,4}, 
N{3,9,0}, 
N{0,3,0}, 
N{0,1,0}, 
N{0,1,2}, 
N{2,2,0}, 
N{1,2,0}, 
N{0,1,0}, 
N{0,1,0}, 
N}
N};
